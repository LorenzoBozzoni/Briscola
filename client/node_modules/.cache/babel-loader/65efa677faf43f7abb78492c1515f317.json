{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loreb\\\\Documents\\\\Unipr\\\\Terzo_anno\\\\Primo_semestre\\\\Tecnologie_internet\\\\Briscola\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 3\n}, this)); //var idPartita = 0;\n\n/*\n  socket.on('connect', () => {\n    window.alert(`Client connesso con id ${socket.id}`)\n    socket.on('partitaIniziata',(partita, mano) => {\n      idPartita = partita.IdPartita;      // memorizziamo nel client l'id della partita\n      window.alert(idPartita)\n      \n      /*\n      for (i = 0; i < partita.Mazzo.length; i++){\n        \n      }\n      // manca chiusura commento multiline\n    })\n  })\n*/\n\nexport function cartaGiocata(id) {\n  window.alert(id);\n\n  if (socket.connected) {\n    // verifichiamo di essere connessi prima di inviare il click\n    socket.emit(\"cartaGiocata\");\n  }\n}\nexport function startGame(modalità) {\n  socket.emit('startGame', modalità); // Nell'attesa della risposta (evento socket partitaIniziata) si potrebbe rendere visibile il simbolo di attesa\n}\nexport async function access(accessType) {\n  // accessType può essere \"login\" o \"signup\"\n  window.alert(\"Nel metodo di accesso\");\n  var spinner = document.getElementById(\"spinner\").setAttribute(\"visibility\", \"visible\");\n\n  if (!socket.connected) {\n    socket.on('connect', () => {\n      window.alert(`Client connesso con id ${socket.id}`); // connessione necessaria col server\n    });\n  } else {\n    var email = document.getElementById(\"exampleInputEmail1\").value;\n    var password = document.getElementById(\"exampleInputPassword1\").value;\n    socket.emit('access', accessType, email, password);\n    window.alert(\"Evento accesso creato\");\n    socket.on('accessOutcome', accessOutcome => {\n      console.log(\"esito\", accessOutcome);\n      window.alert(\"Ricezione evento accesso: \" + accessOutcome);\n      spinner.setAttribute(\"visiblity\", \"hidden\"); // non si aggiorna lo stile della pagina così quindi non funziona\n\n      if (accessOutcome === false) {\n        //document.getElementById(\"\").setAttribute()\n        window.alert(\"Autenticazione fallita\");\n      } else {\n        //document.location.href = document.location + \"selectGame\";   // ci si sposta nella pagina per selezionare il tipo di partita\n        window.alert(\"Autenticazione riuscita\");\n      }\n    });\n  } //var switchAccess = document.getElementById(\"flexSwitchCheckDefault\").value();       // switch che dice se si sta facendo signup o login\n\n\n  if (accessType === \"login\") {// Login\n  } else {// Signup\n  }\n} // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","BrowserRouter","io","socket","root","createRoot","document","getElementById","render","cartaGiocata","id","window","alert","connected","emit","startGame","modalità","access","accessType","spinner","setAttribute","on","email","value","password","accessOutcome","console","log"],"sources":["C:/Users/loreb/Documents/Unipr/Terzo_anno/Primo_semestre/Tecnologie_internet/Briscola/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\nimport { io } from 'socket.io-client'\n\nconst socket = io('http://localhost:3001')\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>\n);\n\n//var idPartita = 0;\n\n/*\n  socket.on('connect', () => {\n    window.alert(`Client connesso con id ${socket.id}`)\n    socket.on('partitaIniziata',(partita, mano) => {\n      idPartita = partita.IdPartita;      // memorizziamo nel client l'id della partita\n      window.alert(idPartita)\n      \n      /*\n      for (i = 0; i < partita.Mazzo.length; i++){\n        \n      }\n      // manca chiusura commento multiline\n    })\n  })\n*/\n\nexport function cartaGiocata(id){\n  window.alert(id);\n  if (socket.connected){    // verifichiamo di essere connessi prima di inviare il click\n    socket.emit(\"cartaGiocata\", )\n  }\n}\n\nexport function startGame(modalità){\n  socket.emit('startGame', modalità);\n  // Nell'attesa della risposta (evento socket partitaIniziata) si potrebbe rendere visibile il simbolo di attesa\n}\n\nexport async function access(accessType){\n  // accessType può essere \"login\" o \"signup\"\n  window.alert(\"Nel metodo di accesso\");\n  var spinner = document.getElementById(\"spinner\").setAttribute(\"visibility\",\"visible\");\n  if (!socket.connected){\n    socket.on('connect', () => {\n      window.alert(`Client connesso con id ${socket.id}`)       // connessione necessaria col server\n    })\n  }else{\n    var email = document.getElementById(\"exampleInputEmail1\").value;\n    var password = document.getElementById(\"exampleInputPassword1\").value;\n    socket.emit('access', accessType, email, password); \n    window.alert(\"Evento accesso creato\")\n    socket.on('accessOutcome',(accessOutcome) => {\n      console.log(\"esito\", accessOutcome)\n      window.alert(\"Ricezione evento accesso: \" + accessOutcome)\n\n      spinner.setAttribute(\"visiblity\",\"hidden\");      // non si aggiorna lo stile della pagina così quindi non funziona\n      \n      if (accessOutcome === false) {\n        //document.getElementById(\"\").setAttribute()\n        window.alert(\"Autenticazione fallita\")\n      } else {\n        //document.location.href = document.location + \"selectGame\";   // ci si sposta nella pagina per selezionare il tipo di partita\n        window.alert(\"Autenticazione riuscita\")\n      }\n    })\n  }\n\n\n\n  //var switchAccess = document.getElementById(\"flexSwitchCheckDefault\").value();       // switch che dice se si sta facendo signup o login\n  if (accessType === \"login\"){\n    // Login\n\n  }else{\n    // Signup\n\n  }  \n  \n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AACA,SAASC,EAAT,QAAmB,kBAAnB;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;AAEA,MAAME,IAAI,GAAGN,QAAQ,CAACO,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eACE,QAAC,aAAD;EAAA,uBACE,QAAC,KAAD,CAAO,UAAP;IAAA,uBACE,QAAC,GAAD;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF,E,CAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,EAAtB,EAAyB;EAC9BC,MAAM,CAACC,KAAP,CAAaF,EAAb;;EACA,IAAIP,MAAM,CAACU,SAAX,EAAqB;IAAK;IACxBV,MAAM,CAACW,IAAP,CAAY,cAAZ;EACD;AACF;AAED,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA4B;EACjCb,MAAM,CAACW,IAAP,CAAY,WAAZ,EAAyBE,QAAzB,EADiC,CAEjC;AACD;AAED,OAAO,eAAeC,MAAf,CAAsBC,UAAtB,EAAiC;EACtC;EACAP,MAAM,CAACC,KAAP,CAAa,uBAAb;EACA,IAAIO,OAAO,GAAGb,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCa,YAAnC,CAAgD,YAAhD,EAA6D,SAA7D,CAAd;;EACA,IAAI,CAACjB,MAAM,CAACU,SAAZ,EAAsB;IACpBV,MAAM,CAACkB,EAAP,CAAU,SAAV,EAAqB,MAAM;MACzBV,MAAM,CAACC,KAAP,CAAc,0BAAyBT,MAAM,CAACO,EAAG,EAAjD,EADyB,CACiC;IAC3D,CAFD;EAGD,CAJD,MAIK;IACH,IAAIY,KAAK,GAAGhB,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8CgB,KAA1D;IACA,IAAIC,QAAQ,GAAGlB,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,EAAiDgB,KAAhE;IACApB,MAAM,CAACW,IAAP,CAAY,QAAZ,EAAsBI,UAAtB,EAAkCI,KAAlC,EAAyCE,QAAzC;IACAb,MAAM,CAACC,KAAP,CAAa,uBAAb;IACAT,MAAM,CAACkB,EAAP,CAAU,eAAV,EAA2BI,aAAD,IAAmB;MAC3CC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,aAArB;MACAd,MAAM,CAACC,KAAP,CAAa,+BAA+Ba,aAA5C;MAEAN,OAAO,CAACC,YAAR,CAAqB,WAArB,EAAiC,QAAjC,EAJ2C,CAIM;;MAEjD,IAAIK,aAAa,KAAK,KAAtB,EAA6B;QAC3B;QACAd,MAAM,CAACC,KAAP,CAAa,wBAAb;MACD,CAHD,MAGO;QACL;QACAD,MAAM,CAACC,KAAP,CAAa,yBAAb;MACD;IACF,CAbD;EAcD,CA3BqC,CA+BtC;;;EACA,IAAIM,UAAU,KAAK,OAAnB,EAA2B,CACzB;EAED,CAHD,MAGK,CACH;EAED;AAEF,C,CAGD;AACA;AACA;;AACAlB,eAAe"},"metadata":{},"sourceType":"module"}