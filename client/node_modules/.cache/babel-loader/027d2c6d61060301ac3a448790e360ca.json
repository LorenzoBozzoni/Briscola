{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loreb\\\\Documents\\\\Unipr\\\\Terzo_anno\\\\Primo_semestre\\\\Tecnologie_internet\\\\Briscola\\\\client\\\\src\\\\components\\\\GameField.js\";\nimport { React, Component } from 'react';\nimport { Navbar } from './Navbar.js';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { socket } from \"./LoginPage.js\";\n//import \"./GameField.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cartaCoperta = require('../Images/Retro.jpg');\nexport class GameField extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      primaCartaMia: \"\",\n      secondaCartaMia: \"\",\n      terzaCartaMia: \"\",\n      immPrimaCartaMia: \"\",\n      immSecondaCartaMia: \"\",\n      immTerzaCartaMia: \"\",\n      primaCartaAvversario: \"\",\n      secondaCartaAvversario: \"\",\n      terzaCartaAvversario: \"\",\n      punteggioMio: 0,\n      punteggioAvversario: 1,\n      // sbagliato apposta per vedere se setState corregge TODO: ripristinare a 0\n      idPartita: 0\n    };\n    this.handleClick = event => {\n      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\n      var id = event.currentTarget.id; // Elemento sul quale √® stato fatto il click\n      window.alert(id);\n      if (socket.connected) {\n        // verifichiamo di essere connessi prima di inviare il click\n        switch (id) {\n          case \"FirstPlayerFirstCard\":\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia);\n            break;\n          case \"FirstPlayerSecondCard\":\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia);\n            break;\n          case \"FirstPlayerThirdCard\":\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia);\n            break;\n          case \"Mazzo\":\n            socket.emit(\"pescaDalMazzo\");\n            break;\n          default:\n            break;\n        }\n      }\n    };\n  }\n  //useEffect(){\n  //listener(){\n  componentDidMount() {\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano) => {\n      window.alert(\"PARTITA INIZIATA, MIOID: \" + socket.id);\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\"))); // , mano.lastIndexOf(\"}\")\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\"))); // , partita.lastIndexOf(\"}\")\n\n      // Settiamo la mano iniziale\n      this.setState({\n        primaCartaMia: manoJSON.PrimaCarta\n      });\n      this.setState({\n        secondaCartaMia: manoJSON.SecondaCarta\n      });\n      this.setState({\n        terzaCartaMia: manoJSON.Terza\n      });\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"));\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"));\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"));\n      // Non si pu√≤ fare require(manoJSON.PrimaCarta.ImagePath)\n      this.setState({\n        immPrimaCartaMia: require(\"../Images/Piacentine/\" + percorsoPrima + \".jpg\")\n      });\n      this.setState({\n        immSecondaCartaMia: require(\"../Images/Piacentine/\" + percorsoSeconda + \".jpg\")\n      });\n      this.setState({\n        immTerzaCartaMia: require(\"../Images/Piacentine/\" + percorsoTerza + \".jpg\")\n      });\n\n      // Carte avversario\n      this.setState({\n        primaCartaAvversario: cartaCoperta\n      });\n      this.setState({\n        secondaCartaAvversario: cartaCoperta\n      });\n      this.setState({\n        terzaCartaAvversario: cartaCoperta\n      });\n\n      // Punteggio iniziale, 0 - 0 TODO: statico?\n      if (socket.id === partitaJSON.IdGiocatore1) {\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n      } else {\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n      }\n      this.setState({\n        idPartita: JSON.stringify(partitaJSON.IdPartita)\n      });\n    });\n\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta) => {\n      window.alert(\"Risposta per carta giocata, esito \" + outcome + \" carta: \" + carta);\n      if (outcome) {\n        // se esito positivo alla richiesta di giocare una carta\n        switch (carta) {\n          case this.state.primaCartaMia:\n            this.setState({\n              primaCartaMia: \"EMPTY\"\n            }); // Ovviamente allo svuotamento corrisponder√† una \"azione grafica\" associata\n            this.setState({\n              immPrimaCartaMia: \"\"\n            });\n            break;\n          case this.state.secondaCartaMia:\n            this.setState({\n              secondaCartaMia: \"EMPTY\"\n            });\n            this.setState({\n              immSecondaCartaMia: \"\"\n            });\n            break;\n          case this.state.terzaCartaMia:\n            this.setState({\n              terzaCartaMia: \"EMPTY\"\n            });\n            this.setState({\n              immTerzaCartaMia: \"\"\n            });\n            break;\n          default:\n            break;\n        }\n      } else {\n        window.alert(\"Non puoi giocare la carta\");\n      }\n    });\n\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", () => {\n      // si pu√≤ rimuovere graficamente carta a caso per√≤ VA VISUALIZZATA IN TAVOLA\n\n      window.alert(\"L'avversario ha giocato una carta in tavola\");\n      switch (this.randomNumberInRange(1, 3)) {\n        case 1:\n          this.setState({\n            primaCartaAvversario: \"EMPTY\"\n          });\n          break;\n        case 2:\n          this.setState({\n            secondaCartaAvversario: \"EMPTY\"\n          });\n          break;\n        case 3:\n          this.setState({\n            terzaCartaAvversario: \"EMPTY\"\n          });\n          break;\n        default:\n          window.alert(\"Carta giocata avversario, case default\");\n          break;\n      }\n    });\n    socket.on(\"fineMano\", () => {\n      // Aggiornamento punteggio\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\n    });\n    socket.on(\"avversarioDisconnesso\", () => {\n      window.alert(\"L'avversario si √® disconnesso\");\n    });\n  }\n  randomNumberInRange(min, max) {\n    // üëáÔ∏è get number between min (inclusive) and max (inclusive)\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        children: \"ehi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"SecondPlayerFirstCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.primaCartaAvversario,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"SecondPlayerSecondCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.secondaCartaAvversario,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"SecondPlayerThirdCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.terzaCartaAvversario,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"SecondPlayerPoints\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.punteggioAvversario\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            children: \"Mazzo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            children: \"Carta giocata 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            children: \"Carta giocata 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row BottomDiv\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"FirstPlayerFirstCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.immPrimaCartaMia,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"FirstPlayerSecondCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.immSecondaCartaMia,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"FirstPlayerThirdCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.immTerzaCartaMia,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"FirstPlayerPoints\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.punteggioMio\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n}","map":{"version":3,"names":["React","Component","Navbar","socket","cartaCoperta","require","GameField","state","primaCartaMia","secondaCartaMia","terzaCartaMia","immPrimaCartaMia","immSecondaCartaMia","immTerzaCartaMia","primaCartaAvversario","secondaCartaAvversario","terzaCartaAvversario","punteggioMio","punteggioAvversario","idPartita","handleClick","event","id","currentTarget","window","alert","connected","emit","componentDidMount","off","on","partita","mano","manoJSON","JSON","parse","substring","indexOf","partitaJSON","setState","PrimaCarta","SecondaCarta","Terza","percorsoPrima","ImagePath","lastIndexOf","percorsoSeconda","percorsoTerza","TerzaCarta","IdGiocatore1","stringify","Punteggio1","Punteggio2","IdPartita","outcome","carta","randomNumberInRange","min","max","Math","floor","random","render"],"sources":["C:/Users/loreb/Documents/Unipr/Terzo_anno/Primo_semestre/Tecnologie_internet/Briscola/client/src/components/GameField.js"],"sourcesContent":["import {React, Component} from 'react'\r\nimport {Navbar} from './Navbar.js'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {socket} from \"./LoginPage.js\"\r\n//import \"./GameField.css\";\r\n\r\nconst cartaCoperta = require('../Images/Retro.jpg');\r\n\r\n\r\nexport class GameField extends Component {\r\n  \r\n  state = {\r\n    primaCartaMia : \"\",\r\n    secondaCartaMia : \"\",\r\n    terzaCartaMia : \"\",\r\n    immPrimaCartaMia : \"\",\r\n    immSecondaCartaMia : \"\",\r\n    immTerzaCartaMia : \"\",\r\n    primaCartaAvversario : \"\",\r\n    secondaCartaAvversario : \"\",\r\n    terzaCartaAvversario : \"\",\r\n    punteggioMio : 0,\r\n    punteggioAvversario : 1,          // sbagliato apposta per vedere se setState corregge TODO: ripristinare a 0\r\n    idPartita : 0\r\n  };\r\n    \r\n  \r\n  handleClick = event => {      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\r\n    var id = event.currentTarget.id     // Elemento sul quale √® stato fatto il click\r\n    window.alert(id);\r\n    \r\n    if (socket.connected){    // verifichiamo di essere connessi prima di inviare il click\r\n      switch (id) {\r\n        case \"FirstPlayerFirstCard\":\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia)       \r\n          break;\r\n        case \"FirstPlayerSecondCard\":\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia)\r\n          break;\r\n        case \"FirstPlayerThirdCard\":\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia)\r\n          break;\r\n        case \"Mazzo\":\r\n          socket.emit(\"pescaDalMazzo\")\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n\r\n      \r\n\r\n    }\r\n  };\r\n\r\n  //useEffect(){\r\n  //listener(){\r\n  componentDidMount() {\r\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano) => {\r\n      window.alert(\"PARTITA INIZIATA, MIOID: \"+ socket.id)\r\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \r\n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\")))              // , mano.lastIndexOf(\"}\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))     // , partita.lastIndexOf(\"}\")\r\n\r\n      // Settiamo la mano iniziale\r\n      this.setState({primaCartaMia: manoJSON.PrimaCarta})\r\n      this.setState({secondaCartaMia: manoJSON.SecondaCarta})\r\n      this.setState({terzaCartaMia: manoJSON.Terza})\r\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\r\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"))\r\n      // Non si pu√≤ fare require(manoJSON.PrimaCarta.ImagePath)\r\n      this.setState({immPrimaCartaMia:require(\"../Images/Piacentine/\" + percorsoPrima + \".jpg\")})\r\n      this.setState({immSecondaCartaMia:require(\"../Images/Piacentine/\" + percorsoSeconda + \".jpg\")})\r\n      this.setState({immTerzaCartaMia:require(\"../Images/Piacentine/\" + percorsoTerza + \".jpg\")})\r\n\r\n\r\n\r\n      // Carte avversario\r\n      this.setState({primaCartaAvversario:cartaCoperta})\r\n      this.setState({secondaCartaAvversario:cartaCoperta})\r\n      this.setState({terzaCartaAvversario:cartaCoperta})\r\n\r\n      // Punteggio iniziale, 0 - 0 TODO: statico?\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n      }\r\n\r\n      this.setState({idPartita:JSON.stringify(partitaJSON.IdPartita)})\r\n    })\r\n  \r\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\r\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta) =>{ \r\n      window.alert(\"Risposta per carta giocata, esito \" + outcome + \" carta: \" + carta)\r\n      if (outcome){\r\n        // se esito positivo alla richiesta di giocare una carta\r\n        switch (carta) {\r\n          case this.state.primaCartaMia:\r\n            this.setState({primaCartaMia:\"EMPTY\"})     // Ovviamente allo svuotamento corrisponder√† una \"azione grafica\" associata\r\n            this.setState({immPrimaCartaMia : \"\"})\r\n            break;\r\n          case this.state.secondaCartaMia:\r\n            this.setState({secondaCartaMia:\"EMPTY\"})\r\n            this.setState({immSecondaCartaMia : \"\"})\r\n            break;\r\n          case this.state.terzaCartaMia:\r\n            this.setState({terzaCartaMia:\"EMPTY\"})\r\n            this.setState({immTerzaCartaMia : \"\"})\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }else{\r\n        window.alert(\"Non puoi giocare la carta\")\r\n      }\r\n    })\r\n\r\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\r\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", () => {\r\n      // si pu√≤ rimuovere graficamente carta a caso per√≤ VA VISUALIZZATA IN TAVOLA\r\n\r\n      window.alert(\"L'avversario ha giocato una carta in tavola\")\r\n      switch (this.randomNumberInRange(1,3)) {\r\n        case 1:\r\n          this.setState({primaCartaAvversario:\"EMPTY\"})\r\n          break;\r\n        case 2:\r\n          this.setState({secondaCartaAvversario:\"EMPTY\"})\r\n          break;\r\n        case 3:\r\n          this.setState({terzaCartaAvversario:\"EMPTY\"})\r\n          break;\r\n        default:\r\n          window.alert(\"Carta giocata avversario, case default\")\r\n          break;\r\n      }\r\n    })\r\n\r\n\r\n    socket.on(\"fineMano\", () => {\r\n      // Aggiornamento punteggio\r\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\r\n    })\r\n\r\n    socket.on(\"avversarioDisconnesso\", () => {\r\n      window.alert(\"L'avversario si √® disconnesso\")\r\n    })\r\n  }\r\n\r\n\r\n  randomNumberInRange(min, max) {\r\n    // üëáÔ∏è get number between min (inclusive) and max (inclusive)\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  \r\n  \r\n  render() { \r\n    return (\r\n      <>\r\n      <Navbar>ehi</Navbar>\r\n      <div className=\"container text-center\">   \r\n          \r\n      <div className=\"row\">\r\n        <div className=\"col-sm\" id=\"SecondPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img src={this.state.primaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img src={this.state.secondaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img src={this.state.terzaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerPoints\" onClick={this.handleClick}>\r\n          <div>{this.state.punteggioAvversario}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\">Mazzo</div>        \r\n        <div className=\"col-sm\">Carta giocata 1</div>\r\n        <div className=\"col-sm\">Carta giocata 2</div>\r\n      </div>\r\n      <div className=\"row BottomDiv\">\r\n        <div className=\"col-sm\" id=\"FirstPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img src={this.state.immPrimaCartaMia} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img src={this.state.immSecondaCartaMia} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img src={this.state.immTerzaCartaMia} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerPoints\" onClick={this.handleClick}>\r\n          <div>{this.state.punteggioMio}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\n"],"mappings":";AAAA,SAAQA,KAAK,EAAEC,SAAS,QAAO,OAAO;AACtC,SAAQC,MAAM,QAAO,aAAa;AAClC,OAAO,kCAAkC;AACzC,SAAQC,MAAM,QAAO,gBAAgB;AACrC;AAAA;AAAA;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAGnD,OAAO,MAAMC,SAAS,SAASL,SAAS,CAAC;EAAA;IAAA;IAAA,KAEvCM,KAAK,GAAG;MACNC,aAAa,EAAG,EAAE;MAClBC,eAAe,EAAG,EAAE;MACpBC,aAAa,EAAG,EAAE;MAClBC,gBAAgB,EAAG,EAAE;MACrBC,kBAAkB,EAAG,EAAE;MACvBC,gBAAgB,EAAG,EAAE;MACrBC,oBAAoB,EAAG,EAAE;MACzBC,sBAAsB,EAAG,EAAE;MAC3BC,oBAAoB,EAAG,EAAE;MACzBC,YAAY,EAAG,CAAC;MAChBC,mBAAmB,EAAG,CAAC;MAAW;MAClCC,SAAS,EAAG;IACd,CAAC;IAAA,KAGDC,WAAW,GAAGC,KAAK,IAAI;MAAO;MAC5B,IAAIC,EAAE,GAAGD,KAAK,CAACE,aAAa,CAACD,EAAE,EAAK;MACpCE,MAAM,CAACC,KAAK,CAACH,EAAE,CAAC;MAEhB,IAAInB,MAAM,CAACuB,SAAS,EAAC;QAAK;QACxB,QAAQJ,EAAE;UACR,KAAK,sBAAsB;YACzBnB,MAAM,CAACwB,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAACpB,KAAK,CAACY,SAAS,EAAE,IAAI,CAACZ,KAAK,CAACC,aAAa,CAAC;YAC9E;UACF,KAAK,uBAAuB;YAC1BL,MAAM,CAACwB,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAACpB,KAAK,CAACY,SAAS,EAAE,IAAI,CAACZ,KAAK,CAACE,eAAe,CAAC;YAChF;UACF,KAAK,sBAAsB;YACzBN,MAAM,CAACwB,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAACpB,KAAK,CAACY,SAAS,EAAE,IAAI,CAACZ,KAAK,CAACG,aAAa,CAAC;YAC9E;UACF,KAAK,OAAO;YACVP,MAAM,CAACwB,IAAI,CAAC,eAAe,CAAC;YAC5B;UACF;YACE;QAAM;MAMZ;IACF,CAAC;EAAA;EAED;EACA;EACAC,iBAAiB,GAAG;IAClBzB,MAAM,CAAC0B,GAAG,CAAC,iBAAiB,CAAC,CAACC,EAAE,CAAC,iBAAiB,EAAE,CAACC,OAAO,EAAEC,IAAI,KAAK;MACrER,MAAM,CAACC,KAAK,CAAC,2BAA2B,GAAEtB,MAAM,CAACmB,EAAE,CAAC;MACpD;MACA,IAAIW,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAACI,SAAS,CAACJ,IAAI,CAACK,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAc;MAC1E,IAAIC,WAAW,GAAGJ,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACK,SAAS,CAACL,OAAO,CAACM,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAK;;MAE1E;MACA,IAAI,CAACE,QAAQ,CAAC;QAAC/B,aAAa,EAAEyB,QAAQ,CAACO;MAAU,CAAC,CAAC;MACnD,IAAI,CAACD,QAAQ,CAAC;QAAC9B,eAAe,EAAEwB,QAAQ,CAACQ;MAAY,CAAC,CAAC;MACvD,IAAI,CAACF,QAAQ,CAAC;QAAC7B,aAAa,EAAEuB,QAAQ,CAACS;MAAK,CAAC,CAAC;MAC9C;MACA,MAAMC,aAAa,GAAGV,QAAQ,CAACO,UAAU,CAACI,SAAS,CAACR,SAAS,CAACH,QAAQ,CAACO,UAAU,CAACI,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAACZ,QAAQ,CAACO,UAAU,CAACI,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,CAAC;MAC9J,MAAMC,eAAe,GAAGb,QAAQ,CAACQ,YAAY,CAACG,SAAS,CAACR,SAAS,CAACH,QAAQ,CAACQ,YAAY,CAACG,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAACZ,QAAQ,CAACQ,YAAY,CAACG,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,CAAC;MACtK,MAAME,aAAa,GAAGd,QAAQ,CAACe,UAAU,CAACJ,SAAS,CAACR,SAAS,CAACH,QAAQ,CAACe,UAAU,CAACJ,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAACZ,QAAQ,CAACe,UAAU,CAACJ,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,CAAC;MAC9J;MACA,IAAI,CAACN,QAAQ,CAAC;QAAC5B,gBAAgB,EAACN,OAAO,CAAC,uBAAuB,GAAGsC,aAAa,GAAG,MAAM;MAAC,CAAC,CAAC;MAC3F,IAAI,CAACJ,QAAQ,CAAC;QAAC3B,kBAAkB,EAACP,OAAO,CAAC,uBAAuB,GAAGyC,eAAe,GAAG,MAAM;MAAC,CAAC,CAAC;MAC/F,IAAI,CAACP,QAAQ,CAAC;QAAC1B,gBAAgB,EAACR,OAAO,CAAC,uBAAuB,GAAG0C,aAAa,GAAG,MAAM;MAAC,CAAC,CAAC;;MAI3F;MACA,IAAI,CAACR,QAAQ,CAAC;QAACzB,oBAAoB,EAACV;MAAY,CAAC,CAAC;MAClD,IAAI,CAACmC,QAAQ,CAAC;QAACxB,sBAAsB,EAACX;MAAY,CAAC,CAAC;MACpD,IAAI,CAACmC,QAAQ,CAAC;QAACvB,oBAAoB,EAACZ;MAAY,CAAC,CAAC;;MAElD;MACA,IAAID,MAAM,CAACmB,EAAE,KAAKgB,WAAW,CAACW,YAAY,EAAE;QAC1C,IAAI,CAACV,QAAQ,CAAC;UAACtB,YAAY,EAACiB,IAAI,CAACgB,SAAS,CAACZ,WAAW,CAACa,UAAU;QAAC,CAAC,CAAC;QACpE,IAAI,CAACZ,QAAQ,CAAC;UAACrB,mBAAmB,EAACgB,IAAI,CAACgB,SAAS,CAACZ,WAAW,CAACc,UAAU;QAAC,CAAC,CAAC;MAC7E,CAAC,MAAM;QACL;QACA,IAAI,CAACb,QAAQ,CAAC;UAACrB,mBAAmB,EAACgB,IAAI,CAACgB,SAAS,CAACZ,WAAW,CAACc,UAAU;QAAC,CAAC,CAAC;QAC3E,IAAI,CAACb,QAAQ,CAAC;UAACtB,YAAY,EAACiB,IAAI,CAACgB,SAAS,CAACZ,WAAW,CAACa,UAAU;QAAC,CAAC,CAAC;MACtE;MAEA,IAAI,CAACZ,QAAQ,CAAC;QAACpB,SAAS,EAACe,IAAI,CAACgB,SAAS,CAACZ,WAAW,CAACe,SAAS;MAAC,CAAC,CAAC;IAClE,CAAC,CAAC;;IAEF;IACAlD,MAAM,CAAC0B,GAAG,CAAC,iBAAiB,CAAC,CAACC,EAAE,CAAC,iBAAiB,EAAE,CAACwB,OAAO,EAAEC,KAAK,KAAI;MACrE/B,MAAM,CAACC,KAAK,CAAC,oCAAoC,GAAG6B,OAAO,GAAG,UAAU,GAAGC,KAAK,CAAC;MACjF,IAAID,OAAO,EAAC;QACV;QACA,QAAQC,KAAK;UACX,KAAK,IAAI,CAAChD,KAAK,CAACC,aAAa;YAC3B,IAAI,CAAC+B,QAAQ,CAAC;cAAC/B,aAAa,EAAC;YAAO,CAAC,CAAC,EAAK;YAC3C,IAAI,CAAC+B,QAAQ,CAAC;cAAC5B,gBAAgB,EAAG;YAAE,CAAC,CAAC;YACtC;UACF,KAAK,IAAI,CAACJ,KAAK,CAACE,eAAe;YAC7B,IAAI,CAAC8B,QAAQ,CAAC;cAAC9B,eAAe,EAAC;YAAO,CAAC,CAAC;YACxC,IAAI,CAAC8B,QAAQ,CAAC;cAAC3B,kBAAkB,EAAG;YAAE,CAAC,CAAC;YACxC;UACF,KAAK,IAAI,CAACL,KAAK,CAACG,aAAa;YAC3B,IAAI,CAAC6B,QAAQ,CAAC;cAAC7B,aAAa,EAAC;YAAO,CAAC,CAAC;YACtC,IAAI,CAAC6B,QAAQ,CAAC;cAAC1B,gBAAgB,EAAG;YAAE,CAAC,CAAC;YACtC;UACF;YACE;QAAM;MAEZ,CAAC,MAAI;QACHW,MAAM,CAACC,KAAK,CAAC,2BAA2B,CAAC;MAC3C;IACF,CAAC,CAAC;;IAEF;IACAtB,MAAM,CAAC0B,GAAG,CAAC,wBAAwB,CAAC,CAACC,EAAE,CAAC,wBAAwB,EAAE,MAAM;MACtE;;MAEAN,MAAM,CAACC,KAAK,CAAC,6CAA6C,CAAC;MAC3D,QAAQ,IAAI,CAAC+B,mBAAmB,CAAC,CAAC,EAAC,CAAC,CAAC;QACnC,KAAK,CAAC;UACJ,IAAI,CAACjB,QAAQ,CAAC;YAACzB,oBAAoB,EAAC;UAAO,CAAC,CAAC;UAC7C;QACF,KAAK,CAAC;UACJ,IAAI,CAACyB,QAAQ,CAAC;YAACxB,sBAAsB,EAAC;UAAO,CAAC,CAAC;UAC/C;QACF,KAAK,CAAC;UACJ,IAAI,CAACwB,QAAQ,CAAC;YAACvB,oBAAoB,EAAC;UAAO,CAAC,CAAC;UAC7C;QACF;UACEQ,MAAM,CAACC,KAAK,CAAC,wCAAwC,CAAC;UACtD;MAAM;IAEZ,CAAC,CAAC;IAGFtB,MAAM,CAAC2B,EAAE,CAAC,UAAU,EAAE,MAAM;MAC1B;MACA;IACF,CAAC,CAAC;IAEF3B,MAAM,CAAC2B,EAAE,CAAC,uBAAuB,EAAE,MAAM;MACvCN,MAAM,CAACC,KAAK,CAAC,+BAA+B,CAAC;IAC/C,CAAC,CAAC;EACJ;EAGA+B,mBAAmB,CAACC,GAAG,EAAEC,GAAG,EAAE;IAC5B;IACA,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIH,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;EAC1D;EAGAK,MAAM,GAAG;IACP,oBACE;MAAA,wBACA,QAAC,MAAM;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAa,eACpB;QAAK,SAAS,EAAC,uBAAuB;QAAA,wBAEtC;UAAK,SAAS,EAAC,KAAK;UAAA,wBAClB;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,uBAAuB;YAAC,OAAO,EAAE,IAAI,CAAC1C,WAAY;YAAA,uBAC3E;cAAK,GAAG,EAAE,IAAI,CAACb,KAAK,CAACO,oBAAqB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QACpD,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,wBAAwB;YAAC,OAAO,EAAE,IAAI,CAACM,WAAY;YAAA,uBAC5E;cAAK,GAAG,EAAE,IAAI,CAACb,KAAK,CAACQ,sBAAuB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QACtD,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,uBAAuB;YAAC,OAAO,EAAE,IAAI,CAACK,WAAY;YAAA,uBAC3E;cAAK,GAAG,EAAE,IAAI,CAACb,KAAK,CAACS,oBAAqB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QACpD,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,oBAAoB;YAAC,OAAO,EAAE,IAAI,CAACI,WAAY;YAAA,uBACxE;cAAA,UAAM,IAAI,CAACb,KAAK,CAACW;YAAmB;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QACvC;QAAA;UAAA;UAAA;UAAA;QAAA,QACF,eACN;UAAK,SAAS,EAAC,KAAK;UAAA,wBAClB;YAAK,SAAS,EAAC,QAAQ;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAY,eACnC;YAAK,SAAS,EAAC,QAAQ;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAsB,eAC7C;YAAK,SAAS,EAAC,QAAQ;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAsB;QAAA;UAAA;UAAA;UAAA;QAAA,QACzC,eACN;UAAK,SAAS,EAAC,eAAe;UAAA,wBAC5B;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,sBAAsB;YAAC,OAAO,EAAE,IAAI,CAACE,WAAY;YAAA,uBAC1E;cAAK,GAAG,EAAE,IAAI,CAACb,KAAK,CAACI,gBAAiB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAChD,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,uBAAuB;YAAC,OAAO,EAAE,IAAI,CAACS,WAAY;YAAA,uBAC3E;cAAK,GAAG,EAAE,IAAI,CAACb,KAAK,CAACK,kBAAmB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAClD,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,sBAAsB;YAAC,OAAO,EAAE,IAAI,CAACQ,WAAY;YAAA,uBAC1E;cAAK,GAAG,EAAE,IAAI,CAACb,KAAK,CAACM,gBAAiB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAChD,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,mBAAmB;YAAC,OAAO,EAAE,IAAI,CAACO,WAAY;YAAA,uBACvE;cAAA,UAAM,IAAI,CAACb,KAAK,CAACU;YAAY;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAChC;QAAA;UAAA;UAAA;UAAA;QAAA,QACF;MAAA;QAAA;QAAA;QAAA;MAAA,QACF;IAAA,gBACH;EAEL;AACF"},"metadata":{},"sourceType":"module"}