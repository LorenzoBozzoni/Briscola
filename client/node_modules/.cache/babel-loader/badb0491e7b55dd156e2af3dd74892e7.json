{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lele\\\\Desktop\\\\Briscola\\\\Briscola\\\\client\\\\src\\\\components\\\\GameField.js\";\nimport { React, Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { socket } from \"./LoginPage.js\";\nimport { notify } from '../App.js';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { MinimalSpinner } from 'loading-animations-react';\nimport { ReactSession } from 'react-client-session';\nimport \"./GameField.css\";\n//import { GameField } from './GameField';\n\n// Immagine retro della carta \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cartaCoperta = require('../Images/RetroGrande.jpg');\nexport class GameField extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      primaCartaMia: \"\",\n      secondaCartaMia: \"\",\n      terzaCartaMia: \"\",\n      immPrimaCartaMia: \"\",\n      immSecondaCartaMia: \"\",\n      immTerzaCartaMia: \"\",\n      primaCartaAvversario: \"\",\n      secondaCartaAvversario: \"\",\n      terzaCartaAvversario: \"\",\n      primaCartaTavola: \"\",\n      secondaCartaTavola: \"\",\n      immBriscolaEstratta: \"\",\n      briscolaEstratta: \"\",\n      punteggioMio: 0,\n      punteggioAvversario: 0,\n      idPartita: 0,\n      visibilityMazzo: \"hidden\",\n      visibilityField: \"hidden\",\n      //visibilityEsito: \"hidden\",\n      esitoPartita: \"\"\n    };\n    this.handleClick = event => {\n      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\n      var id = event.currentTarget.id; // Elemento sul quale è stato fatto il click\n      //window.alert(id);\n      console.log(this.state.carteGiocate);\n      if (this.state.secondaCartaTavola === \"\") {\n        if (socket.connected) {\n          // verifichiamo di essere connessi prima di inviare il click\n          switch (id) {\n            case \"FirstPlayerFirstCard\":\n              {\n                socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia);\n                break;\n              }\n            case \"FirstPlayerSecondCard\":\n              {\n                socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia);\n                break;\n              }\n            case \"FirstPlayerThirdCard\":\n              {\n                socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia);\n                break;\n              }\n            default:\n              break;\n          }\n        }\n      }\n    };\n  }\n  componentDidMount() {\n    const username = ReactSession.get(\"User\");\n    if (username === undefined) {\n      notify(\"non hai fatto il login\");\n      document.location.href = \"/\";\n    }\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano, briscolaEstrattaParam) => {\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\"))); // , mano.lastIndexOf(\"}\")\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\"))); // , partita.lastIndexOf(\"}\")\n\n      // Rendiamo il campo visibile\n      this.setState({\n        visibilityField: \"visible\",\n        visibilityMazzo: \"visible\"\n      });\n\n      // Settiamo la mano iniziale\n      this.setState({\n        primaCartaMia: JSON.stringify(manoJSON.PrimaCarta)\n      });\n      this.setState({\n        secondaCartaMia: JSON.stringify(manoJSON.SecondaCarta)\n      });\n      this.setState({\n        terzaCartaMia: JSON.stringify(manoJSON.TerzaCarta)\n      });\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"));\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"));\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"));\n      // Non si può fare require(manoJSON.PrimaCarta.ImagePath)\n      this.setState({\n        immPrimaCartaMia: require(\"../Images/Napoletane/\" + percorsoPrima + \".jpg\")\n      });\n      this.setState({\n        immSecondaCartaMia: require(\"../Images/Napoletane/\" + percorsoSeconda + \".jpg\")\n      });\n      this.setState({\n        immTerzaCartaMia: require(\"../Images/Napoletane/\" + percorsoTerza + \".jpg\")\n      });\n\n      // Carte avversario\n      this.setState({\n        primaCartaAvversario: cartaCoperta\n      });\n      this.setState({\n        secondaCartaAvversario: cartaCoperta\n      });\n      this.setState({\n        terzaCartaAvversario: cartaCoperta\n      });\n\n      // Punteggio iniziale, 0 - 0 TODO: statico?\n      if (socket.id === partitaJSON.IdGiocatore1) {\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n      } else {\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n      }\n      this.setState({\n        idPartita: JSON.stringify(partitaJSON.IdPartita)\n      });\n      briscolaEstrattaParam = JSON.parse(briscolaEstrattaParam.substring(briscolaEstrattaParam.indexOf(\"{\")));\n      const cartaBriscolaEstratta = briscolaEstrattaParam.ImagePath.substring(briscolaEstrattaParam.ImagePath.lastIndexOf(\"/\") + 1, briscolaEstrattaParam.ImagePath.lastIndexOf(\".\"));\n      this.setState({\n        immBriscolaEstratta: require(\"../Images/Napoletane/\" + cartaBriscolaEstratta + \".jpg\")\n      });\n      this.setState({\n        briscolaEstratta: JSON.stringify(briscolaEstrattaParam)\n      });\n\n      // Evento che viene scatenato quando si preme il pulsante \"indietro\" del browser\n      window.addEventListener('popstate', event => {\n        if (this.state.idPartita !== 0) {\n          //notify(\"La partita verrà conclusa\")\n        }\n        socket.emit(\"AggiornaID\", username);\n        socket.emit(\"abbandonaPartita\");\n      });\n    });\n\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta, numeroInTavola) => {\n      if (outcome) {\n        // se esito positivo alla richiesta di giocare una carta\n        switch (carta) {\n          case this.state.primaCartaMia:\n            this.setState({\n              primaCartaMia: \"\",\n              immPrimaCartaMia: \"\"\n            }); // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\n            //this.setState({immPrimaCartaMia : \"\"})\n            break;\n          case this.state.secondaCartaMia:\n            this.setState({\n              secondaCartaMia: \"\",\n              immSecondaCartaMia: \"\"\n            });\n            //this.setState({immSecondaCartaMia : \"\"})\n            break;\n          case this.state.terzaCartaMia:\n            this.setState({\n              terzaCartaMia: \"\",\n              immTerzaCartaMia: \"\"\n            });\n            //this.setState({immTerzaCartaMia : \"\"})\n            break;\n          default:\n            break;\n        }\n        // Visualizzazione carta in tavola \n        var cartaJSON = JSON.parse(carta.substring(carta.indexOf(\"{\")));\n        const numeroCarta = cartaJSON.ImagePath.substring(cartaJSON.ImagePath.lastIndexOf(\"/\") + 1, cartaJSON.ImagePath.lastIndexOf(\".\"));\n        if (numeroInTavola === 1) {\n          this.setState({\n            primaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\")\n          });\n        } else {\n          this.setState({\n            secondaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\")\n          });\n        }\n      } else {\n        notify(\"Non puoi giocare la carta\");\n      }\n    });\n\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", (imagePath, numero) => {\n      var found = false;\n      while (!found) {\n        switch (this.randomNumberInRange(1, 3)) {\n          case 1:\n            if (this.state.primaCartaAvversario !== \"\") {\n              found = true;\n            }\n            this.setState({\n              primaCartaAvversario: \"\"\n            });\n            break;\n          case 2:\n            if (this.state.secondaCartaAvversario !== \"\") {\n              found = true;\n            }\n            this.setState({\n              secondaCartaAvversario: \"\"\n            });\n            break;\n          case 3:\n            if (this.state.terzaCartaAvversario !== \"\") {\n              found = true;\n            }\n            this.setState({\n              terzaCartaAvversario: \"\"\n            });\n            break;\n          default:\n            notify(\"Carta giocata avversario, case default\");\n            break;\n        }\n      }\n\n      // visualizzazione in tavola della carta giocata\n      const numeroCarta = imagePath.substring(imagePath.lastIndexOf(\"/\") + 1, imagePath.lastIndexOf(\".\")); // TODO: funzione?\n      if (numero === 1) {\n        this.setState({\n          primaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\")\n        });\n      } else {\n        this.setState({\n          secondaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\")\n        });\n      }\n    });\n    socket.off(\"fineMano\").on(\"fineMano\", (partita, cartaPescata) => {\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")));\n      var cartaPescataJSON = JSON.parse(cartaPescata.substring(cartaPescata.indexOf(\"{\")));\n      // Aggiornamento punteggio\n      if (socket.id === partitaJSON.IdGiocatore1) {\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n      } else {\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio1)\n        });\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio2)\n        });\n      }\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\n      if (socket.id === partitaJSON.ChiInizia) {\n        notify(\"Tocca a me\");\n      }\n      if (partitaJSON.CarteRimanenti === 0) {\n        this.setState({\n          immBriscolaEstratta: \"\"\n        });\n        this.setState({\n          visibilityMazzo: \"hidden\"\n        });\n      } else if (partitaJSON.CarteRimanenti === 5) {\n        notify(\"Mancano 5 carte nel mazzo\");\n      }\n      this.setState({\n        primaCartaTavola: \"\",\n        secondaCartaTavola: \"\"\n      });\n      if (cartaPescata !== {}) {\n        // se non è vuota\n        // Rimuovere le carte in tavola e aggiungere quelle in mano\n        const numeroCarta = cartaPescataJSON.ImagePath.substring(cartaPescataJSON.ImagePath.lastIndexOf(\"/\") + 1, cartaPescataJSON.ImagePath.lastIndexOf(\".\"));\n\n        // Bisogna trovare quale carta è stata giocata per capire dove inserire quella appena pescata\n        if (this.state.primaCartaMia === \"\") {\n          this.setState({\n            immPrimaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\n            primaCartaMia: cartaPescata\n          });\n        } else if (this.state.secondaCartaMia === \"\") {\n          this.setState({\n            immSecondaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\n            secondaCartaMia: cartaPescata\n          });\n        } else if (this.state.terzaCartaMia === \"\") {\n          // TODO: convertire in else if?\n          this.setState({\n            immTerzaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\n            terzaCartaMia: cartaPescata\n          });\n        }\n        if (this.state.primaCartaAvversario === \"\") {\n          this.setState({\n            primaCartaAvversario: cartaCoperta\n          });\n        } else if (this.state.secondaCartaAvversario === \"\") {\n          this.setState({\n            secondaCartaAvversario: cartaCoperta\n          });\n        } else {\n          // TODO: convertire in else if?\n          this.setState({\n            terzaCartaAvversario: cartaCoperta\n          });\n        }\n      }\n    });\n    socket.off(\"richiestaAmicoRifiutata\", () => {\n      notify(\"Il tuo amico ha rifiutato la richiesta\");\n    });\n    socket.off(\"finePartita\").on(\"finePartita\", vincitore => {\n      // Rimuoviamo le ultime carte giocate dalla tavola\n      this.setState({\n        primaCartaTavola: \"\"\n      });\n      this.setState({\n        secondaCartaTavola: \"\"\n      });\n      notify(\"La partita è finita\");\n      notify(\"tipo vincitore\" + typeof vincitore);\n      notify(\"tipo socket.id\" + typeof socket.id);\n      if (socket.id === vincitore) {\n        notify(\"Hai vinto!\");\n        this.state.esitoPartita = \"VITTORIA!\";\n      } else {\n        notify(\"Hai perso!\");\n        this.state.esitoPartita = \"SCONFITTA...\";\n      }\n      window.PopStateEvent();\n    });\n    socket.off(\"disconnessioneAvversario\").on(\"disconnessioneAvversario\", () => {\n      notify(\"L'avversario si è disconnesso\");\n    });\n    socket.off(\"abbandonoAvversario\").on(\"abbandonoAvversario\", () => {\n      notify(\"L'avversario ha abbandonato la partita\");\n    });\n  }\n  randomNumberInRange(min, max) {\n    // 👇️ get number between min (inclusive) and max (inclusive)\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          \"height\": \"200px\",\n          \"width\": \"200px\",\n          \"position\": \"absolute\",\n          \"marginLeft\": \"45%\",\n          \"marginTop\": \"15%\",\n          \"visibility\": this.state.visibilityField === \"hidden\" ? \"visible\" : \"hidden\"\n        },\n        children: /*#__PURE__*/_jsxDEV(MinimalSpinner, {\n          color: \"green\",\n          text: \"Aspettando l'avversario...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BiggerContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container bg-success\",\n          style: {\n            visibility: this.state.visibilityField,\n            position: \"fixed\",\n            top: 0,\n            right: 0,\n            width: \"100vw\",\n            height: \"100vh\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"Celebration\",\n            className: \"h1 text-white\",\n            children: this.state.esitoPartita\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"SecondPlayerFirstCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4 game-card\",\n                src: this.state.primaCartaAvversario,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"SecondPlayerSecondCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4 game-card\",\n                src: this.state.secondaCartaAvversario,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"SecondPlayerThirdCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4 game-card\",\n                src: this.state.terzaCartaAvversario,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"SecondPlayerPoints\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"Punteggio rounded-5 text-light\",\n                children: this.state.punteggioAvversario\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4 game-card\",\n                src: cartaCoperta,\n                id: \"Mazzo\",\n                style: {\n                  float: \"left\",\n                  visibility: this.state.visibilityMazzo\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 39\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4 game-card\",\n                src: this.state.immBriscolaEstratta,\n                style: {\n                  float: \"left\",\n                  transform: \"rotate(90deg)\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 39\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4 game-card\",\n                src: this.state.primaCartaTavola,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 39\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4 game-card\",\n                src: this.state.secondaCartaTavola,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 39\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"FirstPlayerFirstCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4 game-card\",\n                src: this.state.immPrimaCartaMia,\n                alt: \"\",\n                style: {\n                  position: \"relative\",\n                  bottom: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"FirstPlayerSecondCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4 game-card\",\n                src: this.state.immSecondaCartaMia,\n                alt: \"\",\n                style: {\n                  position: \"relative\",\n                  bottom: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"FirstPlayerThirdCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4 game-card\",\n                src: this.state.immTerzaCartaMia,\n                alt: \"\",\n                style: {\n                  position: \"relative\",\n                  bottom: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"FirstPlayerPoints\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"Punteggio rounded-5 text-light\",\n                children: this.state.punteggioMio\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: \"0px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}","map":{"version":3,"names":["React","Component","socket","notify","ToastContainer","MinimalSpinner","ReactSession","cartaCoperta","require","GameField","state","primaCartaMia","secondaCartaMia","terzaCartaMia","immPrimaCartaMia","immSecondaCartaMia","immTerzaCartaMia","primaCartaAvversario","secondaCartaAvversario","terzaCartaAvversario","primaCartaTavola","secondaCartaTavola","immBriscolaEstratta","briscolaEstratta","punteggioMio","punteggioAvversario","idPartita","visibilityMazzo","visibilityField","esitoPartita","handleClick","event","id","currentTarget","console","log","carteGiocate","connected","emit","componentDidMount","username","get","undefined","document","location","href","off","on","partita","mano","briscolaEstrattaParam","manoJSON","JSON","parse","substring","indexOf","partitaJSON","setState","stringify","PrimaCarta","SecondaCarta","TerzaCarta","percorsoPrima","ImagePath","lastIndexOf","percorsoSeconda","percorsoTerza","IdGiocatore1","Punteggio1","Punteggio2","IdPartita","cartaBriscolaEstratta","window","addEventListener","outcome","carta","numeroInTavola","cartaJSON","numeroCarta","imagePath","numero","found","randomNumberInRange","cartaPescata","cartaPescataJSON","ChiInizia","CarteRimanenti","vincitore","PopStateEvent","min","max","Math","floor","random","render","visibility","position","top","right","width","height","float","transform","bottom"],"sources":["C:/Users/Lele/Desktop/Briscola/Briscola/client/src/components/GameField.js"],"sourcesContent":["import { React, Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { socket } from \"./LoginPage.js\"\r\nimport { notify } from '../App.js'\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { MinimalSpinner } from 'loading-animations-react';\r\nimport { ReactSession } from 'react-client-session';\r\nimport \"./GameField.css\"\r\n//import { GameField } from './GameField';\r\n\r\n// Immagine retro della carta \r\nconst cartaCoperta = require('../Images/RetroGrande.jpg');\r\n\r\n\r\nexport class GameField extends Component {\r\n  state = {\r\n    primaCartaMia: \"\",\r\n    secondaCartaMia: \"\",\r\n    terzaCartaMia: \"\",\r\n    immPrimaCartaMia: \"\",\r\n    immSecondaCartaMia: \"\",\r\n    immTerzaCartaMia: \"\",\r\n    primaCartaAvversario: \"\",\r\n    secondaCartaAvversario: \"\",\r\n    terzaCartaAvversario: \"\",\r\n    primaCartaTavola: \"\",\r\n    secondaCartaTavola: \"\",\r\n    immBriscolaEstratta: \"\",\r\n    briscolaEstratta: \"\",\r\n    punteggioMio: 0,\r\n    punteggioAvversario: 0,\r\n    idPartita: 0,\r\n    visibilityMazzo: \"hidden\",\r\n    visibilityField: \"hidden\",\r\n    //visibilityEsito: \"hidden\",\r\n    esitoPartita: \"\"\r\n  };\r\n\r\n\r\n\r\n\r\n  handleClick = event => {      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\r\n    var id = event.currentTarget.id     // Elemento sul quale è stato fatto il click\r\n    //window.alert(id);\r\n    console.log(this.state.carteGiocate)\r\n    if (this.state.secondaCartaTavola === \"\") {\r\n      if (socket.connected) {    // verifichiamo di essere connessi prima di inviare il click\r\n        switch (id) {\r\n          case \"FirstPlayerFirstCard\": {\r\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia)\r\n            break;\r\n          }\r\n          case \"FirstPlayerSecondCard\": {\r\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia)\r\n            break;\r\n          }\r\n          case \"FirstPlayerThirdCard\": {\r\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia)\r\n            break;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    const username = ReactSession.get(\"User\");\r\n    if (username === undefined) {\r\n      notify(\"non hai fatto il login\")\r\n      document.location.href = \"/\";\r\n    }\r\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano, briscolaEstrattaParam) => {\r\n\r\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \r\n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\")))              // , mano.lastIndexOf(\"}\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))     // , partita.lastIndexOf(\"}\")\r\n\r\n      // Rendiamo il campo visibile\r\n      this.setState({ visibilityField: \"visible\", visibilityMazzo: \"visible\" })\r\n\r\n\r\n      // Settiamo la mano iniziale\r\n      this.setState({ primaCartaMia: JSON.stringify(manoJSON.PrimaCarta) })\r\n      this.setState({ secondaCartaMia: JSON.stringify(manoJSON.SecondaCarta) })\r\n      this.setState({ terzaCartaMia: JSON.stringify(manoJSON.TerzaCarta) })\r\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\r\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"))\r\n      // Non si può fare require(manoJSON.PrimaCarta.ImagePath)\r\n      this.setState({ immPrimaCartaMia: require(\"../Images/Napoletane/\" + percorsoPrima + \".jpg\") })\r\n      this.setState({ immSecondaCartaMia: require(\"../Images/Napoletane/\" + percorsoSeconda + \".jpg\") })\r\n      this.setState({ immTerzaCartaMia: require(\"../Images/Napoletane/\" + percorsoTerza + \".jpg\") })\r\n\r\n      // Carte avversario\r\n      this.setState({ primaCartaAvversario: cartaCoperta })\r\n      this.setState({ secondaCartaAvversario: cartaCoperta })\r\n      this.setState({ terzaCartaAvversario: cartaCoperta })\r\n\r\n      // Punteggio iniziale, 0 - 0 TODO: statico?\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({ punteggioMio: JSON.stringify(partitaJSON.Punteggio1) })\r\n        this.setState({ punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2) })\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({ punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2) })\r\n        this.setState({ punteggioMio: JSON.stringify(partitaJSON.Punteggio1) })\r\n      }\r\n\r\n      this.setState({ idPartita: JSON.stringify(partitaJSON.IdPartita) })\r\n\r\n      briscolaEstrattaParam = JSON.parse(briscolaEstrattaParam.substring(briscolaEstrattaParam.indexOf(\"{\")))\r\n      const cartaBriscolaEstratta = briscolaEstrattaParam.ImagePath.substring(briscolaEstrattaParam.ImagePath.lastIndexOf(\"/\") + 1, briscolaEstrattaParam.ImagePath.lastIndexOf(\".\"))\r\n      this.setState({ immBriscolaEstratta: require(\"../Images/Napoletane/\" + cartaBriscolaEstratta + \".jpg\") })\r\n      this.setState({ briscolaEstratta: JSON.stringify(briscolaEstrattaParam) })\r\n\r\n\r\n      // Evento che viene scatenato quando si preme il pulsante \"indietro\" del browser\r\n      window.addEventListener('popstate', (event) => {\r\n        if (this.state.idPartita !== 0) {\r\n          //notify(\"La partita verrà conclusa\")\r\n        }\r\n        socket.emit(\"AggiornaID\", username)\r\n        socket.emit(\"abbandonaPartita\")\r\n      });\r\n    })\r\n\r\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\r\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta, numeroInTavola) => {\r\n      if (outcome) {\r\n        // se esito positivo alla richiesta di giocare una carta\r\n        switch (carta) {\r\n          case this.state.primaCartaMia:\r\n            this.setState({ primaCartaMia: \"\", immPrimaCartaMia: \"\" })     // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\r\n            //this.setState({immPrimaCartaMia : \"\"})\r\n            break;\r\n          case this.state.secondaCartaMia:\r\n            this.setState({ secondaCartaMia: \"\", immSecondaCartaMia: \"\" })\r\n            //this.setState({immSecondaCartaMia : \"\"})\r\n            break;\r\n          case this.state.terzaCartaMia:\r\n            this.setState({ terzaCartaMia: \"\", immTerzaCartaMia: \"\" })\r\n            //this.setState({immTerzaCartaMia : \"\"})\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        // Visualizzazione carta in tavola \r\n        var cartaJSON = JSON.parse(carta.substring(carta.indexOf(\"{\")))\r\n        const numeroCarta = cartaJSON.ImagePath.substring(cartaJSON.ImagePath.lastIndexOf(\"/\") + 1, cartaJSON.ImagePath.lastIndexOf(\".\"))\r\n        if (numeroInTavola === 1) {\r\n          this.setState({ primaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\") })\r\n        } else {\r\n          this.setState({ secondaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\") })\r\n        }\r\n\r\n      } else {\r\n        notify(\"Non puoi giocare la carta\")\r\n      }\r\n\r\n    })\r\n\r\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\r\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", (imagePath, numero) => {\r\n      var found = false\r\n\r\n      while (!found) {\r\n        switch (this.randomNumberInRange(1, 3)) {\r\n          case 1:\r\n            if (this.state.primaCartaAvversario !== \"\") {\r\n              found = true\r\n            }\r\n            this.setState({ primaCartaAvversario: \"\" })\r\n            break;\r\n          case 2:\r\n            if (this.state.secondaCartaAvversario !== \"\") {\r\n              found = true\r\n            }\r\n            this.setState({ secondaCartaAvversario: \"\" })\r\n            break;\r\n          case 3:\r\n            if (this.state.terzaCartaAvversario !== \"\") {\r\n              found = true\r\n            }\r\n            this.setState({ terzaCartaAvversario: \"\" })\r\n            break;\r\n          default:\r\n            notify(\"Carta giocata avversario, case default\")\r\n            break;\r\n        }\r\n      }\r\n\r\n      // visualizzazione in tavola della carta giocata\r\n      const numeroCarta = imagePath.substring(imagePath.lastIndexOf(\"/\") + 1, imagePath.lastIndexOf(\".\"))        // TODO: funzione?\r\n      if (numero === 1) {\r\n        this.setState({ primaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\") })\r\n      } else {\r\n        this.setState({ secondaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\") })\r\n      }\r\n\r\n\r\n\r\n    })\r\n\r\n\r\n    socket.off(\"fineMano\").on(\"fineMano\", (partita, cartaPescata) => {\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))\r\n      var cartaPescataJSON = JSON.parse(cartaPescata.substring(cartaPescata.indexOf(\"{\")))\r\n      // Aggiornamento punteggio\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({ punteggioMio: JSON.stringify(partitaJSON.Punteggio1) })\r\n        this.setState({ punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2) })\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({ punteggioAvversario: JSON.stringify(partitaJSON.Punteggio1) })\r\n        this.setState({ punteggioMio: JSON.stringify(partitaJSON.Punteggio2) })\r\n      }\r\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\r\n      if (socket.id === partitaJSON.ChiInizia) {\r\n        notify(\"Tocca a me\")\r\n      }\r\n\r\n\r\n\r\n      if (partitaJSON.CarteRimanenti === 0) {\r\n        this.setState({ immBriscolaEstratta: \"\" })\r\n        this.setState({ visibilityMazzo: \"hidden\" })\r\n      } else if (partitaJSON.CarteRimanenti === 5) {\r\n        notify(\"Mancano 5 carte nel mazzo\")\r\n      }\r\n\r\n      this.setState({\r\n        primaCartaTavola: \"\",\r\n        secondaCartaTavola: \"\"\r\n      })\r\n\r\n\r\n      if (cartaPescata !== {}) {  // se non è vuota\r\n        // Rimuovere le carte in tavola e aggiungere quelle in mano\r\n        const numeroCarta = cartaPescataJSON.ImagePath.substring(cartaPescataJSON.ImagePath.lastIndexOf(\"/\") + 1, cartaPescataJSON.ImagePath.lastIndexOf(\".\"))\r\n\r\n        // Bisogna trovare quale carta è stata giocata per capire dove inserire quella appena pescata\r\n        if (this.state.primaCartaMia === \"\") {\r\n          this.setState({\r\n            immPrimaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\r\n            primaCartaMia: cartaPescata\r\n          })\r\n        } else if (this.state.secondaCartaMia === \"\") {\r\n          this.setState({\r\n            immSecondaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\r\n            secondaCartaMia: cartaPescata\r\n          })\r\n        } else if (this.state.terzaCartaMia === \"\") {      // TODO: convertire in else if?\r\n          this.setState({\r\n            immTerzaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\r\n            terzaCartaMia: cartaPescata\r\n          })\r\n        }\r\n\r\n        if (this.state.primaCartaAvversario === \"\") {\r\n          this.setState({\r\n            primaCartaAvversario: cartaCoperta\r\n          })\r\n        } else if (this.state.secondaCartaAvversario === \"\") {\r\n          this.setState({\r\n            secondaCartaAvversario: cartaCoperta\r\n          })\r\n        } else {      // TODO: convertire in else if?\r\n          this.setState({\r\n            terzaCartaAvversario: cartaCoperta\r\n          })\r\n        }\r\n      }\r\n\r\n    })\r\n\r\n    socket.off(\"richiestaAmicoRifiutata\", () => {\r\n      notify(\"Il tuo amico ha rifiutato la richiesta\")\r\n    })\r\n\r\n\r\n    socket.off(\"finePartita\").on(\"finePartita\", (vincitore) => {\r\n      // Rimuoviamo le ultime carte giocate dalla tavola\r\n      this.setState({ primaCartaTavola: \"\" })\r\n      this.setState({ secondaCartaTavola: \"\" })\r\n\r\n      notify(\"La partita è finita\")\r\n      notify(\"tipo vincitore\" + typeof (vincitore))\r\n      notify(\"tipo socket.id\" + typeof (socket.id))\r\n      if (socket.id === vincitore) {\r\n        notify(\"Hai vinto!\")\r\n        this.state.esitoPartita = \"VITTORIA!\"\r\n      } else {\r\n        notify(\"Hai perso!\")\r\n        this.state.esitoPartita = \"SCONFITTA...\"\r\n      }\r\n      window.PopStateEvent()\r\n    })\r\n\r\n    socket.off(\"disconnessioneAvversario\").on(\"disconnessioneAvversario\", () => {\r\n      notify(\"L'avversario si è disconnesso\")\r\n    })\r\n\r\n    socket.off(\"abbandonoAvversario\").on(\"abbandonoAvversario\", () => {\r\n      notify(\"L'avversario ha abbandonato la partita\")\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  randomNumberInRange(min, max) {\r\n    // 👇️ get number between min (inclusive) and max (inclusive)\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div style={{ \"height\": \"200px\", \"width\": \"200px\", \"position\": \"absolute\", \"marginLeft\": \"45%\", \"marginTop\": \"15%\", \"visibility\": (this.state.visibilityField === \"hidden\") ? \"visible\" : \"hidden\" }} >\r\n          <MinimalSpinner color=\"green\" text=\"Aspettando l'avversario...\" />\r\n        </div>\r\n        <div className=\"BiggerContainer\">\r\n          <div className=\"container bg-success\" style={{ visibility: this.state.visibilityField, position: \"fixed\", top: 0, right: 0, width: \"100vw\", height: \"100vh\" }}>\r\n            <div id='Celebration' className='h1 text-white'>{this.state.esitoPartita}</div>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm\" id=\"SecondPlayerFirstCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card\" src={this.state.primaCartaAvversario} alt=\"\"></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"SecondPlayerSecondCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card\" src={this.state.secondaCartaAvversario} alt=\"\"></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"SecondPlayerThirdCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card\" src={this.state.terzaCartaAvversario} alt=\"\"></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"SecondPlayerPoints\" onClick={this.handleClick}>\r\n                <div className=\"Punteggio rounded-5 text-light\">{this.state.punteggioAvversario}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm\"><img className=\"rounded-4 game-card\" src={cartaCoperta} id=\"Mazzo\" style={{ float: \"left\", visibility: this.state.visibilityMazzo }}></img></div>\r\n              <div className=\"col-sm\"><img className=\"rounded-4 game-card\" src={this.state.immBriscolaEstratta} style={{ float: \"left\", transform: \"rotate(90deg)\" }}></img></div>\r\n              <div className=\"col-sm\"><img className=\"rounded-4 game-card\" src={this.state.primaCartaTavola} alt=\"\"></img></div>\r\n              <div className=\"col-sm\"><img className=\"rounded-4 game-card\" src={this.state.secondaCartaTavola} alt=\"\"></img></div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm\" id=\"FirstPlayerFirstCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card\" src={this.state.immPrimaCartaMia} alt=\"\" style={{ position: \"relative\", bottom: 0 }}></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"FirstPlayerSecondCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card\" src={this.state.immSecondaCartaMia} alt=\"\" style={{ position: \"relative\", bottom: 0 }}></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"FirstPlayerThirdCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card\" src={this.state.immTerzaCartaMia} alt=\"\" style={{ position: \"relative\", bottom: 0 }}></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"FirstPlayerPoints\" onClick={this.handleClick}>\r\n                <div className=\"Punteggio rounded-5 text-light\">{this.state.punteggioMio}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div style={{ height: \"0px\" }}>\r\n            <ToastContainer />\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}