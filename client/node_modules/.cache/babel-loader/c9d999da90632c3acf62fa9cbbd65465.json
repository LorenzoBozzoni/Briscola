{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loreb\\\\Documents\\\\Unipr\\\\Terzo_anno\\\\Primo_semestre\\\\Tecnologie_internet\\\\Briscola\\\\client\\\\src\\\\components\\\\GameField.js\";\nimport { React, Component } from 'react';\nimport { Navbar } from './Navbar.js';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { socket } from \"./LoginPage.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cartaCoperta = require('../Images/Retro.jpg');\nexport class GameField extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      primaCarta: \"\",\n      secondaCarta: \"\",\n      terzaCarta: \"\",\n      punteggioMio: 0,\n      punteggioAvversario: 1,\n      // sbagliato apposta per vedere se setState corregge TODO: ripristinare a 0\n      idPartita: 0\n    };\n    this.handleClick = event => {\n      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\n      var id = event.currentTarget.id; // Elemento sul quale è stato fatto il click\n      window.alert(id);\n      if (socket.connected) {\n        // verifichiamo di essere connessi prima di inviare il click\n        switch (id) {\n          case \"FirstPlayerFirstCard\":\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, socket.id, this.state.primaCarta);\n            break;\n          case \"FirstPlayerSecondCard\":\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, socket.id, this.state.secondaCarta);\n            break;\n          case \"FirstPlayerThirdCard\":\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, socket.id, this.state.terzaCarta);\n            break;\n          case \"Mazzo\":\n            socket.emit(\"pescaDalMazzo\");\n            break;\n          default:\n            break;\n        }\n      }\n    };\n  }\n  //useEffect(){\n  //listener(){\n  componentDidMount() {\n    socket.on(\"partitaIniziata\", (partita, mano) => {\n      window.alert(\"PARTITA INIZIATA, MIOID: \" + socket.id);\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\"))); // , mano.lastIndexOf(\"}\")\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\"))); // , partita.lastIndexOf(\"}\")\n\n      console.log(\"cartaCoperta\", cartaCoperta);\n      console.log(\"primaCarta\", manoJSON.PrimaCarta.ImagePath);\n\n      // Settiamo la mano iniziale\n      this.setState({\n        primaCarta: JSON.stringify(manoJSON.PrimaCarta)\n      });\n      this.setState({\n        secondaCarta: JSON.stringify(manoJSON.SecondaCarta)\n      });\n      this.setState({\n        terzaCarta: JSON.stringify(manoJSON.TerzaCarta)\n      });\n      console.log(\"STATO\" + this.state);\n\n      // Punteggio iniziale, 0 - 0 TODO: statico?\n      if (socket.id === partitaJSON.IdGiocatore1) {\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.punteggio1)\n        });\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.punteggio2)\n        });\n      } else {\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.punteggio2)\n        });\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.punteggio1)\n        });\n      }\n      this.setState({\n        idPartita: JSON.stringify(partitaJSON.IdPartita)\n      });\n    });\n\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\n    socket.on(\"cartaGiocataRes\", (outcome, carta) => {\n      window.alert(\"Risposta per carta giocata, esito \" + outcome + \" carta: \" + carta);\n      if (outcome) {\n        // se esito positivo alla richiesta di giocare una carta\n        switch (carta) {\n          case this.state.primaCarta:\n            this.setState({\n              primaCarta: \"EMPTY\"\n            }); // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\n            break;\n          case this.state.secondaCarta:\n            this.setState({\n              secondaCarta: \"EMPTY\"\n            });\n            break;\n          case this.state.terzaCarta:\n            this.setState({\n              terzaCarta: \"EMPTY\"\n            });\n            break;\n          default:\n            break;\n        }\n      } else {\n        window.alert(\"Non puoi giocare la carta\");\n      }\n    });\n    socket.on(\"cartaGiocataAvversario\", () => {\n      this.setState;\n    });\n    socket.on(\"fineMano\", () => {\n      // Aggiornamento punteggio\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\n    });\n    socket.on(\"avversarioDisconnesso\", () => {\n      window.alert(\"L'avversario si è disconnesso\");\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        children: \"ehi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            id: \"SecondPlayerFirstCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: cartaCoperta,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            id: \"SecondPlayerSecondCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: cartaCoperta,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            id: \"SecondPlayerThirdCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: cartaCoperta,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            id: \"SecondPlayerPoints\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.punteggioAvversario\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-4\",\n            children: \"col-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-8\",\n            children: \"col-8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            id: \"FirstPlayerFirstCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.primaCarta\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            id: \"FirstPlayerSecondCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.secondaCarta\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            id: \"FirstPlayerThirdCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.terzaCarta\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            id: \"FirstPlayerPoints\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.punteggioMio\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n}\n\n/**\r\nfunction cartaGiocata(id){\r\n  window.alert(id);\r\n  if (socket.connected){    // verifichiamo di essere connessi prima di inviare il click\r\n    socket.emit(\"cartaGiocata\", )\r\n  }\r\n}\r\n\r\n\r\nPER LA VISUALIZZAZIONE DELLE CARTE PROPRIE, NON FUNZIONA BTW\r\n      <div className=\"row\">\r\n        <div className=\"col\" id=\"SecondPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img src={this.state.primaCarta} alt=\"\"></img> \r\n        </div>\r\n        <div className=\"col\" id=\"SecondPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img src={this.state.secondaCarta} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col\" id=\"SecondPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img src={this.state.terzaCarta} alt=\"\"></img>\r\n        </div>\r\n      </div>\r\n */","map":{"version":3,"names":["React","Component","Navbar","socket","cartaCoperta","require","GameField","state","primaCarta","secondaCarta","terzaCarta","punteggioMio","punteggioAvversario","idPartita","handleClick","event","id","currentTarget","window","alert","connected","emit","componentDidMount","on","partita","mano","manoJSON","JSON","parse","substring","indexOf","partitaJSON","console","log","PrimaCarta","ImagePath","setState","stringify","SecondaCarta","TerzaCarta","IdGiocatore1","punteggio1","punteggio2","IdPartita","outcome","carta","render"],"sources":["C:/Users/loreb/Documents/Unipr/Terzo_anno/Primo_semestre/Tecnologie_internet/Briscola/client/src/components/GameField.js"],"sourcesContent":["import {React, Component} from 'react'\r\nimport {Navbar} from './Navbar.js'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {socket} from \"./LoginPage.js\"\r\n\r\nconst cartaCoperta = require('../Images/Retro.jpg');\r\n\r\n\r\nexport class GameField extends Component {\r\n  \r\n  state = {\r\n    primaCarta : \"\",\r\n    secondaCarta : \"\",\r\n    terzaCarta : \"\",\r\n    punteggioMio : 0,\r\n    punteggioAvversario : 1,          // sbagliato apposta per vedere se setState corregge TODO: ripristinare a 0\r\n    idPartita : 0\r\n  };\r\n    \r\n  \r\n  handleClick = event => {      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\r\n    var id = event.currentTarget.id     // Elemento sul quale è stato fatto il click\r\n    window.alert(id);\r\n    \r\n    if (socket.connected){    // verifichiamo di essere connessi prima di inviare il click\r\n      switch (id) {\r\n        case \"FirstPlayerFirstCard\":\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, socket.id, this.state.primaCarta)       \r\n          break;\r\n        case \"FirstPlayerSecondCard\":\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, socket.id, this.state.secondaCarta)\r\n          break;\r\n        case \"FirstPlayerThirdCard\":\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, socket.id, this.state.terzaCarta)\r\n          break;\r\n        case \"Mazzo\":\r\n          socket.emit(\"pescaDalMazzo\")\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n\r\n      \r\n\r\n    }\r\n  };\r\n\r\n  //useEffect(){\r\n  //listener(){\r\n  componentDidMount() {\r\n    socket.on(\"partitaIniziata\", (partita, mano) => {\r\n      window.alert(\"PARTITA INIZIATA, MIOID: \"+ socket.id)\r\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \r\n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\")))              // , mano.lastIndexOf(\"}\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))     // , partita.lastIndexOf(\"}\")\r\n\r\n      console.log(\"cartaCoperta\", cartaCoperta)\r\n      console.log(\"primaCarta\",manoJSON.PrimaCarta.ImagePath)\r\n\r\n      // Settiamo la mano iniziale\r\n      this.setState({primaCarta:JSON.stringify(manoJSON.PrimaCarta)})\r\n      this.setState({secondaCarta:JSON.stringify(manoJSON.SecondaCarta)})\r\n      this.setState({terzaCarta:JSON.stringify(manoJSON.TerzaCarta)})\r\n      console.log(\"STATO\" + this.state)\r\n\r\n      // Punteggio iniziale, 0 - 0 TODO: statico?\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.punteggio1)})\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.punteggio2)})\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.punteggio2)})\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.punteggio1)})\r\n      }\r\n\r\n\r\n      this.setState({idPartita:JSON.stringify(partitaJSON.IdPartita)})\r\n    })\r\n  \r\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\r\n    socket.on(\"cartaGiocataRes\", (outcome, carta) =>{ \r\n      window.alert(\"Risposta per carta giocata, esito \" + outcome + \" carta: \" + carta)\r\n      if (outcome){\r\n        // se esito positivo alla richiesta di giocare una carta\r\n        switch (carta) {\r\n          case this.state.primaCarta:\r\n            this.setState({primaCarta:\"EMPTY\"})     // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\r\n            break;\r\n          case this.state.secondaCarta:\r\n            this.setState({secondaCarta:\"EMPTY\"})\r\n            break;\r\n          case this.state.terzaCarta:\r\n            this.setState({terzaCarta:\"EMPTY\"})\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }else{\r\n        window.alert(\"Non puoi giocare la carta\")\r\n      }\r\n    })\r\n\r\n    socket.on(\"cartaGiocataAvversario\", () => {\r\n      this.setState\r\n    })\r\n\r\n\r\n    socket.on(\"fineMano\", () => {\r\n      // Aggiornamento punteggio\r\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\r\n    })\r\n\r\n    socket.on(\"avversarioDisconnesso\", () => {\r\n      window.alert(\"L'avversario si è disconnesso\")\r\n    })\r\n  }\r\n\r\n\r\n  \r\n  \r\n\r\n  render() { \r\n    return (\r\n      <>\r\n      <Navbar>ehi</Navbar>\r\n      <div className=\"container text-center\">\r\n          \r\n      <div className=\"row\">\r\n        <div className=\"col\" id=\"SecondPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img src={cartaCoperta} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col\" id=\"SecondPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img src={cartaCoperta} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col\" id=\"SecondPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img src={cartaCoperta} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col\" id=\"SecondPlayerPoints\" onClick={this.handleClick}>\r\n          <div>{this.state.punteggioAvversario}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-4\">col-4</div>        \r\n        <div className=\"col-8\">col-8</div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\" id=\"FirstPlayerFirstCard\" onClick={this.handleClick}>\r\n          <div>{this.state.primaCarta}</div> \r\n        </div>\r\n        <div className=\"col\" id=\"FirstPlayerSecondCard\" onClick={this.handleClick}>\r\n          <div>{this.state.secondaCarta}</div>\r\n        </div>\r\n        <div className=\"col\" id=\"FirstPlayerThirdCard\" onClick={this.handleClick}>\r\n          <div>{this.state.terzaCarta}</div>\r\n        </div>\r\n        <div className=\"col\" id=\"FirstPlayerPoints\" onClick={this.handleClick}>\r\n          <div>{this.state.punteggioMio}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\nfunction cartaGiocata(id){\r\n  window.alert(id);\r\n  if (socket.connected){    // verifichiamo di essere connessi prima di inviare il click\r\n    socket.emit(\"cartaGiocata\", )\r\n  }\r\n}\r\n\r\n\r\nPER LA VISUALIZZAZIONE DELLE CARTE PROPRIE, NON FUNZIONA BTW\r\n      <div className=\"row\">\r\n        <div className=\"col\" id=\"SecondPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img src={this.state.primaCarta} alt=\"\"></img> \r\n        </div>\r\n        <div className=\"col\" id=\"SecondPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img src={this.state.secondaCarta} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col\" id=\"SecondPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img src={this.state.terzaCarta} alt=\"\"></img>\r\n        </div>\r\n      </div>\r\n */\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}