{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loreb\\\\Documents\\\\Unipr\\\\Terzo_anno\\\\Primo_semestre\\\\Tecnologie_internet\\\\Briscola\\\\client\\\\src\\\\components\\\\GameField.js\";\nimport { React, Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { socket } from \"./LoginPage.js\";\nimport { notify } from '../App.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Dots, Waves, Spinner, TrinitySpinner, MinimalSpinner } from 'loading-animations-react';\nimport { ReactSession } from 'react-client-session';\n\n//import \"./GameField.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cartaCoperta = require('../Images/Retro.jpg');\nconst username = ReactSession.get(\"user\");\nexport class GameField extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      primaCartaMia: \"\",\n      secondaCartaMia: \"\",\n      terzaCartaMia: \"\",\n      immPrimaCartaMia: \"\",\n      immSecondaCartaMia: \"\",\n      immTerzaCartaMia: \"\",\n      primaCartaAvversario: \"\",\n      secondaCartaAvversario: \"\",\n      terzaCartaAvversario: \"\",\n      primaCartaTavola: \"\",\n      secondaCartaTavola: \"\",\n      immBriscolaEstratta: \"\",\n      briscolaEstratta: \"\",\n      punteggioMio: 0,\n      punteggioAvversario: 1,\n      // sbagliato apposta per vedere se setState corregge TODO: ripristinare a 0\n      idPartita: 0,\n      messaggioAlert: \"Ciao\",\n      visibilityMazzo: \"hidden\",\n      visibilityField: \"hidden\"\n    };\n    this.handleClick = event => {\n      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\n      var id = event.currentTarget.id; // Elemento sul quale è stato fatto il click\n      //window.alert(id);\n\n      if (socket.connected) {\n        // verifichiamo di essere connessi prima di inviare il click\n        switch (id) {\n          case \"FirstPlayerFirstCard\":\n            {\n              socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia);\n              break;\n            }\n          case \"FirstPlayerSecondCard\":\n            {\n              socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia);\n              break;\n            }\n          case \"FirstPlayerThirdCard\":\n            {\n              socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia);\n              break;\n            }\n          default:\n            break;\n        }\n        /*\r\n          case \"Mazzo\": {\r\n            if (this.state.primaCartaTavola === \"\" && this.state.secondaCartaTavola === \"\"){        // Si pesca dal mazzo solo quando non ci sono carte in tavola\r\n              socket.emit(\"pescaDalMazzoReq\", this.state.idPartita)\r\n            }\r\n            \r\n            break;\r\n          }\r\n        */\n      }\n    };\n  }\n\n  //useEffect(){\n  //listener(){\n  componentDidMount() {\n    if (username === undefined) {\n      notify(\"non hai fatto il login\");\n      document.location.href = \"/\";\n    }\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano, briscolaEstrattaParam) => {\n      notify(\"PARTITA INIZIATA, MIOID: \" + socket.id);\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\"))); // , mano.lastIndexOf(\"}\")\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\"))); // , partita.lastIndexOf(\"}\")\n\n      // Rendiamo il campo visibile\n      this.setState({\n        visibilityField: \"visible\",\n        visibilityMazzo: \"visible\"\n      });\n\n      // Settiamo la mano iniziale\n      this.setState({\n        primaCartaMia: JSON.stringify(manoJSON.PrimaCarta)\n      });\n      this.setState({\n        secondaCartaMia: JSON.stringify(manoJSON.SecondaCarta)\n      });\n      this.setState({\n        terzaCartaMia: JSON.stringify(manoJSON.TerzaCarta)\n      });\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"));\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"));\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"));\n      // Non si può fare require(manoJSON.PrimaCarta.ImagePath)\n      this.setState({\n        immPrimaCartaMia: require(\"../Images/Napoletane/\" + percorsoPrima + \".jpg\")\n      });\n      this.setState({\n        immSecondaCartaMia: require(\"../Images/Napoletane/\" + percorsoSeconda + \".jpg\")\n      });\n      this.setState({\n        immTerzaCartaMia: require(\"../Images/Napoletane/\" + percorsoTerza + \".jpg\")\n      });\n\n      // Carte avversario\n      this.setState({\n        primaCartaAvversario: cartaCoperta\n      });\n      this.setState({\n        secondaCartaAvversario: cartaCoperta\n      });\n      this.setState({\n        terzaCartaAvversario: cartaCoperta\n      });\n\n      // Punteggio iniziale, 0 - 0 TODO: statico?\n      if (socket.id === partitaJSON.IdGiocatore1) {\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n      } else {\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n      }\n      this.setState({\n        idPartita: JSON.stringify(partitaJSON.IdPartita)\n      });\n      briscolaEstrattaParam = JSON.parse(briscolaEstrattaParam.substring(briscolaEstrattaParam.indexOf(\"{\")));\n      const cartaBriscolaEstratta = briscolaEstrattaParam.ImagePath.substring(briscolaEstrattaParam.ImagePath.lastIndexOf(\"/\") + 1, briscolaEstrattaParam.ImagePath.lastIndexOf(\".\"));\n      this.setState({\n        immBriscolaEstratta: require(\"../Images/Napoletane/\" + cartaBriscolaEstratta + \".jpg\")\n      });\n      this.setState({\n        briscolaEstratta: JSON.stringify(briscolaEstrattaParam)\n      });\n\n      // Evento che viene scatenato quando si preme il pulsante \"indietro\" del browser\n      window.addEventListener('popstate', event => {\n        if (this.state.idPartita !== 0) {\n          notify(\"La partita verrà conclusa\");\n        }\n        socket.emit(\"AggiornaID\", username);\n        socket.emit(\"abbandonaPartita\");\n      });\n    });\n\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta, numeroInTavola) => {\n      //window.alert(\"Risposta per carta giocata, esito \" + outcome + \" carta: \" + carta)\n      if (outcome) {\n        // se esito positivo alla richiesta di giocare una carta\n        switch (carta) {\n          case this.state.primaCartaMia:\n            this.setState({\n              primaCartaMia: \"\"\n            }); // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\n            this.setState({\n              immPrimaCartaMia: \"\"\n            });\n            break;\n          case this.state.secondaCartaMia:\n            this.setState({\n              secondaCartaMia: \"\"\n            });\n            this.setState({\n              immSecondaCartaMia: \"\"\n            });\n            break;\n          case this.state.terzaCartaMia:\n            this.setState({\n              terzaCartaMia: \"\"\n            });\n            this.setState({\n              immTerzaCartaMia: \"\"\n            });\n            break;\n          default:\n            break;\n        }\n        // Visualizzazione carta in tavola \n        var cartaJSON = JSON.parse(carta.substring(carta.indexOf(\"{\")));\n        const numeroCarta = cartaJSON.ImagePath.substring(cartaJSON.ImagePath.lastIndexOf(\"/\") + 1, cartaJSON.ImagePath.lastIndexOf(\".\"));\n        if (numeroInTavola === 1) {\n          this.setState({\n            primaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\")\n          });\n        } else {\n          this.setState({\n            secondaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\")\n          });\n        }\n      } else {\n        notify(\"Non puoi giocare la carta\");\n      }\n    });\n\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", (imagePath, numero) => {\n      //notify(\"L'avversario ha giocato una carta in tavola\")\n      // si può rimuovere graficamente carta a caso \n      var found = false;\n      while (!found) {\n        switch (this.randomNumberInRange(1, 3)) {\n          case 1:\n            if (this.state.primaCartaAvversario !== \"\") {\n              found = true;\n            }\n            this.setState({\n              primaCartaAvversario: \"\"\n            });\n            break;\n          case 2:\n            if (this.state.secondaCartaAvversario !== \"\") {\n              found = true;\n            }\n            this.setState({\n              secondaCartaAvversario: \"\"\n            });\n            break;\n          case 3:\n            if (this.state.terzaCartaAvversario !== \"\") {\n              found = true;\n            }\n            this.setState({\n              terzaCartaAvversario: \"\"\n            });\n            break;\n          default:\n            notify(\"Carta giocata avversario, case default\");\n            break;\n        }\n      }\n\n      // visualizzazione in tavola della carta giocata\n      const numeroCarta = imagePath.substring(imagePath.lastIndexOf(\"/\") + 1, imagePath.lastIndexOf(\".\")); // TODO: funzione?\n      if (numero === 1) {\n        this.setState({\n          primaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\")\n        });\n      } else {\n        this.setState({\n          secondaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\")\n        });\n      }\n    });\n    socket.off(\"fineMano\").on(\"fineMano\", (partita, cartaPescata) => {\n      //notify(\"FINE MANO\")\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")));\n      var cartaPescataJSON = JSON.parse(cartaPescata.substring(cartaPescata.indexOf(\"{\")));\n      // Aggiornamento punteggio\n      if (socket.id === partitaJSON.IdGiocatore1) {\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n      } else {\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio1)\n        });\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio2)\n        });\n      }\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\n      if (socket.id === partitaJSON.ChiInizia) {\n        notify(\"Tocca a me\");\n      }\n      var str = \"Carte rimanenti \" + partitaJSON.CarteRimanenti + \" tipo: \" + typeof partitaJSON.CarteRimanenti;\n      notify(str);\n      if (partitaJSON.CarteRimanenti === 0) {\n        this.setState({\n          immBriscolaEstratta: \"\"\n        });\n        this.setState({\n          visibilityMazzo: \"hidden\"\n        });\n      }\n      this.setState({\n        primaCartaTavola: \"\",\n        secondaCartaTavola: \"\"\n      });\n      if (cartaPescata !== {}) {\n        // se non è vuota\n        // Rimuovere le carte in tavola e aggiungere quelle in mano\n        const numeroCarta = cartaPescataJSON.ImagePath.substring(cartaPescataJSON.ImagePath.lastIndexOf(\"/\") + 1, cartaPescataJSON.ImagePath.lastIndexOf(\".\"));\n\n        // Bisogna capire quale carta è stata giocata per capire dove inserire quella appena pescata\n        if (this.state.primaCartaMia === \"\") {\n          this.setState({\n            immPrimaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\n            primaCartaMia: cartaPescata\n          });\n        } else if (this.state.secondaCartaMia === \"\") {\n          this.setState({\n            immSecondaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\n            secondaCartaMia: cartaPescata\n          });\n        } else {\n          // TODO: convertire in else if?\n          this.setState({\n            immTerzaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\n            terzaCartaMia: cartaPescata\n          });\n        }\n        if (this.state.primaCartaAvversario === \"\") {\n          this.setState({\n            primaCartaAvversario: cartaCoperta\n          });\n        } else if (this.state.secondaCartaAvversario === \"\") {\n          this.setState({\n            secondaCartaAvversario: cartaCoperta\n          });\n        } else {\n          // TODO: convertire in else if?\n          this.setState({\n            terzaCartaAvversario: cartaCoperta\n          });\n        }\n      }\n    });\n    socket.off(\"richiestaAmicoRifiutata\", () => {\n      notify(\"Il tuo amico ha rifiutato la richiesta\");\n    });\n    socket.off(\"finePartita\").on(\"finePartita\", vincitore => {\n      // Rimuoviamo le ultime carte giocate dalla tavola\n      this.setState({\n        primaCartaTavola: \"\"\n      });\n      this.setState({\n        secondaCartaTavola: \"\"\n      });\n      notify(\"La partita è finita\");\n      notify(\"tipo vincitore\" + typeof vincitore);\n      notify(\"tipo socket.id\" + typeof socket.id)(socket.id === vincitore) ? notify(\"Hai vinto!\") : notify(\"Hai perso!\");\n      window.PopStateEvent();\n    });\n    socket.off(\"disconnessioneAvversario\").on(\"disconnessioneAvversario\", () => {\n      notify(\"L'avversario si è disconnesso\");\n    });\n    socket.off(\"abbandonoAvversario\").on(\"abbandonoAvversario\", () => {\n      notify(\"L'avversario ha abbandonato la partita\");\n    });\n  }\n  randomNumberInRange(min, max) {\n    // 👇️ get number between min (inclusive) and max (inclusive)\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          \"height\": \"30%\",\n          \"width\": \"30%\",\n          \"margin\": \"40%\",\n          \"visibility\": this.state.visibilityField === \"hidden\" ? \"visible\" : \"hidden\"\n        },\n        children: /*#__PURE__*/_jsxDEV(MinimalSpinner, {\n          color: \"green\",\n          text: \"Aspettando l'avversario casuale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BiggerContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container bg-success\",\n          style: {\n            visibility: this.state.visibilityField,\n            position: \"fixed\",\n            top: 0,\n            right: 0,\n            width: \"100vw\",\n            height: \"100vh\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"SecondPlayerFirstCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4\",\n                src: this.state.primaCartaAvversario,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"SecondPlayerSecondCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4\",\n                src: this.state.secondaCartaAvversario,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"SecondPlayerThirdCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4\",\n                src: this.state.terzaCartaAvversario,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"SecondPlayerPoints\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"Punteggio rounded-5 bg-light\",\n                children: this.state.punteggioAvversario\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4\",\n                src: cartaCoperta,\n                id: \"Mazzo\",\n                style: {\n                  float: \"left\",\n                  visibility: this.state.visibilityMazzo\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4\",\n                src: this.state.immBriscolaEstratta,\n                style: {\n                  float: \"left\",\n                  transform: \"rotate(90deg)\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4\",\n                src: this.state.primaCartaTavola,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4\",\n                src: this.state.secondaCartaTavola,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"FirstPlayerFirstCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4\",\n                src: this.state.immPrimaCartaMia,\n                alt: \"\",\n                style: {\n                  position: \"relative\",\n                  bottom: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"FirstPlayerSecondCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4\",\n                src: this.state.immSecondaCartaMia,\n                alt: \"\",\n                style: {\n                  position: \"relative\",\n                  bottom: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"FirstPlayerThirdCard\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"rounded-4\",\n                src: this.state.immTerzaCartaMia,\n                alt: \"\",\n                style: {\n                  position: \"relative\",\n                  bottom: 0\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              id: \"FirstPlayerPoints\",\n              onClick: this.handleClick,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"Punteggio rounded-5 bg-light\",\n                children: this.state.punteggioMio\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: \"0px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n}","map":{"version":3,"names":["React","Component","socket","notify","ToastContainer","toast","Dots","Waves","Spinner","TrinitySpinner","MinimalSpinner","ReactSession","cartaCoperta","require","username","get","GameField","state","primaCartaMia","secondaCartaMia","terzaCartaMia","immPrimaCartaMia","immSecondaCartaMia","immTerzaCartaMia","primaCartaAvversario","secondaCartaAvversario","terzaCartaAvversario","primaCartaTavola","secondaCartaTavola","immBriscolaEstratta","briscolaEstratta","punteggioMio","punteggioAvversario","idPartita","messaggioAlert","visibilityMazzo","visibilityField","handleClick","event","id","currentTarget","connected","emit","componentDidMount","undefined","document","location","href","off","on","partita","mano","briscolaEstrattaParam","manoJSON","JSON","parse","substring","indexOf","partitaJSON","setState","stringify","PrimaCarta","SecondaCarta","TerzaCarta","percorsoPrima","ImagePath","lastIndexOf","percorsoSeconda","percorsoTerza","IdGiocatore1","Punteggio1","Punteggio2","IdPartita","cartaBriscolaEstratta","window","addEventListener","outcome","carta","numeroInTavola","cartaJSON","numeroCarta","imagePath","numero","found","randomNumberInRange","cartaPescata","cartaPescataJSON","ChiInizia","str","CarteRimanenti","vincitore","PopStateEvent","min","max","Math","floor","random","render","visibility","position","top","right","width","height","float","transform","bottom"],"sources":["C:/Users/loreb/Documents/Unipr/Terzo_anno/Primo_semestre/Tecnologie_internet/Briscola/client/src/components/GameField.js"],"sourcesContent":["import {React, Component} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {socket} from \"./LoginPage.js\"\r\nimport { notify } from '../App.js'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Dots, Waves, Spinner, TrinitySpinner, MinimalSpinner } from 'loading-animations-react';\r\nimport { ReactSession } from 'react-client-session';\r\n\r\n//import \"./GameField.css\";\r\n\r\nconst cartaCoperta = require('../Images/Retro.jpg');\r\nconst username = ReactSession.get(\"user\");\r\n\r\n\r\nexport class GameField extends Component {\r\n  state = {\r\n    primaCartaMia : \"\",\r\n    secondaCartaMia : \"\",\r\n    terzaCartaMia : \"\",\r\n    immPrimaCartaMia : \"\",\r\n    immSecondaCartaMia : \"\",\r\n    immTerzaCartaMia : \"\",\r\n    primaCartaAvversario : \"\",\r\n    secondaCartaAvversario : \"\",\r\n    terzaCartaAvversario : \"\",\r\n    primaCartaTavola : \"\",\r\n    secondaCartaTavola : \"\",\r\n    immBriscolaEstratta : \"\",\r\n    briscolaEstratta: \"\",\r\n    punteggioMio : 0,\r\n    punteggioAvversario : 1,          // sbagliato apposta per vedere se setState corregge TODO: ripristinare a 0\r\n    idPartita : 0,\r\n    messaggioAlert : \"Ciao\",\r\n    visibilityMazzo : \"hidden\",\r\n    visibilityField : \"hidden\"\r\n  };\r\n    \r\n  \r\n\r\n  \r\n  handleClick = event => {      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\r\n    var id = event.currentTarget.id     // Elemento sul quale è stato fatto il click\r\n    //window.alert(id);\r\n    \r\n    if (socket.connected){    // verifichiamo di essere connessi prima di inviare il click\r\n      switch (id) {\r\n        case \"FirstPlayerFirstCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia)       \r\n          break;\r\n        }\r\n        case \"FirstPlayerSecondCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia)\r\n          break;\r\n        }\r\n        case \"FirstPlayerThirdCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia)\r\n          break;\r\n        }\r\n        default:\r\n          break;\r\n      }\r\n      /*\r\n        case \"Mazzo\": {\r\n          if (this.state.primaCartaTavola === \"\" && this.state.secondaCartaTavola === \"\"){        // Si pesca dal mazzo solo quando non ci sono carte in tavola\r\n            socket.emit(\"pescaDalMazzoReq\", this.state.idPartita)\r\n          }\r\n          \r\n          break;\r\n        }\r\n      */\r\n    }\r\n  };\r\n\r\n  //useEffect(){\r\n  //listener(){\r\n  componentDidMount() {\r\n    if (username === undefined){\r\n      notify(\"non hai fatto il login\")\r\n      document.location.href = \"/\"; \r\n    }\r\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano, briscolaEstrattaParam) => {\r\n      notify(\"PARTITA INIZIATA, MIOID: \"+ socket.id)\r\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \r\n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\")))              // , mano.lastIndexOf(\"}\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))     // , partita.lastIndexOf(\"}\")\r\n\r\n      // Rendiamo il campo visibile\r\n      this.setState({visibilityField:\"visible\", visibilityMazzo: \"visible\"})\r\n\r\n\r\n      // Settiamo la mano iniziale\r\n      this.setState({primaCartaMia: JSON.stringify(manoJSON.PrimaCarta)})\r\n      this.setState({secondaCartaMia: JSON.stringify(manoJSON.SecondaCarta)})\r\n      this.setState({terzaCartaMia: JSON.stringify(manoJSON.TerzaCarta)})\r\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\r\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"))\r\n      // Non si può fare require(manoJSON.PrimaCarta.ImagePath)\r\n      this.setState({immPrimaCartaMia:require(\"../Images/Napoletane/\" + percorsoPrima + \".jpg\")})\r\n      this.setState({immSecondaCartaMia:require(\"../Images/Napoletane/\" + percorsoSeconda + \".jpg\")})\r\n      this.setState({immTerzaCartaMia:require(\"../Images/Napoletane/\" + percorsoTerza + \".jpg\")})\r\n\r\n      // Carte avversario\r\n      this.setState({primaCartaAvversario:cartaCoperta})\r\n      this.setState({secondaCartaAvversario:cartaCoperta})\r\n      this.setState({terzaCartaAvversario:cartaCoperta})\r\n\r\n      // Punteggio iniziale, 0 - 0 TODO: statico?\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n      }\r\n\r\n      this.setState({idPartita:JSON.stringify(partitaJSON.IdPartita)})\r\n\r\n      briscolaEstrattaParam = JSON.parse(briscolaEstrattaParam.substring(briscolaEstrattaParam.indexOf(\"{\")))\r\n      const cartaBriscolaEstratta = briscolaEstrattaParam.ImagePath.substring(briscolaEstrattaParam.ImagePath.lastIndexOf(\"/\")+1,briscolaEstrattaParam.ImagePath.lastIndexOf(\".\"))\r\n      this.setState({immBriscolaEstratta:require(\"../Images/Napoletane/\"+cartaBriscolaEstratta+\".jpg\")})\r\n      this.setState({briscolaEstratta:JSON.stringify(briscolaEstrattaParam)})\r\n\r\n\r\n      // Evento che viene scatenato quando si preme il pulsante \"indietro\" del browser\r\n      window.addEventListener('popstate', (event) => {\r\n        if (this.state.idPartita !== 0){\r\n          notify(\"La partita verrà conclusa\")\r\n        }\r\n        socket.emit(\"AggiornaID\", username)\r\n        socket.emit(\"abbandonaPartita\")\r\n      });\r\n    })\r\n  \r\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\r\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta, numeroInTavola) =>{ \r\n      //window.alert(\"Risposta per carta giocata, esito \" + outcome + \" carta: \" + carta)\r\n      if (outcome){\r\n        // se esito positivo alla richiesta di giocare una carta\r\n        switch (carta) {\r\n          case this.state.primaCartaMia:\r\n            this.setState({primaCartaMia:\"\"})     // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\r\n            this.setState({immPrimaCartaMia : \"\"})\r\n            break;\r\n          case this.state.secondaCartaMia:\r\n            this.setState({secondaCartaMia:\"\"})\r\n            this.setState({immSecondaCartaMia : \"\"})\r\n            break;\r\n          case this.state.terzaCartaMia:\r\n            this.setState({terzaCartaMia:\"\"})\r\n            this.setState({immTerzaCartaMia : \"\"})\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        // Visualizzazione carta in tavola \r\n        var cartaJSON = JSON.parse(carta.substring(carta.indexOf(\"{\")))\r\n        const numeroCarta = cartaJSON.ImagePath.substring(cartaJSON.ImagePath.lastIndexOf(\"/\")+1,cartaJSON.ImagePath.lastIndexOf(\".\"))        \r\n        if (numeroInTavola === 1) {\r\n          this.setState({primaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n        } else {\r\n          this.setState({secondaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n        }\r\n      \r\n      }else{\r\n        notify(\"Non puoi giocare la carta\")\r\n      }\r\n\r\n    })\r\n\r\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\r\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", (imagePath, numero) => {\r\n      //notify(\"L'avversario ha giocato una carta in tavola\")\r\n      // si può rimuovere graficamente carta a caso \r\n      var found = false\r\n\r\n      while(!found){\r\n        switch (this.randomNumberInRange(1,3)) {\r\n          case 1:\r\n            if (this.state.primaCartaAvversario !== \"\"){\r\n              found = true\r\n            }\r\n            this.setState({primaCartaAvversario:\"\"})\r\n            break;\r\n          case 2:\r\n            if (this.state.secondaCartaAvversario !== \"\"){\r\n              found = true\r\n            }\r\n            this.setState({secondaCartaAvversario:\"\"})\r\n            break;\r\n          case 3:\r\n            if (this.state.terzaCartaAvversario !== \"\"){\r\n              found = true\r\n            }\r\n            this.setState({terzaCartaAvversario:\"\"})\r\n            break;\r\n          default:\r\n            notify(\"Carta giocata avversario, case default\")\r\n            break;\r\n        }\r\n    }\r\n\r\n      // visualizzazione in tavola della carta giocata\r\n      const numeroCarta = imagePath.substring(imagePath.lastIndexOf(\"/\")+1,imagePath.lastIndexOf(\".\"))        // TODO: funzione?\r\n      if (numero === 1) {\r\n        this.setState({primaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n      } else {\r\n        this.setState({secondaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n      }\r\n\r\n      \r\n\r\n    })\r\n\r\n\r\n    socket.off(\"fineMano\").on(\"fineMano\", (partita, cartaPescata) => {\r\n      //notify(\"FINE MANO\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))\r\n      var cartaPescataJSON = JSON.parse(cartaPescata.substring(cartaPescata.indexOf(\"{\")))\r\n      // Aggiornamento punteggio\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio2)})\r\n      }\r\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\r\n      if (socket.id === partitaJSON.ChiInizia){\r\n        notify(\"Tocca a me\")\r\n      }\r\n\r\n      var str = \"Carte rimanenti \"+ partitaJSON.CarteRimanenti + \" tipo: \" + typeof(partitaJSON.CarteRimanenti)\r\n      notify(str)\r\n\r\n      if (partitaJSON.CarteRimanenti === 0){\r\n        this.setState({immBriscolaEstratta:\"\"})\r\n        this.setState({visibilityMazzo:\"hidden\"})\r\n      } \r\n      \r\n      this.setState({\r\n        primaCartaTavola:\"\",\r\n        secondaCartaTavola:\"\"\r\n      })\r\n\r\n\r\n      if(cartaPescata !== {}) {  // se non è vuota\r\n      // Rimuovere le carte in tavola e aggiungere quelle in mano\r\n      const numeroCarta = cartaPescataJSON.ImagePath.substring(cartaPescataJSON.ImagePath.lastIndexOf(\"/\")+1,cartaPescataJSON.ImagePath.lastIndexOf(\".\"))\r\n\r\n      // Bisogna capire quale carta è stata giocata per capire dove inserire quella appena pescata\r\n      if (this.state.primaCartaMia === \"\") {\r\n        this.setState({\r\n          immPrimaCartaMia:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\"),\r\n          primaCartaMia:cartaPescata\r\n        })\r\n      } else if (this.state.secondaCartaMia === \"\") {\r\n        this.setState({\r\n          immSecondaCartaMia:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\"),\r\n          secondaCartaMia:cartaPescata\r\n        })\r\n      } else {      // TODO: convertire in else if?\r\n        this.setState({\r\n          immTerzaCartaMia:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\"),\r\n          terzaCartaMia:cartaPescata\r\n        })\r\n      } \r\n\r\n      if (this.state.primaCartaAvversario === \"\") {\r\n        this.setState({\r\n          primaCartaAvversario:cartaCoperta\r\n        })\r\n      } else if (this.state.secondaCartaAvversario === \"\") {\r\n        this.setState({\r\n          secondaCartaAvversario:cartaCoperta\r\n        })\r\n      } else {      // TODO: convertire in else if?\r\n        this.setState({\r\n          terzaCartaAvversario:cartaCoperta\r\n        })\r\n      } \r\n    }\r\n\r\n    })\r\n\r\n    socket.off(\"richiestaAmicoRifiutata\", () => {\r\n      notify(\"Il tuo amico ha rifiutato la richiesta\")\r\n    })\r\n\r\n\r\n    socket.off(\"finePartita\").on(\"finePartita\", (vincitore) => {\r\n      // Rimuoviamo le ultime carte giocate dalla tavola\r\n      this.setState({primaCartaTavola:\"\"})\r\n      this.setState({secondaCartaTavola:\"\"})\r\n\r\n      notify(\"La partita è finita\")\r\n      notify(\"tipo vincitore\" + typeof(vincitore))\r\n      notify(\"tipo socket.id\" + typeof(socket.id))\r\n      (socket.id === vincitore)? notify(\"Hai vinto!\") : notify(\"Hai perso!\")\r\n      window.PopStateEvent()\r\n      \r\n    })\r\n\r\n    socket.off(\"disconnessioneAvversario\").on(\"disconnessioneAvversario\", () => {\r\n      notify(\"L'avversario si è disconnesso\")\r\n    })\r\n\r\n    socket.off(\"abbandonoAvversario\").on(\"abbandonoAvversario\", () => {\r\n      notify(\"L'avversario ha abbandonato la partita\")\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  randomNumberInRange(min, max) {\r\n    // 👇️ get number between min (inclusive) and max (inclusive)\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  \r\n\r\n  render() { \r\n    return (\r\n      <>\r\n      <div style={{\"height\":\"30%\", \"width\":\"30%\", \"margin\":\"40%\", \"visibility\":(this.state.visibilityField === \"hidden\")? \"visible\" : \"hidden\"}} > \r\n        <MinimalSpinner color=\"green\" text=\"Aspettando l'avversario casuale\"/>\r\n      </div>\r\n      <div className=\"BiggerContainer\">\r\n      <div className=\"container bg-success\" style={{visibility:this.state.visibilityField, position:\"fixed\", top:0, right:0, width:\"100vw\", height:\"100vh\"}}>   \r\n      <div className=\"row\">\r\n        <div className=\"col-sm\" id=\"SecondPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.primaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.secondaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.terzaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerPoints\" onClick={this.handleClick}>\r\n          <div className=\"Punteggio rounded-5 bg-light\">{this.state.punteggioAvversario}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={cartaCoperta} id=\"Mazzo\" style={{float: \"left\", visibility: this.state.visibilityMazzo}}></img></div>     \r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={this.state.immBriscolaEstratta} style={{float: \"left\",transform: \"rotate(90deg)\"}}></img></div>      \r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={this.state.primaCartaTavola} alt=\"\"></img></div>\r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={this.state.secondaCartaTavola} alt=\"\"></img></div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\" id=\"FirstPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.immPrimaCartaMia} alt=\"\" style={{ position : \"relative\",bottom: 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.immSecondaCartaMia} alt=\"\" style={{position : \"relative\",bottom : 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.immTerzaCartaMia} alt=\"\" style={{position : \"relative\",bottom : 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerPoints\" onClick={this.handleClick}>\r\n          <div className=\"Punteggio rounded-5 bg-light\">{this.state.punteggioMio}</div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <div style={{height:\"0px\"}}>\r\n        <ToastContainer/>\r\n    </div>\r\n    </div>\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}