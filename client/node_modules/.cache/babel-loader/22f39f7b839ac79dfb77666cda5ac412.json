{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lele\\\\Desktop\\\\Briscola\\\\Briscola\\\\client\\\\src\\\\components\\\\LoginPage.js\";\nimport React, { Component } from 'react';\n//import Sfondo1 from 'Images/SfondoIniziale.jpg';\nimport { Wallpaper } from './Wallpaper.js';\nimport { io } from 'socket.io-client';\nimport { notify } from '../App.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ReactSession } from 'react-client-session';\n\n// Oggetto per la comunicazione col server tramite socket.io\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const socket = io('http://localhost:3001', {\n  transports: ['websocket', 'polling', 'flashsocket'],\n  withCredentials: false\n});\nexport class LoginPage extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      height: \"0px\",\n      visibilityTextBox: \"hidden\",\n      visibilitySpinner: \"hidden\",\n      access: \"login\"\n    };\n  }\n  access(accessType) {\n    // accessType può essere \"login\" o \"signup\"\n    this.setState({\n      visibilitySpinner: \"visible\"\n    }); // switch\n    if (!socket.connected) {\n      socket.on('connect', () => {\n        notify(`Client connesso con id ${socket.id}`); // Connessione necessaria col server\n      });\n    } else {\n      notify(`Client connesso con id ${socket.id}`);\n      var email = document.getElementById(\"InputEmail1\").value;\n      var password = document.getElementById(\"InputPassword1\").value;\n      if (accessType === \"signup\") {\n        var confirm = document.getElementById(\"InputPassword2\").value;\n        // Controllo che la password inserita nel signup sia uguale nelle due textbox\n        if (confirm !== password) {\n          notify(\"Password inserite diverse, riprova\");\n          this.setState({\n            visibilitySpinner: \"hidden\"\n          });\n          return;\n        }\n      }\n      // Emissione evento per accesso al sito\n      socket.emit('access', accessType, email, password);\n    }\n\n    // Esito operazione di login/signup\n    socket.off(\"accessOutcome\").on('accessOutcome', (accessOutcome, user) => {\n      this.setState({\n        visibilitySpinner: \"hidden\"\n      }); // switch\n      if (!accessOutcome) {\n        notify(\"Autenticazione fallita\");\n      } else {\n        notify(\"Autenticazione riuscita \");\n        // Impostiamo il valore di user in memoria (di sessione)\n        ReactSession.set(\"User\", user);\n        document.location.href = document.location + \"selectGame\"; // Ci si sposta nella pagina per selezionare il tipo di partita\n      }\n    });\n  }\n\n  // Funzione per alternare il tipo di accesso che si sta facendo, quando si preme lo switch\n  switchAccess() {\n    if (this.state.visibilityTextBox === \"hidden\") {\n      this.setState({\n        visibilityTextBox: \"visible\",\n        access: \"signup\"\n      });\n      this.setState({\n        height: \"auto\"\n      });\n    } else {\n      this.setState({\n        visibilityTextBox: \"hidden\",\n        access: \"login\"\n      });\n      this.setState({\n        height: \"0px\"\n      });\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Wallpaper, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n}","map":{"version":3,"names":["React","Component","Wallpaper","io","notify","ToastContainer","toast","ReactSession","socket","transports","withCredentials","LoginPage","state","height","visibilityTextBox","visibilitySpinner","access","accessType","setState","connected","on","id","email","document","getElementById","value","password","confirm","emit","off","accessOutcome","user","set","location","href","switchAccess","render"],"sources":["C:/Users/Lele/Desktop/Briscola/Briscola/client/src/components/LoginPage.js"],"sourcesContent":["import React, { Component } from 'react'\r\n//import Sfondo1 from 'Images/SfondoIniziale.jpg';\r\nimport { Wallpaper } from './Wallpaper.js';\r\nimport { io } from 'socket.io-client'\r\nimport { notify } from '../App.js'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { ReactSession } from 'react-client-session';\r\n\r\n\r\n// Oggetto per la comunicazione col server tramite socket.io\r\nexport const socket = io('http://localhost:3001',\r\n  {\r\n    transports: ['websocket', 'polling', 'flashsocket'],\r\n    withCredentials: false\r\n  })\r\n\r\n\r\nexport class LoginPage extends Component {\r\n  state = {\r\n    height: \"0px\",\r\n    visibilityTextBox: \"hidden\",\r\n    visibilitySpinner: \"hidden\",\r\n    access: \"login\"\r\n  }\r\n\r\n  access(accessType) {\r\n    // accessType può essere \"login\" o \"signup\"\r\n    this.setState({ visibilitySpinner: \"visible\" })    // switch\r\n    if (!socket.connected) {\r\n      socket.on('connect', () => {\r\n        notify(`Client connesso con id ${socket.id}`)       // Connessione necessaria col server\r\n      })\r\n    } else {\r\n      notify(`Client connesso con id ${socket.id}`)\r\n      var email = document.getElementById(\"InputEmail1\").value;\r\n      var password = document.getElementById(\"InputPassword1\").value;\r\n      if (accessType === \"signup\") {\r\n        var confirm = document.getElementById(\"InputPassword2\").value;\r\n        // Controllo che la password inserita nel signup sia uguale nelle due textbox\r\n        if (confirm !== password) {\r\n          notify(\"Password inserite diverse, riprova\")\r\n          this.setState({ visibilitySpinner: \"hidden\" })\r\n          return\r\n        }\r\n      }\r\n      // Emissione evento per accesso al sito\r\n      socket.emit('access', accessType, email, password);\r\n    }\r\n\r\n    // Esito operazione di login/signup\r\n    socket.off(\"accessOutcome\").on('accessOutcome', (accessOutcome, user) => {\r\n      this.setState({ visibilitySpinner: \"hidden\" })  // switch\r\n      if (!accessOutcome) {\r\n        notify(\"Autenticazione fallita\");\r\n      } else {\r\n        notify(\"Autenticazione riuscita \");\r\n        // Impostiamo il valore di user in memoria (di sessione)\r\n        ReactSession.set(\"User\", user)\r\n        document.location.href = document.location + \"selectGame\";     // Ci si sposta nella pagina per selezionare il tipo di partita\r\n      }\r\n    })\r\n  }\r\n\r\n  // Funzione per alternare il tipo di accesso che si sta facendo, quando si preme lo switch\r\n  switchAccess() {\r\n    if (this.state.visibilityTextBox === \"hidden\") {\r\n      this.setState({ visibilityTextBox: \"visible\", access: \"signup\" })\r\n      this.setState({ height: \"auto\" })\r\n    } else {\r\n      this.setState({ visibilityTextBox: \"hidden\", access: \"login\" })\r\n      this.setState({ height: \"0px\" })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <Wallpaper></Wallpaper>\r\n        \r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}