{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loreb\\\\Documents\\\\Unipr\\\\Terzo_anno\\\\Primo_semestre\\\\Tecnologie_internet\\\\Briscola\\\\client\\\\src\\\\components\\\\GameField.js\";\nimport { React, Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { socket } from \"./LoginPage.js\";\nimport { notify } from '../App.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n//import \"./GameField.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cartaCoperta = require('../Images/Retro.jpg');\nexport class GameField extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      primaCartaMia: \"\",\n      secondaCartaMia: \"\",\n      terzaCartaMia: \"\",\n      immPrimaCartaMia: \"\",\n      immSecondaCartaMia: \"\",\n      immTerzaCartaMia: \"\",\n      primaCartaAvversario: \"\",\n      secondaCartaAvversario: \"\",\n      terzaCartaAvversario: \"\",\n      primaCartaTavola: \"\",\n      secondaCartaTavola: \"\",\n      immBriscolaEstratta: \"\",\n      briscolaEstratta: \"\",\n      punteggioMio: 0,\n      punteggioAvversario: 1,\n      // sbagliato apposta per vedere se setState corregge TODO: ripristinare a 0\n      idPartita: 0,\n      messaggioAlert: \"Ciao\"\n    };\n    this.handleClick = event => {\n      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\n      var id = event.currentTarget.id; // Elemento sul quale è stato fatto il click\n      //window.alert(id);\n\n      if (socket.connected) {\n        // verifichiamo di essere connessi prima di inviare il click\n        switch (id) {\n          case \"FirstPlayerFirstCard\":\n            {\n              socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia);\n              break;\n            }\n          case \"FirstPlayerSecondCard\":\n            {\n              socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia);\n              break;\n            }\n          case \"FirstPlayerThirdCard\":\n            {\n              socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia);\n              break;\n            }\n          default:\n            break;\n        }\n        /*\r\n          case \"Mazzo\": {\r\n            if (this.state.primaCartaTavola === \"\" && this.state.secondaCartaTavola === \"\"){        // Si pesca dal mazzo solo quando non ci sono carte in tavola\r\n              socket.emit(\"pescaDalMazzoReq\", this.state.idPartita)\r\n            }\r\n            \r\n            break;\r\n          }\r\n        */\n      }\n    };\n  }\n\n  //useEffect(){\n  //listener(){\n  componentDidMount() {\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano, briscolaEstrattaParam) => {\n      notify(\"PARTITA INIZIATA, MIOID: \" + socket.id);\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\"))); // , mano.lastIndexOf(\"}\")\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\"))); // , partita.lastIndexOf(\"}\")\n\n      // Settiamo la mano iniziale\n      this.setState({\n        primaCartaMia: JSON.stringify(manoJSON.PrimaCarta)\n      });\n      this.setState({\n        secondaCartaMia: JSON.stringify(manoJSON.SecondaCarta)\n      });\n      this.setState({\n        terzaCartaMia: JSON.stringify(manoJSON.TerzaCarta)\n      });\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"));\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"));\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"));\n      // Non si può fare require(manoJSON.PrimaCarta.ImagePath)\n      this.setState({\n        immPrimaCartaMia: require(\"../Images/Piacentine/\" + percorsoPrima + \".jpg\")\n      });\n      this.setState({\n        immSecondaCartaMia: require(\"../Images/Piacentine/\" + percorsoSeconda + \".jpg\")\n      });\n      this.setState({\n        immTerzaCartaMia: require(\"../Images/Piacentine/\" + percorsoTerza + \".jpg\")\n      });\n\n      // Carte avversario\n      this.setState({\n        primaCartaAvversario: cartaCoperta\n      });\n      this.setState({\n        secondaCartaAvversario: cartaCoperta\n      });\n      this.setState({\n        terzaCartaAvversario: cartaCoperta\n      });\n\n      // Punteggio iniziale, 0 - 0 TODO: statico?\n      if (socket.id === partitaJSON.IdGiocatore1) {\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n      } else {\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n      }\n      this.setState({\n        idPartita: JSON.stringify(partitaJSON.IdPartita)\n      });\n      briscolaEstrattaParam = JSON.parse(briscolaEstrattaParam.substring(briscolaEstrattaParam.indexOf(\"{\")));\n      const cartaBriscolaEstratta = briscolaEstrattaParam.ImagePath.substring(briscolaEstrattaParam.ImagePath.lastIndexOf(\"/\") + 1, briscolaEstrattaParam.ImagePath.lastIndexOf(\".\"));\n      this.setState({\n        immBriscolaEstratta: require(\"../Images/Piacentine/\" + cartaBriscolaEstratta + \".jpg\")\n      });\n      this.setState({\n        briscolaEstratta: JSON.stringify(briscolaEstrattaParam)\n      });\n\n      // Evento che viene scatenato quando si preme il pulsante \"indietro\" del browser\n      window.addEventListener('popstate', event => {\n        if (this.state.idPartita !== 0) {\n          notify(\"La partita verrà conclusa\");\n        }\n        socket.emit(\"abbandonaPartita\");\n      });\n    });\n\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta, numeroInTavola) => {\n      //window.alert(\"Risposta per carta giocata, esito \" + outcome + \" carta: \" + carta)\n      if (outcome) {\n        // se esito positivo alla richiesta di giocare una carta\n        switch (carta) {\n          case this.state.primaCartaMia:\n            this.setState({\n              primaCartaMia: \"\"\n            }); // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\n            this.setState({\n              immPrimaCartaMia: \"\"\n            });\n            break;\n          case this.state.secondaCartaMia:\n            this.setState({\n              secondaCartaMia: \"\"\n            });\n            this.setState({\n              immSecondaCartaMia: \"\"\n            });\n            break;\n          case this.state.terzaCartaMia:\n            this.setState({\n              terzaCartaMia: \"\"\n            });\n            this.setState({\n              immTerzaCartaMia: \"\"\n            });\n            break;\n          default:\n            break;\n        }\n        // Visualizzazione carta in tavola \n        var cartaJSON = JSON.parse(carta.substring(carta.indexOf(\"{\")));\n        const numeroCarta = cartaJSON.ImagePath.substring(cartaJSON.ImagePath.lastIndexOf(\"/\") + 1, cartaJSON.ImagePath.lastIndexOf(\".\"));\n        if (numeroInTavola === 1) {\n          this.setState({\n            primaCartaTavola: require(\"../Images/Piacentine/\" + numeroCarta + \".jpg\")\n          });\n        } else {\n          this.setState({\n            secondaCartaTavola: require(\"../Images/Piacentine/\" + numeroCarta + \".jpg\")\n          });\n        }\n      } else {\n        notify(\"Non puoi giocare la carta\");\n      }\n    });\n\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", (imagePath, numero) => {\n      //notify(\"L'avversario ha giocato una carta in tavola\")\n      // si può rimuovere graficamente carta a caso \n      switch (this.randomNumberInRange(1, 3)) {\n        case 1:\n          this.setState({\n            primaCartaAvversario: \"\"\n          });\n          break;\n        case 2:\n          this.setState({\n            secondaCartaAvversario: \"\"\n          });\n          break;\n        case 3:\n          this.setState({\n            terzaCartaAvversario: \"\"\n          });\n          break;\n        default:\n          notify(\"Carta giocata avversario, case default\");\n          break;\n      }\n\n      // visualizzazione in tavola della carta giocata\n      const numeroCarta = imagePath.substring(imagePath.lastIndexOf(\"/\") + 1, imagePath.lastIndexOf(\".\")); // TODO: funzione?\n      if (numero === 1) {\n        this.setState({\n          primaCartaTavola: require(\"../Images/Piacentine/\" + numeroCarta + \".jpg\")\n        });\n      } else {\n        this.setState({\n          secondaCartaTavola: require(\"../Images/Piacentine/\" + numeroCarta + \".jpg\")\n        });\n      }\n    });\n    socket.off(\"fineMano\").on(\"fineMano\", (partita, cartaPescata) => {\n      //notify(\"FINE MANO\")\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")));\n      var cartaPescataJSON = JSON.parse(cartaPescata.substring(cartaPescata.indexOf(\"{\")));\n      // Aggiornamento punteggio\n      if (socket.id === partitaJSON.IdGiocatore1) {\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio1)\n        });\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2)\n        });\n      } else {\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\n        this.setState({\n          punteggioAvversario: JSON.stringify(partitaJSON.Punteggio1)\n        });\n        this.setState({\n          punteggioMio: JSON.stringify(partitaJSON.Punteggio2)\n        });\n      }\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\n      if (socket.id === partitaJSON.ChiInizia) {\n        notify(\"Tocca a me\");\n      }\n      var str = \"Mani rimanenti \" + partitaJSON.ManiRimanenti + \" tipo: \" + typeof partitaJSON.ManiRimanenti;\n      notify(str);\n      if (partitaJSON.ManiRimanenti === 3) {\n        this.setState({\n          immBriscolaEstratta: \"\"\n        });\n      } else if (partitaJSON.ManiRimanenti === 0) {\n        document.getElementById(\"Mazzo\").setAttribute(\"visibility\", \"hidden\");\n      }\n      this.setState({\n        primaCartaTavola: \"\",\n        secondaCartaTavola: \"\"\n      });\n      if (cartaPescata !== {}) {\n        // se non è vuota\n        // Rimuovere le carte in tavola e aggiungere quelle in mano\n        const numeroCarta = cartaPescataJSON.ImagePath.substring(cartaPescataJSON.ImagePath.lastIndexOf(\"/\") + 1, cartaPescataJSON.ImagePath.lastIndexOf(\".\"));\n\n        // Bisogna capire quale carta è stata giocata per capire dove inserire quella appena pescata\n        if (this.state.primaCartaMia === \"\") {\n          this.setState({\n            immPrimaCartaMia: require(\"../Images/Piacentine/\" + numeroCarta + \".jpg\"),\n            primaCartaMia: cartaPescata\n          });\n        } else if (this.state.secondaCartaMia === \"\") {\n          this.setState({\n            immSecondaCartaMia: require(\"../Images/Piacentine/\" + numeroCarta + \".jpg\"),\n            secondaCartaMia: cartaPescata\n          });\n        } else {\n          // TODO: convertire in else if?\n          this.setState({\n            immTerzaCartaMia: require(\"../Images/Piacentine/\" + numeroCarta + \".jpg\"),\n            terzaCartaMia: cartaPescata\n          });\n        }\n        if (this.state.primaCartaAvversario === \"\") {\n          this.setState({\n            primaCartaAvversario: cartaCoperta\n          });\n        } else if (this.state.secondaCartaAvversario === \"\") {\n          this.setState({\n            secondaCartaAvversario: cartaCoperta\n          });\n        } else {\n          // TODO: convertire in else if?\n          this.setState({\n            terzaCartaAvversario: cartaCoperta\n          });\n        }\n      }\n    });\n    socket.off(\"finePartita\").on(\"finePartita\", () => {\n      notify(\"La partita è finita\");\n    });\n    socket.off(\"disconnessioneAvversario\").on(\"disconnessioneAvversario\", () => {\n      notify(\"L'avversario si è disconnesso\");\n    });\n    socket.off(\"abbandonoAvversario\").on(\"abbandonoAvversario\", () => {\n      notify(\"L'avversario ha abbandonato la partita\");\n    });\n  }\n  randomNumberInRange(min, max) {\n    // 👇️ get number between min (inclusive) and max (inclusive)\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"SecondPlayerFirstCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.primaCartaAvversario,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"SecondPlayerSecondCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.secondaCartaAvversario,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"SecondPlayerThirdCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.terzaCartaAvversario,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"SecondPlayerPoints\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Punteggio\",\n              children: this.state.punteggioAvversario\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: cartaCoperta,\n              id: \"Mazzo\",\n              style: {\n                float: \"left\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.immBriscolaEstratta,\n              style: {\n                float: \"left\",\n                transform: \"rotate(90deg)\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.primaCartaTavola,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.secondaCartaTavola,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"FirstPlayerFirstCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.immPrimaCartaMia,\n              alt: \"\",\n              style: {\n                position: \"relative\",\n                bottom: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"FirstPlayerSecondCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.immSecondaCartaMia,\n              alt: \"\",\n              style: {\n                position: \"relative\",\n                bottom: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"FirstPlayerThirdCard\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.immTerzaCartaMia,\n              alt: \"\",\n              style: {\n                position: \"relative\",\n                bottom: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm\",\n            id: \"FirstPlayerPoints\",\n            onClick: this.handleClick,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Punteggio\",\n              children: this.state.punteggioMio\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n}","map":{"version":3,"names":["React","Component","socket","notify","ToastContainer","toast","cartaCoperta","require","GameField","state","primaCartaMia","secondaCartaMia","terzaCartaMia","immPrimaCartaMia","immSecondaCartaMia","immTerzaCartaMia","primaCartaAvversario","secondaCartaAvversario","terzaCartaAvversario","primaCartaTavola","secondaCartaTavola","immBriscolaEstratta","briscolaEstratta","punteggioMio","punteggioAvversario","idPartita","messaggioAlert","handleClick","event","id","currentTarget","connected","emit","componentDidMount","off","on","partita","mano","briscolaEstrattaParam","manoJSON","JSON","parse","substring","indexOf","partitaJSON","setState","stringify","PrimaCarta","SecondaCarta","TerzaCarta","percorsoPrima","ImagePath","lastIndexOf","percorsoSeconda","percorsoTerza","IdGiocatore1","Punteggio1","Punteggio2","IdPartita","cartaBriscolaEstratta","window","addEventListener","outcome","carta","numeroInTavola","cartaJSON","numeroCarta","imagePath","numero","randomNumberInRange","cartaPescata","cartaPescataJSON","ChiInizia","str","ManiRimanenti","document","getElementById","setAttribute","min","max","Math","floor","random","render","float","transform","position","bottom"],"sources":["C:/Users/loreb/Documents/Unipr/Terzo_anno/Primo_semestre/Tecnologie_internet/Briscola/client/src/components/GameField.js"],"sourcesContent":["import {React, Component} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {socket} from \"./LoginPage.js\"\r\nimport { notify } from '../App.js'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n//import \"./GameField.css\";\r\n\r\nconst cartaCoperta = require('../Images/Retro.jpg');\r\n\r\n\r\n\r\nexport class GameField extends Component {\r\n  state = {\r\n    primaCartaMia : \"\",\r\n    secondaCartaMia : \"\",\r\n    terzaCartaMia : \"\",\r\n    immPrimaCartaMia : \"\",\r\n    immSecondaCartaMia : \"\",\r\n    immTerzaCartaMia : \"\",\r\n    primaCartaAvversario : \"\",\r\n    secondaCartaAvversario : \"\",\r\n    terzaCartaAvversario : \"\",\r\n    primaCartaTavola : \"\",\r\n    secondaCartaTavola : \"\",\r\n    immBriscolaEstratta : \"\",\r\n    briscolaEstratta: \"\",\r\n    punteggioMio : 0,\r\n    punteggioAvversario : 1,          // sbagliato apposta per vedere se setState corregge TODO: ripristinare a 0\r\n    idPartita : 0,\r\n    messaggioAlert : \"Ciao\"\r\n  };\r\n    \r\n  \r\n\r\n  \r\n  handleClick = event => {      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\r\n    var id = event.currentTarget.id     // Elemento sul quale è stato fatto il click\r\n    //window.alert(id);\r\n    \r\n    if (socket.connected){    // verifichiamo di essere connessi prima di inviare il click\r\n      switch (id) {\r\n        case \"FirstPlayerFirstCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia)       \r\n          break;\r\n        }\r\n        case \"FirstPlayerSecondCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia)\r\n          break;\r\n        }\r\n        case \"FirstPlayerThirdCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia)\r\n          break;\r\n        }\r\n        default:\r\n          break;\r\n      }\r\n      /*\r\n        case \"Mazzo\": {\r\n          if (this.state.primaCartaTavola === \"\" && this.state.secondaCartaTavola === \"\"){        // Si pesca dal mazzo solo quando non ci sono carte in tavola\r\n            socket.emit(\"pescaDalMazzoReq\", this.state.idPartita)\r\n          }\r\n          \r\n          break;\r\n        }\r\n      */\r\n    }\r\n  };\r\n\r\n  //useEffect(){\r\n  //listener(){\r\n  componentDidMount() {\r\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano, briscolaEstrattaParam) => {\r\n      notify(\"PARTITA INIZIATA, MIOID: \"+ socket.id)\r\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \r\n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\")))              // , mano.lastIndexOf(\"}\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))     // , partita.lastIndexOf(\"}\")\r\n\r\n      // Settiamo la mano iniziale\r\n      this.setState({primaCartaMia: JSON.stringify(manoJSON.PrimaCarta)})\r\n      this.setState({secondaCartaMia: JSON.stringify(manoJSON.SecondaCarta)})\r\n      this.setState({terzaCartaMia: JSON.stringify(manoJSON.TerzaCarta)})\r\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\r\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"))\r\n      // Non si può fare require(manoJSON.PrimaCarta.ImagePath)\r\n      this.setState({immPrimaCartaMia:require(\"../Images/Piacentine/\" + percorsoPrima + \".jpg\")})\r\n      this.setState({immSecondaCartaMia:require(\"../Images/Piacentine/\" + percorsoSeconda + \".jpg\")})\r\n      this.setState({immTerzaCartaMia:require(\"../Images/Piacentine/\" + percorsoTerza + \".jpg\")})\r\n\r\n      // Carte avversario\r\n      this.setState({primaCartaAvversario:cartaCoperta})\r\n      this.setState({secondaCartaAvversario:cartaCoperta})\r\n      this.setState({terzaCartaAvversario:cartaCoperta})\r\n\r\n      // Punteggio iniziale, 0 - 0 TODO: statico?\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n      }\r\n\r\n      this.setState({idPartita:JSON.stringify(partitaJSON.IdPartita)})\r\n\r\n      briscolaEstrattaParam = JSON.parse(briscolaEstrattaParam.substring(briscolaEstrattaParam.indexOf(\"{\")))\r\n      const cartaBriscolaEstratta = briscolaEstrattaParam.ImagePath.substring(briscolaEstrattaParam.ImagePath.lastIndexOf(\"/\")+1,briscolaEstrattaParam.ImagePath.lastIndexOf(\".\"))\r\n      this.setState({immBriscolaEstratta:require(\"../Images/Piacentine/\"+cartaBriscolaEstratta+\".jpg\")})\r\n      this.setState({briscolaEstratta:JSON.stringify(briscolaEstrattaParam)})\r\n\r\n\r\n      // Evento che viene scatenato quando si preme il pulsante \"indietro\" del browser\r\n      window.addEventListener('popstate', (event) => {\r\n        if (this.state.idPartita !== 0){\r\n          notify(\"La partita verrà conclusa\")\r\n        }\r\n        socket.emit(\"abbandonaPartita\")\r\n      });\r\n    })\r\n  \r\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\r\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta, numeroInTavola) =>{ \r\n      //window.alert(\"Risposta per carta giocata, esito \" + outcome + \" carta: \" + carta)\r\n      if (outcome){\r\n        // se esito positivo alla richiesta di giocare una carta\r\n        switch (carta) {\r\n          case this.state.primaCartaMia:\r\n            this.setState({primaCartaMia:\"\"})     // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\r\n            this.setState({immPrimaCartaMia : \"\"})\r\n            break;\r\n          case this.state.secondaCartaMia:\r\n            this.setState({secondaCartaMia:\"\"})\r\n            this.setState({immSecondaCartaMia : \"\"})\r\n            break;\r\n          case this.state.terzaCartaMia:\r\n            this.setState({terzaCartaMia:\"\"})\r\n            this.setState({immTerzaCartaMia : \"\"})\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        // Visualizzazione carta in tavola \r\n        var cartaJSON = JSON.parse(carta.substring(carta.indexOf(\"{\")))\r\n        const numeroCarta = cartaJSON.ImagePath.substring(cartaJSON.ImagePath.lastIndexOf(\"/\")+1,cartaJSON.ImagePath.lastIndexOf(\".\"))        \r\n        if (numeroInTavola === 1) {\r\n          this.setState({primaCartaTavola:require(\"../Images/Piacentine/\"+numeroCarta+\".jpg\")})\r\n        } else {\r\n          this.setState({secondaCartaTavola:require(\"../Images/Piacentine/\"+numeroCarta+\".jpg\")})\r\n        }\r\n      \r\n      }else{\r\n        notify(\"Non puoi giocare la carta\")\r\n      }\r\n\r\n    })\r\n\r\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\r\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", (imagePath, numero) => {\r\n      //notify(\"L'avversario ha giocato una carta in tavola\")\r\n      // si può rimuovere graficamente carta a caso \r\n      switch (this.randomNumberInRange(1,3)) {\r\n        case 1:\r\n          this.setState({primaCartaAvversario:\"\"})\r\n          break;\r\n        case 2:\r\n          this.setState({secondaCartaAvversario:\"\"})\r\n          break;\r\n        case 3:\r\n          this.setState({terzaCartaAvversario:\"\"})\r\n          break;\r\n        default:\r\n          notify(\"Carta giocata avversario, case default\")\r\n          break;\r\n      }\r\n\r\n      // visualizzazione in tavola della carta giocata\r\n      const numeroCarta = imagePath.substring(imagePath.lastIndexOf(\"/\")+1,imagePath.lastIndexOf(\".\"))        // TODO: funzione?\r\n      if (numero === 1) {\r\n        this.setState({primaCartaTavola:require(\"../Images/Piacentine/\"+numeroCarta+\".jpg\")})\r\n      } else {\r\n        this.setState({secondaCartaTavola:require(\"../Images/Piacentine/\"+numeroCarta+\".jpg\")})\r\n      }\r\n\r\n      \r\n\r\n    })\r\n\r\n\r\n    socket.off(\"fineMano\").on(\"fineMano\", (partita, cartaPescata) => {\r\n      //notify(\"FINE MANO\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))\r\n      var cartaPescataJSON = JSON.parse(cartaPescata.substring(cartaPescata.indexOf(\"{\")))\r\n      // Aggiornamento punteggio\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio2)})\r\n      }\r\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\r\n      if (socket.id === partitaJSON.ChiInizia){\r\n        notify(\"Tocca a me\")\r\n      }\r\n\r\n      var str = \"Mani rimanenti \"+ partitaJSON.ManiRimanenti + \" tipo: \" + typeof(partitaJSON.ManiRimanenti)\r\n      notify(str)\r\n\r\n      if (partitaJSON.ManiRimanenti === 3){\r\n        this.setState({immBriscolaEstratta:\"\"})\r\n      } else if (partitaJSON.ManiRimanenti === 0){\r\n        document.getElementById(\"Mazzo\").setAttribute(\"visibility\",\"hidden\")\r\n        \r\n      } \r\n      \r\n      this.setState({\r\n        primaCartaTavola:\"\",\r\n        secondaCartaTavola:\"\"\r\n      })\r\n\r\n\r\n      if(cartaPescata !== {}) {  // se non è vuota\r\n      // Rimuovere le carte in tavola e aggiungere quelle in mano\r\n      const numeroCarta = cartaPescataJSON.ImagePath.substring(cartaPescataJSON.ImagePath.lastIndexOf(\"/\")+1,cartaPescataJSON.ImagePath.lastIndexOf(\".\"))\r\n\r\n      // Bisogna capire quale carta è stata giocata per capire dove inserire quella appena pescata\r\n      if (this.state.primaCartaMia === \"\") {\r\n        this.setState({\r\n          immPrimaCartaMia:require(\"../Images/Piacentine/\"+numeroCarta+\".jpg\"),\r\n          primaCartaMia:cartaPescata\r\n        })\r\n      } else if (this.state.secondaCartaMia === \"\") {\r\n        this.setState({\r\n          immSecondaCartaMia:require(\"../Images/Piacentine/\"+numeroCarta+\".jpg\"),\r\n          secondaCartaMia:cartaPescata\r\n        })\r\n      } else {      // TODO: convertire in else if?\r\n        this.setState({\r\n          immTerzaCartaMia:require(\"../Images/Piacentine/\"+numeroCarta+\".jpg\"),\r\n          terzaCartaMia:cartaPescata\r\n        })\r\n      } \r\n\r\n      if (this.state.primaCartaAvversario === \"\") {\r\n        this.setState({\r\n          primaCartaAvversario:cartaCoperta\r\n        })\r\n      } else if (this.state.secondaCartaAvversario === \"\") {\r\n        this.setState({\r\n          secondaCartaAvversario:cartaCoperta\r\n        })\r\n      } else {      // TODO: convertire in else if?\r\n        this.setState({\r\n          terzaCartaAvversario:cartaCoperta\r\n        })\r\n      } \r\n    }\r\n      \r\n\r\n    })\r\n\r\n    socket.off(\"finePartita\").on(\"finePartita\", () => {\r\n      notify(\"La partita è finita\")\r\n    })\r\n\r\n    socket.off(\"disconnessioneAvversario\").on(\"disconnessioneAvversario\", () => {\r\n      notify(\"L'avversario si è disconnesso\")\r\n    })\r\n\r\n    socket.off(\"abbandonoAvversario\").on(\"abbandonoAvversario\", () => {\r\n      notify(\"L'avversario ha abbandonato la partita\")\r\n    })\r\n  }\r\n\r\n\r\n  randomNumberInRange(min, max) {\r\n    // 👇️ get number between min (inclusive) and max (inclusive)\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  \r\n  \r\n  render() { \r\n    return (\r\n      <>\r\n      <div className=\"container text-center\">   \r\n          \r\n      <div className=\"row\">\r\n        <div className=\"col-sm\" id=\"SecondPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img src={this.state.primaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img src={this.state.secondaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img src={this.state.terzaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerPoints\" onClick={this.handleClick}>\r\n          <div className=\"Punteggio\">{this.state.punteggioAvversario}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\"><img src={cartaCoperta} id=\"Mazzo\" style={{float: \"left\"}}></img></div>     \r\n        <div className=\"col-sm\"><img src={this.state.immBriscolaEstratta} style={{float: \"left\",transform: \"rotate(90deg)\"}}></img></div>      \r\n        <div className=\"col-sm\"><img src={this.state.primaCartaTavola} alt=\"\"></img></div>\r\n        <div className=\"col-sm\"><img src={this.state.secondaCartaTavola} alt=\"\"></img></div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\" id=\"FirstPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img src={this.state.immPrimaCartaMia} alt=\"\" style={{ position : \"relative\",bottom: 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img src={this.state.immSecondaCartaMia} alt=\"\" style={{position : \"relative\",bottom : 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img src={this.state.immTerzaCartaMia} alt=\"\" style={{position : \"relative\",bottom : 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerPoints\" onClick={this.handleClick}>\r\n          <div className=\"Punteggio\">{this.state.punteggioMio}</div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <ToastContainer />\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\n"],"mappings":";AAAA,SAAQA,KAAK,EAAEC,SAAS,QAAO,OAAO;AACtC,OAAO,kCAAkC;AACzC,SAAQC,MAAM,QAAO,gBAAgB;AACrC,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAC9C;AAAA;AAAA;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAInD,OAAO,MAAMC,SAAS,SAASP,SAAS,CAAC;EAAA;IAAA;IAAA,KACvCQ,KAAK,GAAG;MACNC,aAAa,EAAG,EAAE;MAClBC,eAAe,EAAG,EAAE;MACpBC,aAAa,EAAG,EAAE;MAClBC,gBAAgB,EAAG,EAAE;MACrBC,kBAAkB,EAAG,EAAE;MACvBC,gBAAgB,EAAG,EAAE;MACrBC,oBAAoB,EAAG,EAAE;MACzBC,sBAAsB,EAAG,EAAE;MAC3BC,oBAAoB,EAAG,EAAE;MACzBC,gBAAgB,EAAG,EAAE;MACrBC,kBAAkB,EAAG,EAAE;MACvBC,mBAAmB,EAAG,EAAE;MACxBC,gBAAgB,EAAE,EAAE;MACpBC,YAAY,EAAG,CAAC;MAChBC,mBAAmB,EAAG,CAAC;MAAW;MAClCC,SAAS,EAAG,CAAC;MACbC,cAAc,EAAG;IACnB,CAAC;IAAA,KAKDC,WAAW,GAAGC,KAAK,IAAI;MAAO;MAC5B,IAAIC,EAAE,GAAGD,KAAK,CAACE,aAAa,CAACD,EAAE,EAAK;MACpC;;MAEA,IAAI3B,MAAM,CAAC6B,SAAS,EAAC;QAAK;QACxB,QAAQF,EAAE;UACR,KAAK,sBAAsB;YAAE;cAC3B3B,MAAM,CAAC8B,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAACvB,KAAK,CAACgB,SAAS,EAAE,IAAI,CAAChB,KAAK,CAACC,aAAa,CAAC;cAC9E;YACF;UACA,KAAK,uBAAuB;YAAE;cAC5BR,MAAM,CAAC8B,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAACvB,KAAK,CAACgB,SAAS,EAAE,IAAI,CAAChB,KAAK,CAACE,eAAe,CAAC;cAChF;YACF;UACA,KAAK,sBAAsB;YAAE;cAC3BT,MAAM,CAAC8B,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAACvB,KAAK,CAACgB,SAAS,EAAE,IAAI,CAAChB,KAAK,CAACG,aAAa,CAAC;cAC9E;YACF;UACA;YACE;QAAM;QAEV;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACI;IACF,CAAC;EAAA;;EAED;EACA;EACAqB,iBAAiB,GAAG;IAClB/B,MAAM,CAACgC,GAAG,CAAC,iBAAiB,CAAC,CAACC,EAAE,CAAC,iBAAiB,EAAE,CAACC,OAAO,EAAEC,IAAI,EAAEC,qBAAqB,KAAK;MAC5FnC,MAAM,CAAC,2BAA2B,GAAED,MAAM,CAAC2B,EAAE,CAAC;MAC9C;MACA,IAAIU,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,SAAS,CAACL,IAAI,CAACM,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAc;MAC1E,IAAIC,WAAW,GAAGJ,IAAI,CAACC,KAAK,CAACL,OAAO,CAACM,SAAS,CAACN,OAAO,CAACO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAK;;MAE1E;MACA,IAAI,CAACE,QAAQ,CAAC;QAACnC,aAAa,EAAE8B,IAAI,CAACM,SAAS,CAACP,QAAQ,CAACQ,UAAU;MAAC,CAAC,CAAC;MACnE,IAAI,CAACF,QAAQ,CAAC;QAAClC,eAAe,EAAE6B,IAAI,CAACM,SAAS,CAACP,QAAQ,CAACS,YAAY;MAAC,CAAC,CAAC;MACvE,IAAI,CAACH,QAAQ,CAAC;QAACjC,aAAa,EAAE4B,IAAI,CAACM,SAAS,CAACP,QAAQ,CAACU,UAAU;MAAC,CAAC,CAAC;MACnE;MACA,MAAMC,aAAa,GAAGX,QAAQ,CAACQ,UAAU,CAACI,SAAS,CAACT,SAAS,CAACH,QAAQ,CAACQ,UAAU,CAACI,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAACb,QAAQ,CAACQ,UAAU,CAACI,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,CAAC;MAC9J,MAAMC,eAAe,GAAGd,QAAQ,CAACS,YAAY,CAACG,SAAS,CAACT,SAAS,CAACH,QAAQ,CAACS,YAAY,CAACG,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAACb,QAAQ,CAACS,YAAY,CAACG,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,CAAC;MACtK,MAAME,aAAa,GAAGf,QAAQ,CAACU,UAAU,CAACE,SAAS,CAACT,SAAS,CAACH,QAAQ,CAACU,UAAU,CAACE,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAACb,QAAQ,CAACU,UAAU,CAACE,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,CAAC;MAC9J;MACA,IAAI,CAACP,QAAQ,CAAC;QAAChC,gBAAgB,EAACN,OAAO,CAAC,uBAAuB,GAAG2C,aAAa,GAAG,MAAM;MAAC,CAAC,CAAC;MAC3F,IAAI,CAACL,QAAQ,CAAC;QAAC/B,kBAAkB,EAACP,OAAO,CAAC,uBAAuB,GAAG8C,eAAe,GAAG,MAAM;MAAC,CAAC,CAAC;MAC/F,IAAI,CAACR,QAAQ,CAAC;QAAC9B,gBAAgB,EAACR,OAAO,CAAC,uBAAuB,GAAG+C,aAAa,GAAG,MAAM;MAAC,CAAC,CAAC;;MAE3F;MACA,IAAI,CAACT,QAAQ,CAAC;QAAC7B,oBAAoB,EAACV;MAAY,CAAC,CAAC;MAClD,IAAI,CAACuC,QAAQ,CAAC;QAAC5B,sBAAsB,EAACX;MAAY,CAAC,CAAC;MACpD,IAAI,CAACuC,QAAQ,CAAC;QAAC3B,oBAAoB,EAACZ;MAAY,CAAC,CAAC;;MAElD;MACA,IAAIJ,MAAM,CAAC2B,EAAE,KAAKe,WAAW,CAACW,YAAY,EAAE;QAC1C,IAAI,CAACV,QAAQ,CAAC;UAACtB,YAAY,EAACiB,IAAI,CAACM,SAAS,CAACF,WAAW,CAACY,UAAU;QAAC,CAAC,CAAC;QACpE,IAAI,CAACX,QAAQ,CAAC;UAACrB,mBAAmB,EAACgB,IAAI,CAACM,SAAS,CAACF,WAAW,CAACa,UAAU;QAAC,CAAC,CAAC;MAC7E,CAAC,MAAM;QACL;QACA,IAAI,CAACZ,QAAQ,CAAC;UAACrB,mBAAmB,EAACgB,IAAI,CAACM,SAAS,CAACF,WAAW,CAACa,UAAU;QAAC,CAAC,CAAC;QAC3E,IAAI,CAACZ,QAAQ,CAAC;UAACtB,YAAY,EAACiB,IAAI,CAACM,SAAS,CAACF,WAAW,CAACY,UAAU;QAAC,CAAC,CAAC;MACtE;MAEA,IAAI,CAACX,QAAQ,CAAC;QAACpB,SAAS,EAACe,IAAI,CAACM,SAAS,CAACF,WAAW,CAACc,SAAS;MAAC,CAAC,CAAC;MAEhEpB,qBAAqB,GAAGE,IAAI,CAACC,KAAK,CAACH,qBAAqB,CAACI,SAAS,CAACJ,qBAAqB,CAACK,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;MACvG,MAAMgB,qBAAqB,GAAGrB,qBAAqB,CAACa,SAAS,CAACT,SAAS,CAACJ,qBAAqB,CAACa,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAACd,qBAAqB,CAACa,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,CAAC;MAC5K,IAAI,CAACP,QAAQ,CAAC;QAACxB,mBAAmB,EAACd,OAAO,CAAC,uBAAuB,GAACoD,qBAAqB,GAAC,MAAM;MAAC,CAAC,CAAC;MAClG,IAAI,CAACd,QAAQ,CAAC;QAACvB,gBAAgB,EAACkB,IAAI,CAACM,SAAS,CAACR,qBAAqB;MAAC,CAAC,CAAC;;MAGvE;MACAsB,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAGjC,KAAK,IAAK;QAC7C,IAAI,IAAI,CAACnB,KAAK,CAACgB,SAAS,KAAK,CAAC,EAAC;UAC7BtB,MAAM,CAAC,2BAA2B,CAAC;QACrC;QACAD,MAAM,CAAC8B,IAAI,CAAC,kBAAkB,CAAC;MACjC,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA9B,MAAM,CAACgC,GAAG,CAAC,iBAAiB,CAAC,CAACC,EAAE,CAAC,iBAAiB,EAAE,CAAC2B,OAAO,EAAEC,KAAK,EAAEC,cAAc,KAAI;MACrF;MACA,IAAIF,OAAO,EAAC;QACV;QACA,QAAQC,KAAK;UACX,KAAK,IAAI,CAACtD,KAAK,CAACC,aAAa;YAC3B,IAAI,CAACmC,QAAQ,CAAC;cAACnC,aAAa,EAAC;YAAE,CAAC,CAAC,EAAK;YACtC,IAAI,CAACmC,QAAQ,CAAC;cAAChC,gBAAgB,EAAG;YAAE,CAAC,CAAC;YACtC;UACF,KAAK,IAAI,CAACJ,KAAK,CAACE,eAAe;YAC7B,IAAI,CAACkC,QAAQ,CAAC;cAAClC,eAAe,EAAC;YAAE,CAAC,CAAC;YACnC,IAAI,CAACkC,QAAQ,CAAC;cAAC/B,kBAAkB,EAAG;YAAE,CAAC,CAAC;YACxC;UACF,KAAK,IAAI,CAACL,KAAK,CAACG,aAAa;YAC3B,IAAI,CAACiC,QAAQ,CAAC;cAACjC,aAAa,EAAC;YAAE,CAAC,CAAC;YACjC,IAAI,CAACiC,QAAQ,CAAC;cAAC9B,gBAAgB,EAAG;YAAE,CAAC,CAAC;YACtC;UACF;YACE;QAAM;QAEV;QACA,IAAIkD,SAAS,GAAGzB,IAAI,CAACC,KAAK,CAACsB,KAAK,CAACrB,SAAS,CAACqB,KAAK,CAACpB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/D,MAAMuB,WAAW,GAAGD,SAAS,CAACd,SAAS,CAACT,SAAS,CAACuB,SAAS,CAACd,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAACa,SAAS,CAACd,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,CAAC;QAC9H,IAAIY,cAAc,KAAK,CAAC,EAAE;UACxB,IAAI,CAACnB,QAAQ,CAAC;YAAC1B,gBAAgB,EAACZ,OAAO,CAAC,uBAAuB,GAAC2D,WAAW,GAAC,MAAM;UAAC,CAAC,CAAC;QACvF,CAAC,MAAM;UACL,IAAI,CAACrB,QAAQ,CAAC;YAACzB,kBAAkB,EAACb,OAAO,CAAC,uBAAuB,GAAC2D,WAAW,GAAC,MAAM;UAAC,CAAC,CAAC;QACzF;MAEF,CAAC,MAAI;QACH/D,MAAM,CAAC,2BAA2B,CAAC;MACrC;IAEF,CAAC,CAAC;;IAEF;IACAD,MAAM,CAACgC,GAAG,CAAC,wBAAwB,CAAC,CAACC,EAAE,CAAC,wBAAwB,EAAE,CAACgC,SAAS,EAAEC,MAAM,KAAK;MACvF;MACA;MACA,QAAQ,IAAI,CAACC,mBAAmB,CAAC,CAAC,EAAC,CAAC,CAAC;QACnC,KAAK,CAAC;UACJ,IAAI,CAACxB,QAAQ,CAAC;YAAC7B,oBAAoB,EAAC;UAAE,CAAC,CAAC;UACxC;QACF,KAAK,CAAC;UACJ,IAAI,CAAC6B,QAAQ,CAAC;YAAC5B,sBAAsB,EAAC;UAAE,CAAC,CAAC;UAC1C;QACF,KAAK,CAAC;UACJ,IAAI,CAAC4B,QAAQ,CAAC;YAAC3B,oBAAoB,EAAC;UAAE,CAAC,CAAC;UACxC;QACF;UACEf,MAAM,CAAC,wCAAwC,CAAC;UAChD;MAAM;;MAGV;MACA,MAAM+D,WAAW,GAAGC,SAAS,CAACzB,SAAS,CAACyB,SAAS,CAACf,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAACe,SAAS,CAACf,WAAW,CAAC,GAAG,CAAC,CAAC,EAAQ;MACxG,IAAIgB,MAAM,KAAK,CAAC,EAAE;QAChB,IAAI,CAACvB,QAAQ,CAAC;UAAC1B,gBAAgB,EAACZ,OAAO,CAAC,uBAAuB,GAAC2D,WAAW,GAAC,MAAM;QAAC,CAAC,CAAC;MACvF,CAAC,MAAM;QACL,IAAI,CAACrB,QAAQ,CAAC;UAACzB,kBAAkB,EAACb,OAAO,CAAC,uBAAuB,GAAC2D,WAAW,GAAC,MAAM;QAAC,CAAC,CAAC;MACzF;IAIF,CAAC,CAAC;IAGFhE,MAAM,CAACgC,GAAG,CAAC,UAAU,CAAC,CAACC,EAAE,CAAC,UAAU,EAAE,CAACC,OAAO,EAAEkC,YAAY,KAAK;MAC/D;MACA,IAAI1B,WAAW,GAAGJ,IAAI,CAACC,KAAK,CAACL,OAAO,CAACM,SAAS,CAACN,OAAO,CAACO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;MACrE,IAAI4B,gBAAgB,GAAG/B,IAAI,CAACC,KAAK,CAAC6B,YAAY,CAAC5B,SAAS,CAAC4B,YAAY,CAAC3B,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;MACpF;MACA,IAAIzC,MAAM,CAAC2B,EAAE,KAAKe,WAAW,CAACW,YAAY,EAAE;QAC1C,IAAI,CAACV,QAAQ,CAAC;UAACtB,YAAY,EAACiB,IAAI,CAACM,SAAS,CAACF,WAAW,CAACY,UAAU;QAAC,CAAC,CAAC;QACpE,IAAI,CAACX,QAAQ,CAAC;UAACrB,mBAAmB,EAACgB,IAAI,CAACM,SAAS,CAACF,WAAW,CAACa,UAAU;QAAC,CAAC,CAAC;MAC7E,CAAC,MAAM;QACL;QACA,IAAI,CAACZ,QAAQ,CAAC;UAACrB,mBAAmB,EAACgB,IAAI,CAACM,SAAS,CAACF,WAAW,CAACY,UAAU;QAAC,CAAC,CAAC;QAC3E,IAAI,CAACX,QAAQ,CAAC;UAACtB,YAAY,EAACiB,IAAI,CAACM,SAAS,CAACF,WAAW,CAACa,UAAU;QAAC,CAAC,CAAC;MACtE;MACA;MACA,IAAIvD,MAAM,CAAC2B,EAAE,KAAKe,WAAW,CAAC4B,SAAS,EAAC;QACtCrE,MAAM,CAAC,YAAY,CAAC;MACtB;MAEA,IAAIsE,GAAG,GAAG,iBAAiB,GAAE7B,WAAW,CAAC8B,aAAa,GAAG,SAAS,GAAG,OAAO9B,WAAW,CAAC8B,aAAc;MACtGvE,MAAM,CAACsE,GAAG,CAAC;MAEX,IAAI7B,WAAW,CAAC8B,aAAa,KAAK,CAAC,EAAC;QAClC,IAAI,CAAC7B,QAAQ,CAAC;UAACxB,mBAAmB,EAAC;QAAE,CAAC,CAAC;MACzC,CAAC,MAAM,IAAIuB,WAAW,CAAC8B,aAAa,KAAK,CAAC,EAAC;QACzCC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,YAAY,CAAC,YAAY,EAAC,QAAQ,CAAC;MAEtE;MAEA,IAAI,CAAChC,QAAQ,CAAC;QACZ1B,gBAAgB,EAAC,EAAE;QACnBC,kBAAkB,EAAC;MACrB,CAAC,CAAC;MAGF,IAAGkD,YAAY,KAAK,CAAC,CAAC,EAAE;QAAG;QAC3B;QACA,MAAMJ,WAAW,GAAGK,gBAAgB,CAACpB,SAAS,CAACT,SAAS,CAAC6B,gBAAgB,CAACpB,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAACmB,gBAAgB,CAACpB,SAAS,CAACC,WAAW,CAAC,GAAG,CAAC,CAAC;;QAEnJ;QACA,IAAI,IAAI,CAAC3C,KAAK,CAACC,aAAa,KAAK,EAAE,EAAE;UACnC,IAAI,CAACmC,QAAQ,CAAC;YACZhC,gBAAgB,EAACN,OAAO,CAAC,uBAAuB,GAAC2D,WAAW,GAAC,MAAM,CAAC;YACpExD,aAAa,EAAC4D;UAChB,CAAC,CAAC;QACJ,CAAC,MAAM,IAAI,IAAI,CAAC7D,KAAK,CAACE,eAAe,KAAK,EAAE,EAAE;UAC5C,IAAI,CAACkC,QAAQ,CAAC;YACZ/B,kBAAkB,EAACP,OAAO,CAAC,uBAAuB,GAAC2D,WAAW,GAAC,MAAM,CAAC;YACtEvD,eAAe,EAAC2D;UAClB,CAAC,CAAC;QACJ,CAAC,MAAM;UAAO;UACZ,IAAI,CAACzB,QAAQ,CAAC;YACZ9B,gBAAgB,EAACR,OAAO,CAAC,uBAAuB,GAAC2D,WAAW,GAAC,MAAM,CAAC;YACpEtD,aAAa,EAAC0D;UAChB,CAAC,CAAC;QACJ;QAEA,IAAI,IAAI,CAAC7D,KAAK,CAACO,oBAAoB,KAAK,EAAE,EAAE;UAC1C,IAAI,CAAC6B,QAAQ,CAAC;YACZ7B,oBAAoB,EAACV;UACvB,CAAC,CAAC;QACJ,CAAC,MAAM,IAAI,IAAI,CAACG,KAAK,CAACQ,sBAAsB,KAAK,EAAE,EAAE;UACnD,IAAI,CAAC4B,QAAQ,CAAC;YACZ5B,sBAAsB,EAACX;UACzB,CAAC,CAAC;QACJ,CAAC,MAAM;UAAO;UACZ,IAAI,CAACuC,QAAQ,CAAC;YACZ3B,oBAAoB,EAACZ;UACvB,CAAC,CAAC;QACJ;MACF;IAGA,CAAC,CAAC;IAEFJ,MAAM,CAACgC,GAAG,CAAC,aAAa,CAAC,CAACC,EAAE,CAAC,aAAa,EAAE,MAAM;MAChDhC,MAAM,CAAC,qBAAqB,CAAC;IAC/B,CAAC,CAAC;IAEFD,MAAM,CAACgC,GAAG,CAAC,0BAA0B,CAAC,CAACC,EAAE,CAAC,0BAA0B,EAAE,MAAM;MAC1EhC,MAAM,CAAC,+BAA+B,CAAC;IACzC,CAAC,CAAC;IAEFD,MAAM,CAACgC,GAAG,CAAC,qBAAqB,CAAC,CAACC,EAAE,CAAC,qBAAqB,EAAE,MAAM;MAChEhC,MAAM,CAAC,wCAAwC,CAAC;IAClD,CAAC,CAAC;EACJ;EAGAkE,mBAAmB,CAACS,GAAG,EAAEC,GAAG,EAAE;IAC5B;IACA,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIH,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;EAC1D;EAGAK,MAAM,GAAG;IACP,oBACE;MAAA,wBACA;QAAK,SAAS,EAAC,uBAAuB;QAAA,wBAEtC;UAAK,SAAS,EAAC,KAAK;UAAA,wBAClB;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,uBAAuB;YAAC,OAAO,EAAE,IAAI,CAACxD,WAAY;YAAA,uBAC3E;cAAK,GAAG,EAAE,IAAI,CAAClB,KAAK,CAACO,oBAAqB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QACpD,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,wBAAwB;YAAC,OAAO,EAAE,IAAI,CAACW,WAAY;YAAA,uBAC5E;cAAK,GAAG,EAAE,IAAI,CAAClB,KAAK,CAACQ,sBAAuB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QACtD,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,uBAAuB;YAAC,OAAO,EAAE,IAAI,CAACU,WAAY;YAAA,uBAC3E;cAAK,GAAG,EAAE,IAAI,CAAClB,KAAK,CAACS,oBAAqB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QACpD,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,oBAAoB;YAAC,OAAO,EAAE,IAAI,CAACS,WAAY;YAAA,uBACxE;cAAK,SAAS,EAAC,WAAW;cAAA,UAAE,IAAI,CAAClB,KAAK,CAACe;YAAmB;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAC7D;QAAA;UAAA;UAAA;UAAA;QAAA,QACF,eACN;UAAK,SAAS,EAAC,KAAK;UAAA,wBAClB;YAAK,SAAS,EAAC,QAAQ;YAAA,uBAAC;cAAK,GAAG,EAAElB,YAAa;cAAC,EAAE,EAAC,OAAO;cAAC,KAAK,EAAE;gBAAC8E,KAAK,EAAE;cAAM;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAAM,eAC/F;YAAK,SAAS,EAAC,QAAQ;YAAA,uBAAC;cAAK,GAAG,EAAE,IAAI,CAAC3E,KAAK,CAACY,mBAAoB;cAAC,KAAK,EAAE;gBAAC+D,KAAK,EAAE,MAAM;gBAACC,SAAS,EAAE;cAAe;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAAM,eACjI;YAAK,SAAS,EAAC,QAAQ;YAAA,uBAAC;cAAK,GAAG,EAAE,IAAI,CAAC5E,KAAK,CAACU,gBAAiB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAAM,eAClF;YAAK,SAAS,EAAC,QAAQ;YAAA,uBAAC;cAAK,GAAG,EAAE,IAAI,CAACV,KAAK,CAACW,kBAAmB;cAAC,GAAG,EAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAAM;QAAA;UAAA;UAAA;UAAA;QAAA,QAChF,eACN;UAAK,SAAS,EAAC,KAAK;UAAA,wBAClB;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,sBAAsB;YAAC,OAAO,EAAE,IAAI,CAACO,WAAY;YAAA,uBAC1E;cAAK,GAAG,EAAE,IAAI,CAAClB,KAAK,CAACI,gBAAiB;cAAC,GAAG,EAAC,EAAE;cAAC,KAAK,EAAE;gBAAEyE,QAAQ,EAAG,UAAU;gBAACC,MAAM,EAAE;cAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAC3F,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,uBAAuB;YAAC,OAAO,EAAE,IAAI,CAAC5D,WAAY;YAAA,uBAC3E;cAAK,GAAG,EAAE,IAAI,CAAClB,KAAK,CAACK,kBAAmB;cAAC,GAAG,EAAC,EAAE;cAAC,KAAK,EAAE;gBAACwE,QAAQ,EAAG,UAAU;gBAACC,MAAM,EAAG;cAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAC7F,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,sBAAsB;YAAC,OAAO,EAAE,IAAI,CAAC5D,WAAY;YAAA,uBAC1E;cAAK,GAAG,EAAE,IAAI,CAAClB,KAAK,CAACM,gBAAiB;cAAC,GAAG,EAAC,EAAE;cAAC,KAAK,EAAE;gBAACuE,QAAQ,EAAG,UAAU;gBAACC,MAAM,EAAG;cAAC;YAAE;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAC3F,eACN;YAAK,SAAS,EAAC,QAAQ;YAAC,EAAE,EAAC,mBAAmB;YAAC,OAAO,EAAE,IAAI,CAAC5D,WAAY;YAAA,uBACvE;cAAK,SAAS,EAAC,WAAW;cAAA,UAAE,IAAI,CAAClB,KAAK,CAACc;YAAY;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QACtD;QAAA;UAAA;UAAA;UAAA;QAAA,QACF;MAAA;QAAA;QAAA;QAAA;MAAA,QACA,eACN,QAAC,cAAc;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA,gBACjB;EAEL;AACF"},"metadata":{},"sourceType":"module"}