{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loreb\\\\Documents\\\\Unipr\\\\Terzo_anno\\\\Primo_semestre\\\\Tecnologie_internet\\\\Briscola\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 3\n}, this));\nvar idPartita = 0;\n/*\n  socket.on('connect', () => {\n    window.alert(`Client connesso con id ${socket.id}`)\n    socket.on('partitaIniziata',(partita, mano) => {\n      idPartita = partita.IdPartita;      // memorizziamo nel client l'id della partita\n      window.alert(idPartita)\n      \n      /*\n      for (i = 0; i < partita.Mazzo.length; i++){\n        \n      }\n      // manca chiusura commento multiline\n    })\n  })\n*/\n\nexport function cartaGiocata(id) {\n  window.alert(id);\n\n  if (socket.connected) {\n    // verifichiamo di essere connessi prima di inviare il click\n    socket.emit(\"cartaGiocata\");\n  }\n}\nexport function startGame(modalità) {\n  socket.emit('startGame', modalità); // Nell'attesa della risposta (evento socket partitaIniziata) si potrebbe rendere visibile il simbolo di attesa\n}\nexport function access(accessType) {\n  // accessType può essere \"login\" o \"signup\"\n  window.alert(\"Nel metodo di accesso\");\n  socket.on('connect', () => {\n    window.alert(`Client connesso con id ${socket.id}`); // connessione necessaria col server\n\n    var email = document.getElementById(\"exampleInputEmail1\").value;\n    var password = document.getElementById(\"exampleInputPassword1\").value;\n    socket.emit('access', accessType, email, password);\n    window.alert(\"Evento accesso creato\");\n    socket.on('accessOutcome', accessOutcome => {\n      window.alert(\"Ricezione evento accesso\");\n\n      if (accessOutcome === false) {\n        //document.getElementById(\"\").setAttribute()\n        console.log(\"Autenticazione fallita\");\n      } else {\n        document.location.href = document.location + \"/selectGame\";\n      }\n    });\n  }); //var switchAccess = document.getElementById(\"flexSwitchCheckDefault\").value();       // switch che dice se si sta facendo signup o login\n\n  if (accessType === \"login\") {// Login\n  } else {// Signup\n  }\n} // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","BrowserRouter","io","socket","root","createRoot","document","getElementById","render","idPartita","cartaGiocata","id","window","alert","connected","emit","startGame","modalità","access","accessType","on","email","value","password","accessOutcome","console","log","location","href"],"sources":["C:/Users/loreb/Documents/Unipr/Terzo_anno/Primo_semestre/Tecnologie_internet/Briscola/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\nimport { io } from 'socket.io-client'\n\nconst socket = io('http://localhost:3001')\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>\n);\n\nvar idPartita = 0;\n\n/*\n  socket.on('connect', () => {\n    window.alert(`Client connesso con id ${socket.id}`)\n    socket.on('partitaIniziata',(partita, mano) => {\n      idPartita = partita.IdPartita;      // memorizziamo nel client l'id della partita\n      window.alert(idPartita)\n      \n      /*\n      for (i = 0; i < partita.Mazzo.length; i++){\n        \n      }\n      // manca chiusura commento multiline\n    })\n  })\n*/\n\nexport function cartaGiocata(id){\n  window.alert(id);\n  if (socket.connected){    // verifichiamo di essere connessi prima di inviare il click\n    socket.emit(\"cartaGiocata\", )\n  }\n}\n\nexport function startGame(modalità){\n  socket.emit('startGame', modalità);\n  // Nell'attesa della risposta (evento socket partitaIniziata) si potrebbe rendere visibile il simbolo di attesa\n}\n\nexport function access(accessType){\n  // accessType può essere \"login\" o \"signup\"\n  window.alert(\"Nel metodo di accesso\");\n  socket.on('connect', () => {\n    window.alert(`Client connesso con id ${socket.id}`)       // connessione necessaria col server\n    var email = document.getElementById(\"exampleInputEmail1\").value;\n    var password = document.getElementById(\"exampleInputPassword1\").value;\n    socket.emit('access',accessType, email, password); \n    window.alert(\"Evento accesso creato\")\n    socket.on('accessOutcome',(accessOutcome) => {\n      window.alert(\"Ricezione evento accesso\")\n      if (accessOutcome === false) {\n        //document.getElementById(\"\").setAttribute()\n        console.log(\"Autenticazione fallita\")\n      } else {\n        document.location.href = document.location + \"/selectGame\";\n      }\n    })\n  })\n\n\n  //var switchAccess = document.getElementById(\"flexSwitchCheckDefault\").value();       // switch che dice se si sta facendo signup o login\n  if (accessType === \"login\"){\n    // Login\n\n  }else{\n    // Signup\n\n  }  \n  \n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AACA,SAASC,EAAT,QAAmB,kBAAnB;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;AAEA,MAAME,IAAI,GAAGN,QAAQ,CAACO,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eACE,QAAC,aAAD;EAAA,uBACE,QAAC,KAAD,CAAO,UAAP;IAAA,uBACE,QAAC,GAAD;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF;AAQA,IAAIC,SAAS,GAAG,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,EAAtB,EAAyB;EAC9BC,MAAM,CAACC,KAAP,CAAaF,EAAb;;EACA,IAAIR,MAAM,CAACW,SAAX,EAAqB;IAAK;IACxBX,MAAM,CAACY,IAAP,CAAY,cAAZ;EACD;AACF;AAED,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA4B;EACjCd,MAAM,CAACY,IAAP,CAAY,WAAZ,EAAyBE,QAAzB,EADiC,CAEjC;AACD;AAED,OAAO,SAASC,MAAT,CAAgBC,UAAhB,EAA2B;EAChC;EACAP,MAAM,CAACC,KAAP,CAAa,uBAAb;EACAV,MAAM,CAACiB,EAAP,CAAU,SAAV,EAAqB,MAAM;IACzBR,MAAM,CAACC,KAAP,CAAc,0BAAyBV,MAAM,CAACQ,EAAG,EAAjD,EADyB,CACiC;;IAC1D,IAAIU,KAAK,GAAGf,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8Ce,KAA1D;IACA,IAAIC,QAAQ,GAAGjB,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,EAAiDe,KAAhE;IACAnB,MAAM,CAACY,IAAP,CAAY,QAAZ,EAAqBI,UAArB,EAAiCE,KAAjC,EAAwCE,QAAxC;IACAX,MAAM,CAACC,KAAP,CAAa,uBAAb;IACAV,MAAM,CAACiB,EAAP,CAAU,eAAV,EAA2BI,aAAD,IAAmB;MAC3CZ,MAAM,CAACC,KAAP,CAAa,0BAAb;;MACA,IAAIW,aAAa,KAAK,KAAtB,EAA6B;QAC3B;QACAC,OAAO,CAACC,GAAR,CAAY,wBAAZ;MACD,CAHD,MAGO;QACLpB,QAAQ,CAACqB,QAAT,CAAkBC,IAAlB,GAAyBtB,QAAQ,CAACqB,QAAT,GAAoB,aAA7C;MACD;IACF,CARD;EASD,CAfD,EAHgC,CAqBhC;;EACA,IAAIR,UAAU,KAAK,OAAnB,EAA2B,CACzB;EAED,CAHD,MAGK,CACH;EAED;AAEF,C,CAGD;AACA;AACA;;AACAnB,eAAe"},"metadata":{},"sourceType":"module"}