[{"C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\index.js":"1","C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\App.js":"3","C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\components\\LoginPage.js":"4","C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\components\\Navbar.js":"5","C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\components\\GameField.js":"6","C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\components\\InitialPage.js":"7","C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\components\\Wallpaper.js":"8"},{"size":1517,"mtime":1666864754780,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1665676381802,"results":"11","hashOfConfig":"10"},{"size":1148,"mtime":1668616331586,"results":"12","hashOfConfig":"10"},{"size":5347,"mtime":1668623148414,"results":"13","hashOfConfig":"10"},{"size":2232,"mtime":1668616331597,"results":"14","hashOfConfig":"10"},{"size":15534,"mtime":1668616331589,"results":"15","hashOfConfig":"10"},{"size":3733,"mtime":1668621968282,"results":"16","hashOfConfig":"10"},{"size":1256,"mtime":1668623187063,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2nvrxa",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\index.js",[],[],"C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\App.js",["45","46"],[],"C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\components\\LoginPage.js",["47"],[],"C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\components\\Navbar.js",["48","49","50","51","52"],[],"import React, {Component} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { notify } from '../App.js';\r\n\r\nexport class Navbar extends Component {\r\n  state = {\r\n    id:this.props.PlayerUsername\r\n  }\r\n\r\n  // Funzione asincona per le richieste HTTP \r\n  async pageRequest(page){\r\n    var response = await fetch(page, {\r\n      method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n\r\n    // Visualizzazione risposta (quando pronta) in arrivo dopo richiesta HTTP\r\n    const text = await response.text()\r\n    window.alert(text)\r\n  }\r\n\r\n\r\n  render (){\r\n    return (\r\n  <>\r\n  <nav className=\"navbar navbar-expand-lg bg-light\">\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">Briscola</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarScroll\" aria-controls=\"navbarScroll\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarScroll\">\r\n        <ul className=\"navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll\" >\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" target=\"_blank\" /*href=\"https://it.wikipedia.org/wiki/Briscola#Origine_ed_etimologia\"*/ onClick={() => {this.pageRequest(\"/StoriaBriscola\")}}\r\n            >Storia del gioco</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" target=\"_blank\" /*href=\"https://it.wikipedia.org/wiki/Briscola#Regole\"*/ onClick={() => {this.pageRequest(\"/RegoleBriscola\")}}\r\n            >Regole</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" style={{float:\"right\"}}>Il tuo username è: {this.props.PlayerUsername}</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n",[],"C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\components\\GameField.js",["53","54","55","56","57","58","59"],[],"import {React, Component} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {socket} from \"./LoginPage.js\"\r\nimport { notify } from '../App.js'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Dots, Waves, Spinner, TrinitySpinner, MinimalSpinner } from 'loading-animations-react';\r\nimport { ReactSession } from 'react-client-session';\r\n\r\n// Immagine retro della carta \r\nconst cartaCoperta = require('../Images/Retro.jpg');\r\n\r\n\r\nexport class GameField extends Component {\r\n  state = {\r\n    primaCartaMia : \"\",\r\n    secondaCartaMia : \"\",\r\n    terzaCartaMia : \"\",\r\n    immPrimaCartaMia : \"\",\r\n    immSecondaCartaMia : \"\",\r\n    immTerzaCartaMia : \"\",\r\n    primaCartaAvversario : \"\",\r\n    secondaCartaAvversario : \"\",\r\n    terzaCartaAvversario : \"\",\r\n    primaCartaTavola : \"\",\r\n    secondaCartaTavola : \"\",\r\n    immBriscolaEstratta : \"\",\r\n    briscolaEstratta: \"\",\r\n    punteggioMio : 0,\r\n    punteggioAvversario : 0,          \r\n    idPartita : 0,\r\n    visibilityMazzo : \"hidden\",\r\n    visibilityField : \"hidden\"\r\n  };\r\n    \r\n  \r\n\r\n  \r\n  handleClick = event => {      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\r\n    var id = event.currentTarget.id     // Elemento sul quale è stato fatto il click\r\n    //window.alert(id);\r\n    \r\n    if (socket.connected){    // verifichiamo di essere connessi prima di inviare il click\r\n      switch (id) {\r\n        case \"FirstPlayerFirstCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia)       \r\n          break;\r\n        }\r\n        case \"FirstPlayerSecondCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia)\r\n          break;\r\n        }\r\n        case \"FirstPlayerThirdCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia)\r\n          break;\r\n        }\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    const username = ReactSession.get(\"User\");\r\n    if (username === undefined){\r\n      notify(\"non hai fatto il login\")\r\n      document.location.href = \"/\"; \r\n    }\r\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano, briscolaEstrattaParam) => {\r\n      notify(\"PARTITA INIZIATA, MIOID: \"+ socket.id)\r\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \r\n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\")))              // , mano.lastIndexOf(\"}\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))     // , partita.lastIndexOf(\"}\")\r\n\r\n      // Rendiamo il campo visibile\r\n      this.setState({visibilityField:\"visible\", visibilityMazzo: \"visible\"})\r\n\r\n\r\n      // Settiamo la mano iniziale\r\n      this.setState({primaCartaMia: JSON.stringify(manoJSON.PrimaCarta)})\r\n      this.setState({secondaCartaMia: JSON.stringify(manoJSON.SecondaCarta)})\r\n      this.setState({terzaCartaMia: JSON.stringify(manoJSON.TerzaCarta)})\r\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\r\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"))\r\n      // Non si può fare require(manoJSON.PrimaCarta.ImagePath)\r\n      this.setState({immPrimaCartaMia:require(\"../Images/Napoletane/\" + percorsoPrima + \".jpg\")})\r\n      this.setState({immSecondaCartaMia:require(\"../Images/Napoletane/\" + percorsoSeconda + \".jpg\")})\r\n      this.setState({immTerzaCartaMia:require(\"../Images/Napoletane/\" + percorsoTerza + \".jpg\")})\r\n\r\n      // Carte avversario\r\n      this.setState({primaCartaAvversario:cartaCoperta})\r\n      this.setState({secondaCartaAvversario:cartaCoperta})\r\n      this.setState({terzaCartaAvversario:cartaCoperta})\r\n\r\n      // Punteggio iniziale, 0 - 0 TODO: statico?\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n      }\r\n\r\n      this.setState({idPartita:JSON.stringify(partitaJSON.IdPartita)})\r\n\r\n      briscolaEstrattaParam = JSON.parse(briscolaEstrattaParam.substring(briscolaEstrattaParam.indexOf(\"{\")))\r\n      const cartaBriscolaEstratta = briscolaEstrattaParam.ImagePath.substring(briscolaEstrattaParam.ImagePath.lastIndexOf(\"/\")+1,briscolaEstrattaParam.ImagePath.lastIndexOf(\".\"))\r\n      this.setState({immBriscolaEstratta:require(\"../Images/Napoletane/\"+cartaBriscolaEstratta+\".jpg\")})\r\n      this.setState({briscolaEstratta:JSON.stringify(briscolaEstrattaParam)})\r\n\r\n\r\n      // Evento che viene scatenato quando si preme il pulsante \"indietro\" del browser\r\n      window.addEventListener('popstate', (event) => {\r\n        if (this.state.idPartita !== 0){\r\n          notify(\"La partita verrà conclusa\")\r\n        }\r\n        socket.emit(\"AggiornaID\", username)\r\n        socket.emit(\"abbandonaPartita\")\r\n      });\r\n    })\r\n  \r\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\r\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta, numeroInTavola) =>{ \r\n      if (outcome){\r\n        // se esito positivo alla richiesta di giocare una carta\r\n        switch (carta) {\r\n          case this.state.primaCartaMia:\r\n            this.setState({primaCartaMia:\"\"})     // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\r\n            this.setState({immPrimaCartaMia : \"\"})\r\n            break;\r\n          case this.state.secondaCartaMia:\r\n            this.setState({secondaCartaMia:\"\"})\r\n            this.setState({immSecondaCartaMia : \"\"})\r\n            break;\r\n          case this.state.terzaCartaMia:\r\n            this.setState({terzaCartaMia:\"\"})\r\n            this.setState({immTerzaCartaMia : \"\"})\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        // Visualizzazione carta in tavola \r\n        var cartaJSON = JSON.parse(carta.substring(carta.indexOf(\"{\")))\r\n        const numeroCarta = cartaJSON.ImagePath.substring(cartaJSON.ImagePath.lastIndexOf(\"/\")+1,cartaJSON.ImagePath.lastIndexOf(\".\"))        \r\n        if (numeroInTavola === 1) {\r\n          this.setState({primaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n        } else {\r\n          this.setState({secondaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n        }\r\n      \r\n      }else{\r\n        notify(\"Non puoi giocare la carta\")\r\n      }\r\n\r\n    })\r\n\r\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\r\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", (imagePath, numero) => {\r\n      var found = false\r\n\r\n      while(!found){\r\n        switch (this.randomNumberInRange(1,3)) {\r\n          case 1:\r\n            if (this.state.primaCartaAvversario !== \"\"){\r\n              found = true\r\n            }\r\n            this.setState({primaCartaAvversario:\"\"})\r\n            break;\r\n          case 2:\r\n            if (this.state.secondaCartaAvversario !== \"\"){\r\n              found = true\r\n            }\r\n            this.setState({secondaCartaAvversario:\"\"})\r\n            break;\r\n          case 3:\r\n            if (this.state.terzaCartaAvversario !== \"\"){\r\n              found = true\r\n            }\r\n            this.setState({terzaCartaAvversario:\"\"})\r\n            break;\r\n          default:\r\n            notify(\"Carta giocata avversario, case default\")\r\n            break;\r\n        }\r\n    }\r\n\r\n      // visualizzazione in tavola della carta giocata\r\n      const numeroCarta = imagePath.substring(imagePath.lastIndexOf(\"/\")+1,imagePath.lastIndexOf(\".\"))        // TODO: funzione?\r\n      if (numero === 1) {\r\n        this.setState({primaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n      } else {\r\n        this.setState({secondaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n      }\r\n\r\n      \r\n\r\n    })\r\n\r\n\r\n    socket.off(\"fineMano\").on(\"fineMano\", (partita, cartaPescata) => {\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))\r\n      var cartaPescataJSON = JSON.parse(cartaPescata.substring(cartaPescata.indexOf(\"{\")))\r\n      // Aggiornamento punteggio\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio2)})\r\n      }\r\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\r\n      if (socket.id === partitaJSON.ChiInizia){\r\n        notify(\"Tocca a me\")\r\n      }\r\n\r\n      var str = \"Carte rimanenti \"+ partitaJSON.CarteRimanenti + \" tipo: \" + typeof(partitaJSON.CarteRimanenti)\r\n      notify(str)\r\n\r\n      if (partitaJSON.CarteRimanenti === 0){\r\n        this.setState({immBriscolaEstratta:\"\"})\r\n        this.setState({visibilityMazzo:\"hidden\"})\r\n      } \r\n      \r\n      this.setState({\r\n        primaCartaTavola:\"\",\r\n        secondaCartaTavola:\"\"\r\n      })\r\n\r\n\r\n      if(cartaPescata !== {}) {  // se non è vuota\r\n      // Rimuovere le carte in tavola e aggiungere quelle in mano\r\n      const numeroCarta = cartaPescataJSON.ImagePath.substring(cartaPescataJSON.ImagePath.lastIndexOf(\"/\")+1,cartaPescataJSON.ImagePath.lastIndexOf(\".\"))\r\n\r\n      // Bisogna capire quale carta è stata giocata per capire dove inserire quella appena pescata\r\n      if (this.state.primaCartaMia === \"\") {\r\n        this.setState({\r\n          immPrimaCartaMia:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\"),\r\n          primaCartaMia:cartaPescata\r\n        })\r\n      } else if (this.state.secondaCartaMia === \"\") {\r\n        this.setState({\r\n          immSecondaCartaMia:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\"),\r\n          secondaCartaMia:cartaPescata\r\n        })\r\n      } else {      // TODO: convertire in else if?\r\n        this.setState({\r\n          immTerzaCartaMia:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\"),\r\n          terzaCartaMia:cartaPescata\r\n        })\r\n      } \r\n\r\n      if (this.state.primaCartaAvversario === \"\") {\r\n        this.setState({\r\n          primaCartaAvversario:cartaCoperta\r\n        })\r\n      } else if (this.state.secondaCartaAvversario === \"\") {\r\n        this.setState({\r\n          secondaCartaAvversario:cartaCoperta\r\n        })\r\n      } else {      // TODO: convertire in else if?\r\n        this.setState({\r\n          terzaCartaAvversario:cartaCoperta\r\n        })\r\n      } \r\n    }\r\n\r\n    })\r\n\r\n    socket.off(\"richiestaAmicoRifiutata\", () => {\r\n      notify(\"Il tuo amico ha rifiutato la richiesta\")\r\n    })\r\n\r\n\r\n    socket.off(\"finePartita\").on(\"finePartita\", (vincitore) => {\r\n      // Rimuoviamo le ultime carte giocate dalla tavola\r\n      this.setState({primaCartaTavola:\"\"})\r\n      this.setState({secondaCartaTavola:\"\"})\r\n\r\n      notify(\"La partita è finita\")\r\n      notify(\"tipo vincitore\" + typeof(vincitore))\r\n      notify(\"tipo socket.id\" + typeof(socket.id))\r\n      (socket.id === vincitore)? notify(\"Hai vinto!\") : notify(\"Hai perso!\")\r\n      window.PopStateEvent()\r\n      \r\n    })\r\n\r\n    socket.off(\"disconnessioneAvversario\").on(\"disconnessioneAvversario\", () => {\r\n      notify(\"L'avversario si è disconnesso\")\r\n    })\r\n\r\n    socket.off(\"abbandonoAvversario\").on(\"abbandonoAvversario\", () => {\r\n      notify(\"L'avversario ha abbandonato la partita\")\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  randomNumberInRange(min, max) {\r\n    // 👇️ get number between min (inclusive) and max (inclusive)\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  \r\n\r\n  render() { \r\n    return (\r\n      <>\r\n      <div style={{\"height\":\"30%\", \"width\":\"30%\", \"margin\":\"40%\", \"visibility\":(this.state.visibilityField === \"hidden\")? \"visible\" : \"hidden\"}} > \r\n        <MinimalSpinner color=\"green\" text=\"Aspettando l'avversario casuale\"/>\r\n      </div>\r\n      <div className=\"BiggerContainer\">\r\n      <div className=\"container bg-success\" style={{visibility:this.state.visibilityField, position:\"fixed\", top:0, right:0, width:\"100vw\", height:\"100vh\"}}>   \r\n      <div className=\"row\">\r\n        <div className=\"col-sm\" id=\"SecondPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.primaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.secondaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.terzaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerPoints\" onClick={this.handleClick}>\r\n          <div className=\"Punteggio rounded-5 bg-light\">{this.state.punteggioAvversario}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={cartaCoperta} id=\"Mazzo\" style={{float: \"left\", visibility: this.state.visibilityMazzo}}></img></div>     \r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={this.state.immBriscolaEstratta} style={{float: \"left\",transform: \"rotate(90deg)\"}}></img></div>      \r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={this.state.primaCartaTavola} alt=\"\"></img></div>\r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={this.state.secondaCartaTavola} alt=\"\"></img></div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\" id=\"FirstPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.immPrimaCartaMia} alt=\"\" style={{ position : \"relative\",bottom: 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.immSecondaCartaMia} alt=\"\" style={{position : \"relative\",bottom : 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.immTerzaCartaMia} alt=\"\" style={{position : \"relative\",bottom : 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerPoints\" onClick={this.handleClick}>\r\n          <div className=\"Punteggio rounded-5 bg-light\">{this.state.punteggioMio}</div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <div style={{height:\"0px\"}}>\r\n        <ToastContainer/>\r\n    </div>\r\n    </div>\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\n","C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\components\\InitialPage.js",["60","61"],[],"C:\\Users\\Lele\\Desktop\\Briscola\\Briscola\\client\\src\\components\\Wallpaper.js",[],[],{"ruleId":"62","severity":1,"message":"63","line":4,"column":9,"nodeType":"64","messageId":"65","endLine":4,"endColumn":15},{"ruleId":"62","severity":1,"message":"66","line":6,"column":9,"nodeType":"64","messageId":"65","endLine":6,"endColumn":20},{"ruleId":"62","severity":1,"message":"67","line":6,"column":26,"nodeType":"64","messageId":"65","endLine":6,"endColumn":31},{"ruleId":"62","severity":1,"message":"68","line":3,"column":10,"nodeType":"64","messageId":"65","endLine":3,"endColumn":16},{"ruleId":"69","severity":1,"message":"70","line":31,"column":7,"nodeType":"71","endLine":31,"endColumn":44},{"ruleId":"69","severity":1,"message":"72","line":38,"column":13,"nodeType":"71","endLine":39,"endColumn":14},{"ruleId":"69","severity":1,"message":"72","line":42,"column":13,"nodeType":"71","endLine":43,"endColumn":14},{"ruleId":"69","severity":1,"message":"72","line":46,"column":13,"nodeType":"71","endLine":46,"endColumn":61},{"ruleId":"62","severity":1,"message":"67","line":5,"column":26,"nodeType":"64","messageId":"65","endLine":5,"endColumn":31},{"ruleId":"62","severity":1,"message":"73","line":7,"column":10,"nodeType":"64","messageId":"65","endLine":7,"endColumn":14},{"ruleId":"62","severity":1,"message":"74","line":7,"column":16,"nodeType":"64","messageId":"65","endLine":7,"endColumn":21},{"ruleId":"62","severity":1,"message":"75","line":7,"column":23,"nodeType":"64","messageId":"65","endLine":7,"endColumn":30},{"ruleId":"62","severity":1,"message":"76","line":7,"column":32,"nodeType":"64","messageId":"65","endLine":7,"endColumn":46},{"ruleId":"77","severity":1,"message":"78","line":333,"column":33,"nodeType":"71","endLine":333,"endColumn":154},{"ruleId":"77","severity":1,"message":"78","line":334,"column":33,"nodeType":"71","endLine":334,"endColumn":148},{"ruleId":"62","severity":1,"message":"67","line":5,"column":26,"nodeType":"64","messageId":"65","endLine":5,"endColumn":31},{"ruleId":"62","severity":1,"message":"79","line":9,"column":10,"nodeType":"64","messageId":"65","endLine":9,"endColumn":19},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'InitialPage' is defined but never used.","'toast' is defined but never used.","'notify' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'Dots' is defined but never used.","'Waves' is defined but never used.","'Spinner' is defined but never used.","'TrinitySpinner' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Wallpaper' is defined but never used."]