[{"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\index.js":"1","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\reportWebVitals.js":"2","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\App.js":"3","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\InitialPage.js":"4","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\GameField.js":"5","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\LoginPage.js":"6","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\Navbar.js":"7"},{"size":1454,"mtime":1666294229400,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1663252821896,"results":"10","hashOfConfig":"9"},{"size":1072,"mtime":1668242796473,"results":"11","hashOfConfig":"9"},{"size":4382,"mtime":1668253164784,"results":"12","hashOfConfig":"9"},{"size":16067,"mtime":1668244993046,"results":"13","hashOfConfig":"9"},{"size":9225,"mtime":1668091846224,"results":"14","hashOfConfig":"9"},{"size":2527,"mtime":1668252999489,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"yf26ic",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"19"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\index.js",[],[],[],"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\App.js",["41","42"],[],"import logo from './logo.svg';\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport {Navbar} from './components/Navbar.js';\nimport {GameField} from './components/GameField.js'\nimport {InitialPage}  from './components/InitialPage.js';\nimport {LoginPage}  from './components/LoginPage.js';\nimport {Routes, Route} from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Dettagli transport non so se sono corretti, sono per l'admin panel teoricamente ma non va\n\nexport const notify = (message) => toast(message);\n\nfunction App() {\n  // TODO: fare in modo che le pagine non iniziali non siano raggiungibili tramire url nel browser\n  return (\n    <>\n    <Routes> \n      <Route path=\"/\" element={<LoginPage/>} />\n      <Route path=\"selectGame\" element={<InitialPage/>} />\n      <Route path=\"selectGame/Partita\" element={<GameField/>}  />\n    </Routes>\n    <div style={{height:\"0px\"}}>\n        <ToastContainer/>\n    </div>\n  </>\n  );\n}\n\nexport default App;\n\n\n","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\InitialPage.js",["43","44","45","46","47"],[],"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\GameField.js",["48","49","50","51","52","53","54"],[],"import {React, Component} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {socket} from \"./LoginPage.js\"\r\nimport { notify } from '../App.js'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Dots, Waves, Spinner, TrinitySpinner, MinimalSpinner } from 'loading-animations-react';\r\n//import \"./GameField.css\";\r\n\r\nconst cartaCoperta = require('../Images/Retro.jpg');\r\nconst username = window.localStorage.getItem(\"User\")\r\n\r\n\r\nexport class GameField extends Component {\r\n  state = {\r\n    primaCartaMia : \"\",\r\n    secondaCartaMia : \"\",\r\n    terzaCartaMia : \"\",\r\n    immPrimaCartaMia : \"\",\r\n    immSecondaCartaMia : \"\",\r\n    immTerzaCartaMia : \"\",\r\n    primaCartaAvversario : \"\",\r\n    secondaCartaAvversario : \"\",\r\n    terzaCartaAvversario : \"\",\r\n    primaCartaTavola : \"\",\r\n    secondaCartaTavola : \"\",\r\n    immBriscolaEstratta : \"\",\r\n    briscolaEstratta: \"\",\r\n    punteggioMio : 0,\r\n    punteggioAvversario : 1,          // sbagliato apposta per vedere se setState corregge TODO: ripristinare a 0\r\n    idPartita : 0,\r\n    messaggioAlert : \"Ciao\",\r\n    visibilityMazzo : \"hidden\",\r\n    visibilityField : \"hidden\"\r\n  };\r\n    \r\n  \r\n\r\n  \r\n  handleClick = event => {      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\r\n    var id = event.currentTarget.id     // Elemento sul quale è stato fatto il click\r\n    //window.alert(id);\r\n    \r\n    if (socket.connected){    // verifichiamo di essere connessi prima di inviare il click\r\n      switch (id) {\r\n        case \"FirstPlayerFirstCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia)       \r\n          break;\r\n        }\r\n        case \"FirstPlayerSecondCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia)\r\n          break;\r\n        }\r\n        case \"FirstPlayerThirdCard\": {\r\n          socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia)\r\n          break;\r\n        }\r\n        default:\r\n          break;\r\n      }\r\n      /*\r\n        case \"Mazzo\": {\r\n          if (this.state.primaCartaTavola === \"\" && this.state.secondaCartaTavola === \"\"){        // Si pesca dal mazzo solo quando non ci sono carte in tavola\r\n            socket.emit(\"pescaDalMazzoReq\", this.state.idPartita)\r\n          }\r\n          \r\n          break;\r\n        }\r\n      */\r\n    }\r\n  };\r\n\r\n  //useEffect(){\r\n  //listener(){\r\n  componentDidMount() {\r\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano, briscolaEstrattaParam) => {\r\n      notify(\"PARTITA INIZIATA, MIOID: \"+ socket.id)\r\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \r\n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\")))              // , mano.lastIndexOf(\"}\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))     // , partita.lastIndexOf(\"}\")\r\n\r\n      // Rendiamo il campo visibile\r\n      this.setState({visibilityField:\"visible\", visibilityMazzo: \"visible\"})\r\n\r\n\r\n      // Settiamo la mano iniziale\r\n      this.setState({primaCartaMia: JSON.stringify(manoJSON.PrimaCarta)})\r\n      this.setState({secondaCartaMia: JSON.stringify(manoJSON.SecondaCarta)})\r\n      this.setState({terzaCartaMia: JSON.stringify(manoJSON.TerzaCarta)})\r\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\r\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\")+1,manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"))\r\n      // Non si può fare require(manoJSON.PrimaCarta.ImagePath)\r\n      this.setState({immPrimaCartaMia:require(\"../Images/Napoletane/\" + percorsoPrima + \".jpg\")})\r\n      this.setState({immSecondaCartaMia:require(\"../Images/Napoletane/\" + percorsoSeconda + \".jpg\")})\r\n      this.setState({immTerzaCartaMia:require(\"../Images/Napoletane/\" + percorsoTerza + \".jpg\")})\r\n\r\n      // Carte avversario\r\n      this.setState({primaCartaAvversario:cartaCoperta})\r\n      this.setState({secondaCartaAvversario:cartaCoperta})\r\n      this.setState({terzaCartaAvversario:cartaCoperta})\r\n\r\n      // Punteggio iniziale, 0 - 0 TODO: statico?\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n      }\r\n\r\n      this.setState({idPartita:JSON.stringify(partitaJSON.IdPartita)})\r\n\r\n      briscolaEstrattaParam = JSON.parse(briscolaEstrattaParam.substring(briscolaEstrattaParam.indexOf(\"{\")))\r\n      const cartaBriscolaEstratta = briscolaEstrattaParam.ImagePath.substring(briscolaEstrattaParam.ImagePath.lastIndexOf(\"/\")+1,briscolaEstrattaParam.ImagePath.lastIndexOf(\".\"))\r\n      this.setState({immBriscolaEstratta:require(\"../Images/Napoletane/\"+cartaBriscolaEstratta+\".jpg\")})\r\n      this.setState({briscolaEstratta:JSON.stringify(briscolaEstrattaParam)})\r\n\r\n\r\n      // Evento che viene scatenato quando si preme il pulsante \"indietro\" del browser\r\n      window.addEventListener('popstate', (event) => {\r\n        if (this.state.idPartita !== 0){\r\n          notify(\"La partita verrà conclusa\")\r\n        }\r\n        socket.emit(\"AggiornaID\", username)\r\n        socket.emit(\"abbandonaPartita\")\r\n      });\r\n    })\r\n  \r\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\r\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta, numeroInTavola) =>{ \r\n      //window.alert(\"Risposta per carta giocata, esito \" + outcome + \" carta: \" + carta)\r\n      if (outcome){\r\n        // se esito positivo alla richiesta di giocare una carta\r\n        switch (carta) {\r\n          case this.state.primaCartaMia:\r\n            this.setState({primaCartaMia:\"\"})     // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\r\n            this.setState({immPrimaCartaMia : \"\"})\r\n            break;\r\n          case this.state.secondaCartaMia:\r\n            this.setState({secondaCartaMia:\"\"})\r\n            this.setState({immSecondaCartaMia : \"\"})\r\n            break;\r\n          case this.state.terzaCartaMia:\r\n            this.setState({terzaCartaMia:\"\"})\r\n            this.setState({immTerzaCartaMia : \"\"})\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        // Visualizzazione carta in tavola \r\n        var cartaJSON = JSON.parse(carta.substring(carta.indexOf(\"{\")))\r\n        const numeroCarta = cartaJSON.ImagePath.substring(cartaJSON.ImagePath.lastIndexOf(\"/\")+1,cartaJSON.ImagePath.lastIndexOf(\".\"))        \r\n        if (numeroInTavola === 1) {\r\n          this.setState({primaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n        } else {\r\n          this.setState({secondaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n        }\r\n      \r\n      }else{\r\n        notify(\"Non puoi giocare la carta\")\r\n      }\r\n\r\n    })\r\n\r\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\r\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", (imagePath, numero) => {\r\n      //notify(\"L'avversario ha giocato una carta in tavola\")\r\n      // si può rimuovere graficamente carta a caso \r\n      var found = false\r\n\r\n      while(!found){\r\n        switch (this.randomNumberInRange(1,3)) {\r\n          case 1:\r\n            if (this.state.primaCartaAvversario !== \"\"){\r\n              found = true\r\n            }\r\n            this.setState({primaCartaAvversario:\"\"})\r\n            break;\r\n          case 2:\r\n            if (this.state.secondaCartaAvversario !== \"\"){\r\n              found = true\r\n            }\r\n            this.setState({secondaCartaAvversario:\"\"})\r\n            break;\r\n          case 3:\r\n            if (this.state.terzaCartaAvversario !== \"\"){\r\n              found = true\r\n            }\r\n            this.setState({terzaCartaAvversario:\"\"})\r\n            break;\r\n          default:\r\n            notify(\"Carta giocata avversario, case default\")\r\n            break;\r\n        }\r\n    }\r\n\r\n      // visualizzazione in tavola della carta giocata\r\n      const numeroCarta = imagePath.substring(imagePath.lastIndexOf(\"/\")+1,imagePath.lastIndexOf(\".\"))        // TODO: funzione?\r\n      if (numero === 1) {\r\n        this.setState({primaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n      } else {\r\n        this.setState({secondaCartaTavola:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\")})\r\n      }\r\n\r\n      \r\n\r\n    })\r\n\r\n\r\n    socket.off(\"fineMano\").on(\"fineMano\", (partita, cartaPescata) => {\r\n      //notify(\"FINE MANO\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))\r\n      var cartaPescataJSON = JSON.parse(cartaPescata.substring(cartaPescata.indexOf(\"{\")))\r\n      // Aggiornamento punteggio\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio2)})\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({punteggioAvversario:JSON.stringify(partitaJSON.Punteggio1)})\r\n        this.setState({punteggioMio:JSON.stringify(partitaJSON.Punteggio2)})\r\n      }\r\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\r\n      if (socket.id === partitaJSON.ChiInizia){\r\n        notify(\"Tocca a me\")\r\n      }\r\n\r\n      var str = \"Carte rimanenti \"+ partitaJSON.CarteRimanenti + \" tipo: \" + typeof(partitaJSON.CarteRimanenti)\r\n      notify(str)\r\n\r\n      if (partitaJSON.CarteRimanenti === 0){\r\n        this.setState({immBriscolaEstratta:\"\"})\r\n        this.setState({visibilityMazzo:\"hidden\"})\r\n      } \r\n      \r\n      this.setState({\r\n        primaCartaTavola:\"\",\r\n        secondaCartaTavola:\"\"\r\n      })\r\n\r\n\r\n      if(cartaPescata !== {}) {  // se non è vuota\r\n      // Rimuovere le carte in tavola e aggiungere quelle in mano\r\n      const numeroCarta = cartaPescataJSON.ImagePath.substring(cartaPescataJSON.ImagePath.lastIndexOf(\"/\")+1,cartaPescataJSON.ImagePath.lastIndexOf(\".\"))\r\n\r\n      // Bisogna capire quale carta è stata giocata per capire dove inserire quella appena pescata\r\n      if (this.state.primaCartaMia === \"\") {\r\n        this.setState({\r\n          immPrimaCartaMia:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\"),\r\n          primaCartaMia:cartaPescata\r\n        })\r\n      } else if (this.state.secondaCartaMia === \"\") {\r\n        this.setState({\r\n          immSecondaCartaMia:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\"),\r\n          secondaCartaMia:cartaPescata\r\n        })\r\n      } else {      // TODO: convertire in else if?\r\n        this.setState({\r\n          immTerzaCartaMia:require(\"../Images/Napoletane/\"+numeroCarta+\".jpg\"),\r\n          terzaCartaMia:cartaPescata\r\n        })\r\n      } \r\n\r\n      if (this.state.primaCartaAvversario === \"\") {\r\n        this.setState({\r\n          primaCartaAvversario:cartaCoperta\r\n        })\r\n      } else if (this.state.secondaCartaAvversario === \"\") {\r\n        this.setState({\r\n          secondaCartaAvversario:cartaCoperta\r\n        })\r\n      } else {      // TODO: convertire in else if?\r\n        this.setState({\r\n          terzaCartaAvversario:cartaCoperta\r\n        })\r\n      } \r\n    }\r\n\r\n    })\r\n\r\n    socket.off(\"richiestaAmicoRifiutata\", () => {\r\n      notify(\"Il tuo amico ha rifiutato la richiesta\")\r\n    })\r\n\r\n\r\n    socket.off(\"finePartita\").on(\"finePartita\", (vincitore) => {\r\n      // Rimuoviamo le ultime carte giocate dalla tavola\r\n      this.setState({primaCartaTavola:\"\"})\r\n      this.setState({secondaCartaTavola:\"\"})\r\n\r\n      notify(\"La partita è finita\")\r\n      notify(\"tipo vincitore\" + typeof(vincitore))\r\n      notify(\"tipo socket.id\" + typeof(socket.id))\r\n      (socket.id === vincitore)? notify(\"Hai vinto!\") : notify(\"Hai perso!\")\r\n      window.PopStateEvent()\r\n      \r\n    })\r\n\r\n    socket.off(\"disconnessioneAvversario\").on(\"disconnessioneAvversario\", () => {\r\n      notify(\"L'avversario si è disconnesso\")\r\n    })\r\n\r\n    socket.off(\"abbandonoAvversario\").on(\"abbandonoAvversario\", () => {\r\n      notify(\"L'avversario ha abbandonato la partita\")\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  randomNumberInRange(min, max) {\r\n    // 👇️ get number between min (inclusive) and max (inclusive)\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  \r\n\r\n  render() { \r\n    return (\r\n      <>\r\n      <div style={{\"height\":\"30%\", \"width\":\"30%\", \"margin\":\"40%\", \"visibility\":(this.state.visibilityField === \"hidden\")? \"visible\" : \"hidden\"}} > \r\n        <MinimalSpinner color=\"green\" text=\"Aspettando l'avversario casuale\"/>\r\n      </div>\r\n      <div className=\"BiggerContainer\">\r\n      <div className=\"container bg-success\" style={{visibility:this.state.visibilityField, position:\"fixed\", top:0, right:0, width:\"100vw\", height:\"100vh\"}}>   \r\n      <div className=\"row\">\r\n        <div className=\"col-sm\" id=\"SecondPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.primaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.secondaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.terzaCartaAvversario} alt=\"\"></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"SecondPlayerPoints\" onClick={this.handleClick}>\r\n          <div className=\"Punteggio rounded-5 bg-light\">{this.state.punteggioAvversario}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={cartaCoperta} id=\"Mazzo\" style={{float: \"left\", visibility: this.state.visibilityMazzo}}></img></div>     \r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={this.state.immBriscolaEstratta} style={{float: \"left\",transform: \"rotate(90deg)\"}}></img></div>      \r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={this.state.primaCartaTavola} alt=\"\"></img></div>\r\n        <div className=\"col-sm\"><img className=\"rounded-4\" src={this.state.secondaCartaTavola} alt=\"\"></img></div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\" id=\"FirstPlayerFirstCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.immPrimaCartaMia} alt=\"\" style={{ position : \"relative\",bottom: 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerSecondCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.immSecondaCartaMia} alt=\"\" style={{position : \"relative\",bottom : 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerThirdCard\" onClick={this.handleClick}>\r\n          <img className=\"rounded-4\" src={this.state.immTerzaCartaMia} alt=\"\" style={{position : \"relative\",bottom : 0}}></img>\r\n        </div>\r\n        <div className=\"col-sm\" id=\"FirstPlayerPoints\" onClick={this.handleClick}>\r\n          <div className=\"Punteggio rounded-5 bg-light\">{this.state.punteggioMio}</div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <div style={{height:\"0px\"}}>\r\n        <ToastContainer/>\r\n    </div>\r\n    </div>\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\n","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\LoginPage.js",["55"],[],"import React, {Component} from 'react'\r\n//import Sfondo1 from 'Images/SfondoIniziale.jpg';\r\nimport { io } from 'socket.io-client'\r\nimport { notify } from '../App.js'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n//import Spinner from \"./Spinner.js\"\r\n/*\r\nconst Sfondo1 = require(\"../Images/SfondoIniziale1.jpg\")\r\nconst Sfondo2 = require(\"../Images/SfondoIniziale2.jpg\")\r\nconst Sfondo3 = require(\"../Images/SfondoIniziale3.jpg\")\r\n*/\r\n\r\n// messo qua e importato da altre parti perchè pare essere la prima pagina compilata\r\nexport const socket = io('http://localhost:3001',\r\n{\r\n    transports: ['websocket', 'polling', 'flashsocket'],\r\n    withCredentials: false\r\n})\r\n\r\n\r\n\r\nexport class LoginPage extends Component {\r\n  state = {\r\n    visibilityTextBox: \"hidden\",\r\n    visibilitySpinner: \"hidden\",\r\n    access: \"login\"\r\n    }  \r\n\r\n    /*\r\n    switchSpinnerState(){\r\n        if (this.state.visibilitySpinner === \"hidden\")\r\n            this.setState({visibilitySpinner:\"visible\"})\r\n        else            \r\n            this.setState({visibilitySpinner:\"hidden\"})   \r\n    }\r\n    */\r\n\r\n    access(accessType){\r\n        // accessType può essere \"login\" o \"signup\"\r\n        this.setState({visibilitySpinner:\"visible\"})    // switch\r\n        if (!socket.connected){\r\n          socket.on('connect', () => {\r\n            notify(`Client connesso con id ${socket.id}`)       // connessione necessaria col server\r\n          })\r\n        }else{\r\n          notify(`Client connesso con id ${socket.id}`)\r\n          var email = document.getElementById(\"InputEmail1\").value;\r\n          var password = document.getElementById(\"InputPassword1\").value;\r\n          if (accessType === \"signup\") {\r\n            var confirm = document.getElementById(\"InputPassword2\").value;\r\n            if (confirm !== password){\r\n              notify(\"Password mismatch, retry\")\r\n              this.setState({visibilitySpinner:\"hidden\"})\r\n              return\r\n            }\r\n          }\r\n          socket.emit('access', accessType, email, password); \r\n        }\r\n    \r\n        socket.off(\"accessOutcome\").on('accessOutcome', (accessOutcome, user) => {\r\n            this.setState({visibilitySpinner:\"hidden\"})  // switch\r\n            if (!accessOutcome) {\r\n            //document.getElementById(\"\").setAttribute()\r\n            notify(\"Autenticazione fallita\");\r\n            } else {\r\n              notify(\"Autenticazione riuscita \");\r\n              window.localStorage.setItem(\"User\",user)\r\n              document.location.href = document.location + \"selectGame\"; // ci si sposta nella pagina per selezionare il tipo di partita\r\n              \r\n            }\r\n        })\r\n    }\r\n    switchAccess(){\r\n        if (this.state.visibilityTextBox === \"hidden\")\r\n            this.setState({visibilityTextBox:\"visible\", access:\"signup\"})\r\n        else            \r\n            this.setState({visibilityTextBox:\"hidden\", access:\"login\"})   \r\n\r\n    }\r\n  render(){\r\n    return (\r\n        <>\r\n            <div className=\"container\" >\r\n                <h1 className=\"display-3\">BriscolaJS</h1>\r\n                <div className=\"form-check form-switch\" style={{float:\"right\", transform:\"scale(1.8)\"}}>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{this.state.visibilityTextBox === \"hidden\"? \"Login\": \"Signup\" }</label>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={() => this.switchAccess()}></input>       \r\n                    </div>\r\n                <div className=\"container-sm\" style={{marginTop:\"10%\", maxWidth:\"350px\"}}>\r\n                    <form>\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"InputEmail1\" className=\"form-label\">Email address</label>\r\n                        <input type=\"email\" className=\"form-control\" id=\"InputEmail1\" aria-describedby=\"emailHelp\"></input>\r\n                        <div id=\"emailHelp\" className=\"form-text\">We'll never share your email with anyone else.</div>\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"InputPassword1\" className=\"form-label\">Password</label>\r\n                        <input type=\"password\" className=\"form-control\" id=\"InputPassword1\"></input>\r\n                    </div>\r\n                    <div className=\"mb-3\" style={{visibility:this.state.visibilityTextBox}} id=\"hiddenTxtPassword\">\r\n                        <label htmlFor=\"InputPassword2\" className=\"form-label\">Write password again</label>\r\n                        <input type=\"password\" className=\"form-control\" id=\"InputPassword2\"></input>\r\n                    </div>\r\n                    <div className=\"mb-3 form-check\">\r\n                        <input type=\"checkbox\" className=\"form-check-input\" id=\"Check1\"></input>\r\n                        <label className=\"form-check-label\" htmlFor=\"Check1\">Check me out</label>\r\n                    </div>\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.access(this.state.access)}>{this.state.access}</button>\r\n                    </form>\r\n\r\n                    <div className=\"spinner-border text-primary\" role=\"status\" id=\"spinner\" style={{visibility:this.state.visibilitySpinner}}>\r\n                        <span className=\"visually-hidden\"  style={{visibility:this.state.visibilitySpinner}}>Loading...</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={{height:\"0px\"}}>\r\n         <ToastContainer/>\r\n         </div>\r\n        </>\r\n      )\r\n  }\r\n}\r\n\r\n\r\n/*\r\n<label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{\"visibility\":this.state.visibilityTextBox}}>Login</label>\r\n\r\n\r\n\r\n// FUNZIONE PER MANDARE RICHIESTA LOGIN/SIGNUP AL SERVER\r\nfunction access(accessType){\r\n    // accessType può essere \"login\" o \"signup\"\r\n    window.alert(\"Nel metodo di accesso\");\r\n    switchSpinnerState()\r\n    if (!socket.connected){\r\n      socket.on('connect', () => {\r\n        window.alert(`Client connesso con id ${socket.id}`)       // connessione necessaria col server\r\n      })\r\n    }else{\r\n      var email = document.getElementById(\"InputEmail1\").value;\r\n      var password = document.getElementById(\"InputPassword1\").value;\r\n      socket.emit('access', accessType, email, password); \r\n      window.alert(\"Evento accesso creato\")\r\n    }\r\n  }\r\n*/\r\n  \r\n\r\n/*\r\n// PRELEVA IL RISULTATO DEL LOGIN/SIGNUP\r\nsocket.on('accessOutcome', (accessOutcome) => {\r\n    window.alert(\"esito: \" + accessOutcome);\r\n    window.alert(\"Ricezione evento accesso: \" + accessOutcome);\r\n    switchSpinnerState()\r\n    if (!accessOutcome) {\r\n      //document.getElementById(\"\").setAttribute()\r\n      window.alert(\"Autenticazione fallita\");\r\n    } else {\r\n      document.location.href = document.location + \"selectGame\"; // ci si sposta nella pagina per selezionare il tipo di partita\r\n      window.alert(\"Autenticazione riuscita\");\r\n    }\r\n  })\r\n\r\n\r\n\r\n  CAROUSEL\r\n\r\n\r\n                  <div className='col no-gutters' style={{height:'100vh',width:'100%'}}>\r\n                    <div id=\"carouselIndicators\" className=\"carousel slide\" data-bs-ride=\"true\">\r\n                        <div className=\"carousel-indicators\">\r\n                            <button type=\"button\" data-bs-target=\"#carouselIndicators\" data-bs-slide-to=\"0\" className=\"active\" aria-current=\"true\" aria-label=\"Slide 1\"></button>\r\n                            <button type=\"button\" data-bs-target=\"#carouselIndicators\" data-bs-slide-to=\"1\" aria-label=\"Slide 2\"></button>\r\n                            <button type=\"button\" data-bs-target=\"#carouselIndicators\" data-bs-slide-to=\"2\" aria-label=\"Slide 3\"></button>\r\n                        </div>\r\n                        <div className=\"carousel-inner\">\r\n                            <div className=\"carousel-item active\">\r\n                            <img src={Sfondo1} className=\"d-block w-100\" alt=\"ehi1\"></img>\r\n                            </div>\r\n                            <div className=\"carousel-item\">\r\n                            <img src={Sfondo2} className=\"d-block w-100\" alt=\"ehi2\"></img>\r\n                            </div>\r\n                            <div className=\"carousel-item\">\r\n                            <img src={Sfondo3} className=\"d-block w-100\" alt=\"ehi3\"></img>\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselIndicators\" data-bs-slide=\"prev\">\r\n                            <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n                            <span className=\"visually-hidden\">Previous</span>\r\n                        </button>\r\n                        <button className=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselIndicators\" data-bs-slide=\"next\">\r\n                            <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n                            <span className=\"visually-hidden\">Next</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n*/\r\n\r\n","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\Navbar.js",["56","57","58","59","60"],[],{"ruleId":"61","severity":1,"message":"62","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":12},{"ruleId":"61","severity":1,"message":"65","line":5,"column":9,"nodeType":"63","messageId":"64","endLine":5,"endColumn":15},{"ruleId":"61","severity":1,"message":"66","line":5,"column":26,"nodeType":"63","messageId":"64","endLine":5,"endColumn":31},{"ruleId":"61","severity":1,"message":"67","line":9,"column":7,"nodeType":"63","messageId":"64","endLine":9,"endColumn":9},{"ruleId":"61","severity":1,"message":"68","line":10,"column":7,"nodeType":"63","messageId":"64","endLine":10,"endColumn":14},{"ruleId":"61","severity":1,"message":"69","line":11,"column":7,"nodeType":"63","messageId":"64","endLine":11,"endColumn":12},{"ruleId":"61","severity":1,"message":"70","line":12,"column":7,"nodeType":"63","messageId":"64","endLine":12,"endColumn":13},{"ruleId":"61","severity":1,"message":"66","line":5,"column":26,"nodeType":"63","messageId":"64","endLine":5,"endColumn":31},{"ruleId":"61","severity":1,"message":"71","line":7,"column":10,"nodeType":"63","messageId":"64","endLine":7,"endColumn":14},{"ruleId":"61","severity":1,"message":"72","line":7,"column":16,"nodeType":"63","messageId":"64","endLine":7,"endColumn":21},{"ruleId":"61","severity":1,"message":"73","line":7,"column":23,"nodeType":"63","messageId":"64","endLine":7,"endColumn":30},{"ruleId":"61","severity":1,"message":"74","line":7,"column":32,"nodeType":"63","messageId":"64","endLine":7,"endColumn":46},{"ruleId":"75","severity":1,"message":"76","line":343,"column":33,"nodeType":"77","endLine":343,"endColumn":154},{"ruleId":"75","severity":1,"message":"76","line":344,"column":33,"nodeType":"77","endLine":344,"endColumn":148},{"ruleId":"61","severity":1,"message":"66","line":5,"column":26,"nodeType":"63","messageId":"64","endLine":5,"endColumn":31},{"ruleId":"61","severity":1,"message":"78","line":3,"column":10,"nodeType":"63","messageId":"64","endLine":3,"endColumn":16},{"ruleId":"79","severity":1,"message":"80","line":31,"column":7,"nodeType":"77","endLine":31,"endColumn":44},{"ruleId":"79","severity":1,"message":"80","line":38,"column":13,"nodeType":"77","endLine":38,"endColumn":127},{"ruleId":"79","severity":1,"message":"80","line":41,"column":13,"nodeType":"77","endLine":41,"endColumn":127},{"ruleId":"79","severity":1,"message":"81","line":45,"column":13,"nodeType":"77","endLine":45,"endColumn":61},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'toast' is defined but never used.","'id' is assigned a value but never used.","'singolo' is assigned a value but never used.","'multi' is assigned a value but never used.","'friend' is assigned a value but never used.","'Dots' is defined but never used.","'Waves' is defined but never used.","'Spinner' is defined but never used.","'TrinitySpinner' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'notify' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md"]