[{"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\index.js":"1","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\reportWebVitals.js":"2","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\App.js":"3","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\LoginPage.js":"4","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\Navbar.js":"5","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\InitialPage.js":"6","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\Wallpaper.js":"7","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\GameField.js":"8"},{"size":1454,"mtime":1666294229400,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1663252821896,"results":"11","hashOfConfig":"10"},{"size":1253,"mtime":1668816623039,"results":"12","hashOfConfig":"10"},{"size":5351,"mtime":1668698009700,"results":"13","hashOfConfig":"10"},{"size":2576,"mtime":1668726594012,"results":"14","hashOfConfig":"10"},{"size":3055,"mtime":1668816144001,"results":"15","hashOfConfig":"10"},{"size":1460,"mtime":1668726594015,"results":"16","hashOfConfig":"10"},{"size":17049,"mtime":1668813446478,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"yf26ic",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"21"},"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\index.js",[],[],[],"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\App.js",["45","46"],[],"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\LoginPage.js",[],[],"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\Navbar.js",["47","48","49","50","51","52"],[],"import React, {Component} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nexport class Navbar extends Component {\r\n  state = {\r\n    id:this.props.PlayerUsername\r\n  }\r\n\r\n  // Funzione asincona per le richieste HTTP \r\n  async pageRequest(page){\r\n    var response = await fetch(page, {\r\n      method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n\r\n    // Visualizzazione risposta (quando pronta) in arrivo dopo richiesta HTTP\r\n    const text = await response.text()\r\n    window.alert(text)\r\n  }\r\n\r\n\r\n  render (){\r\n    return (\r\n  <>\r\n  <nav className=\"navbar navbar-expand-lg bg-light\">\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"\">Briscola</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarScroll\" aria-controls=\"navbarScroll\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarScroll\">\r\n        <ul className=\"navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll\" >\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" target=\"_blank\" role=\"button\"/*href=\"https://it.wikipedia.org/wiki/Briscola#Origine_ed_etimologia\"*/ onClick={() => {this.pageRequest(\"/StoriaBriscola\")}}\r\n            >Storia del gioco</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" target=\"_blank\" role=\"button\" onClick={() => {this.pageRequest(\"/PuntiBriscola\")}}\r\n            >Valore delle carte</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" target=\"_blank\" role=\"button\"/*href=\"https://it.wikipedia.org/wiki/Briscola#Regole\"*/ onClick={() => {this.pageRequest(\"/RegoleBriscola\")}}\r\n            >Regole</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" target=\"_blank\">Il tuo username è:</a> \r\n          </li>\r\n          <li>\r\n            <a className=\"nav-link\" style={{float:\"right\"}}>{this.props.PlayerUsername}</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n","C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\InitialPage.js",[],[],"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\Wallpaper.js",[],[],"C:\\Users\\loreb\\Documents\\Unipr\\Terzo_anno\\Primo_semestre\\Tecnologie_internet\\Briscola\\client\\src\\components\\GameField.js",["53","54","55","56"],[],"import { React, Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { socket } from \"./LoginPage.js\"\r\nimport { notify } from '../App.js'\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { MinimalSpinner } from 'loading-animations-react';\r\nimport { ReactSession } from 'react-client-session';\r\nimport \"./GameField.css\"\r\n//import { GameField } from './GameField';\r\n\r\n// Immagine retro della carta \r\nconst cartaCoperta = require('../Images/RetroGrande.jpg');\r\n\r\n\r\nexport class GameField extends Component {\r\n  state = {\r\n    primaCartaMia: \"\",\r\n    secondaCartaMia: \"\",\r\n    terzaCartaMia: \"\",\r\n    immPrimaCartaMia: \"\",\r\n    immSecondaCartaMia: \"\",\r\n    immTerzaCartaMia: \"\",\r\n    primaCartaAvversario: \"\",\r\n    secondaCartaAvversario: \"\",\r\n    terzaCartaAvversario: \"\",\r\n    primaCartaTavola: \"\",\r\n    secondaCartaTavola: \"\",\r\n    immBriscolaEstratta: \"\",\r\n    briscolaEstratta: \"\",\r\n    punteggioMio: 0,\r\n    punteggioAvversario: 0,\r\n    idPartita: 0,\r\n    visibilityMazzo: \"hidden\",\r\n    visibilityField: \"hidden\",\r\n    //visibilityEsito: \"hidden\",\r\n    esitoPartita: \"\"\r\n  };\r\n\r\n\r\n\r\n\r\n  handleClick = event => {      // Metodo serve per sapere quale elemento ha passato attivato evento click (non si riesce direttamente dall'elemento)\r\n    var id = event.currentTarget.id     // Elemento sul quale è stato fatto il click\r\n    //window.alert(id);\r\n    console.log(this.state.carteGiocate)\r\n    if (this.state.secondaCartaTavola === \"\") {\r\n      if (socket.connected) {    // verifichiamo di essere connessi prima di inviare il click\r\n        switch (id) {\r\n          case \"FirstPlayerFirstCard\": {\r\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.primaCartaMia)\r\n            break;\r\n          }\r\n          case \"FirstPlayerSecondCard\": {\r\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.secondaCartaMia)\r\n            break;\r\n          }\r\n          case \"FirstPlayerThirdCard\": {\r\n            socket.emit(\"cartaGiocataReq\", this.state.idPartita, this.state.terzaCartaMia)\r\n            break;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    const username = ReactSession.get(\"User\");\r\n    if (username === undefined) {\r\n      notify(\"non hai fatto il login\")\r\n      document.location.href = \"/\";\r\n    }\r\n    socket.off(\"partitaIniziata\").on(\"partitaIniziata\", (partita, mano, briscolaEstrattaParam) => {\r\n\r\n      // mano e partita vengono mandate come stringhe, vanno sistemate per formato corretto e poi convertite \r\n      var manoJSON = JSON.parse(mano.substring(mano.indexOf(\"{\")))              // , mano.lastIndexOf(\"}\")\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))     // , partita.lastIndexOf(\"}\")\r\n\r\n      // Rendiamo il campo visibile\r\n      this.setState({ visibilityField: \"visible\", visibilityMazzo: \"visible\" })\r\n\r\n\r\n      // Settiamo la mano iniziale\r\n      this.setState({ primaCartaMia: JSON.stringify(manoJSON.PrimaCarta) })\r\n      this.setState({ secondaCartaMia: JSON.stringify(manoJSON.SecondaCarta) })\r\n      this.setState({ terzaCartaMia: JSON.stringify(manoJSON.TerzaCarta) })\r\n      // Dobbiamo impostare lo stato delle immagini delle carte del giocatore1 a parte\r\n      const percorsoPrima = manoJSON.PrimaCarta.ImagePath.substring(manoJSON.PrimaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.PrimaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoSeconda = manoJSON.SecondaCarta.ImagePath.substring(manoJSON.SecondaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.SecondaCarta.ImagePath.lastIndexOf(\".\"))\r\n      const percorsoTerza = manoJSON.TerzaCarta.ImagePath.substring(manoJSON.TerzaCarta.ImagePath.lastIndexOf(\"/\") + 1, manoJSON.TerzaCarta.ImagePath.lastIndexOf(\".\"))\r\n      // Non si può fare require(manoJSON.PrimaCarta.ImagePath)\r\n      this.setState({ immPrimaCartaMia: require(\"../Images/Napoletane/\" + percorsoPrima + \".jpg\") })\r\n      this.setState({ immSecondaCartaMia: require(\"../Images/Napoletane/\" + percorsoSeconda + \".jpg\") })\r\n      this.setState({ immTerzaCartaMia: require(\"../Images/Napoletane/\" + percorsoTerza + \".jpg\") })\r\n\r\n      // Carte avversario\r\n      this.setState({ primaCartaAvversario: cartaCoperta })\r\n      this.setState({ secondaCartaAvversario: cartaCoperta })\r\n      this.setState({ terzaCartaAvversario: cartaCoperta })\r\n\r\n      // Punteggio iniziale, 0 - 0\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({ punteggioMio: JSON.stringify(partitaJSON.Punteggio1) })\r\n        this.setState({ punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2) })\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({ punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2) })\r\n        this.setState({ punteggioMio: JSON.stringify(partitaJSON.Punteggio1) })\r\n      }\r\n\r\n      this.setState({ idPartita: JSON.stringify(partitaJSON.IdPartita) })\r\n\r\n      briscolaEstrattaParam = JSON.parse(briscolaEstrattaParam.substring(briscolaEstrattaParam.indexOf(\"{\")))\r\n      const cartaBriscolaEstratta = briscolaEstrattaParam.ImagePath.substring(briscolaEstrattaParam.ImagePath.lastIndexOf(\"/\") + 1, briscolaEstrattaParam.ImagePath.lastIndexOf(\".\"))\r\n      this.setState({ immBriscolaEstratta: require(\"../Images/Napoletane/\" + cartaBriscolaEstratta + \".jpg\") })\r\n      this.setState({ briscolaEstratta: JSON.stringify(briscolaEstrattaParam) })\r\n\r\n\r\n      // Evento che viene scatenato quando si preme il pulsante \"indietro\" del browser\r\n      window.addEventListener('popstate', (event) => {\r\n        socket.emit(\"AggiornaID\", username)\r\n        socket.emit(\"abbandonaPartita\")\r\n      });\r\n    })\r\n\r\n    // RISPOSTA ALLA RICHIESTA DI METTERE UNA CARTA IN TAVOLA\r\n    socket.off(\"cartaGiocataRes\").on(\"cartaGiocataRes\", (outcome, carta, numeroInTavola) => {\r\n      if (outcome) {\r\n        // se esito positivo alla richiesta di giocare una carta\r\n        switch (carta) {\r\n          case this.state.primaCartaMia:\r\n            this.setState({ primaCartaMia: \"\", immPrimaCartaMia: \"\" })     // Ovviamente allo svuotamento corrisponderà una \"azione grafica\" associata\r\n            //this.setState({immPrimaCartaMia : \"\"})\r\n            break;\r\n          case this.state.secondaCartaMia:\r\n            this.setState({ secondaCartaMia: \"\", immSecondaCartaMia: \"\" })\r\n            //this.setState({immSecondaCartaMia : \"\"})\r\n            break;\r\n          case this.state.terzaCartaMia:\r\n            this.setState({ terzaCartaMia: \"\", immTerzaCartaMia: \"\" })\r\n            //this.setState({immTerzaCartaMia : \"\"})\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        // Visualizzazione carta in tavola \r\n        var cartaJSON = JSON.parse(carta.substring(carta.indexOf(\"{\")))\r\n        const numeroCarta = cartaJSON.ImagePath.substring(cartaJSON.ImagePath.lastIndexOf(\"/\") + 1, cartaJSON.ImagePath.lastIndexOf(\".\"))\r\n        if (numeroInTavola === 1) {\r\n          this.setState({ primaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\") })\r\n        } else {\r\n          this.setState({ secondaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\") })\r\n        }\r\n\r\n      } else {\r\n        notify(\"Non puoi giocare la carta\")\r\n      }\r\n\r\n    })\r\n\r\n    // QUANDO L'AVVERSARIO GIOCA LA CARTA VIENE VISUALIZZATO GRAFICAMENTE\r\n    socket.off(\"cartaGiocataAvversario\").on(\"cartaGiocataAvversario\", (imagePath, numero) => {\r\n      var found = false\r\n\r\n      while (!found) {\r\n        switch (this.randomNumberInRange(1, 3)) {\r\n          case 1:\r\n            if (this.state.primaCartaAvversario !== \"\") {\r\n              found = true\r\n            }\r\n            this.setState({ primaCartaAvversario: \"\" })\r\n            break;\r\n          case 2:\r\n            if (this.state.secondaCartaAvversario !== \"\") {\r\n              found = true\r\n            }\r\n            this.setState({ secondaCartaAvversario: \"\" })\r\n            break;\r\n          case 3:\r\n            if (this.state.terzaCartaAvversario !== \"\") {\r\n              found = true\r\n            }\r\n            this.setState({ terzaCartaAvversario: \"\" })\r\n            break;\r\n          default:\r\n            notify(\"Carta giocata avversario, case default\")\r\n            break;\r\n        }\r\n      }\r\n\r\n      // visualizzazione in tavola della carta giocata\r\n      const numeroCarta = imagePath.substring(imagePath.lastIndexOf(\"/\") + 1, imagePath.lastIndexOf(\".\"))        // TODO: funzione?\r\n      if (numero === 1) {\r\n        this.setState({ primaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\") })\r\n      } else {\r\n        this.setState({ secondaCartaTavola: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\") })\r\n      }\r\n\r\n\r\n\r\n    })\r\n\r\n\r\n    socket.off(\"fineMano\").on(\"fineMano\", (partita, cartaPescata) => {\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))\r\n      var cartaPescataJSON = JSON.parse(cartaPescata.substring(cartaPescata.indexOf(\"{\")))\r\n      // Aggiornamento punteggio\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({ punteggioMio: JSON.stringify(partitaJSON.Punteggio1) })\r\n        this.setState({ punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2) })\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({ punteggioAvversario: JSON.stringify(partitaJSON.Punteggio1) })\r\n        this.setState({ punteggioMio: JSON.stringify(partitaJSON.Punteggio2) })\r\n      }\r\n      // Confronto ChiInizia con socket.id e dico se tocca a me o avversario\r\n      if (socket.id === partitaJSON.ChiInizia) {\r\n        notify(\"Tocca a me\")\r\n      }\r\n\r\n\r\n\r\n      if (partitaJSON.CarteRimanenti === 0) {\r\n        this.setState({ immBriscolaEstratta: \"\" })\r\n        this.setState({ visibilityMazzo: \"hidden\" })\r\n      } else if (partitaJSON.CarteRimanenti === 5) {\r\n        notify(\"Mancano 5 carte nel mazzo\")\r\n      }\r\n\r\n      this.setState({\r\n        primaCartaTavola: \"\",\r\n        secondaCartaTavola: \"\"\r\n      })\r\n\r\n\r\n      if (cartaPescata !== {}) {  // se non è vuota\r\n        // Rimuovere le carte in tavola e aggiungere quelle in mano\r\n        const numeroCarta = cartaPescataJSON.ImagePath.substring(cartaPescataJSON.ImagePath.lastIndexOf(\"/\") + 1, cartaPescataJSON.ImagePath.lastIndexOf(\".\"))\r\n\r\n        // Bisogna trovare quale carta è stata giocata per capire dove inserire quella appena pescata\r\n        if (this.state.primaCartaMia === \"\") {\r\n          this.setState({\r\n            immPrimaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\r\n            primaCartaMia: cartaPescata\r\n          })\r\n        } else if (this.state.secondaCartaMia === \"\") {\r\n          this.setState({\r\n            immSecondaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\r\n            secondaCartaMia: cartaPescata\r\n          })\r\n        } else if (this.state.terzaCartaMia === \"\") {     \r\n          this.setState({\r\n            immTerzaCartaMia: require(\"../Images/Napoletane/\" + numeroCarta + \".jpg\"),\r\n            terzaCartaMia: cartaPescata\r\n          })\r\n        }\r\n\r\n        if (this.state.primaCartaAvversario === \"\") {\r\n          this.setState({\r\n            primaCartaAvversario: cartaCoperta\r\n          })\r\n        } else if (this.state.secondaCartaAvversario === \"\") {\r\n          this.setState({\r\n            secondaCartaAvversario: cartaCoperta\r\n          })\r\n        } else if (this.state.terzaCartaAvversario === \"\"){      \r\n          this.setState({\r\n            terzaCartaAvversario: cartaCoperta\r\n          })\r\n        }\r\n      }\r\n\r\n    })\r\n\r\n    socket.off(\"richiestaAmicoRifiutata\", () => {\r\n      notify(\"Il tuo amico ha rifiutato la richiesta\")\r\n    })\r\n\r\n\r\n    socket.off(\"finePartita\").on(\"finePartita\", (vincitore, partita) => {\r\n      var partitaJSON = JSON.parse(partita.substring(partita.indexOf(\"{\")))\r\n      // Aggiornamento punteggio\r\n      if (socket.id === partitaJSON.IdGiocatore1) {\r\n        this.setState({ punteggioMio: JSON.stringify(partitaJSON.Punteggio1) })\r\n        this.setState({ punteggioAvversario: JSON.stringify(partitaJSON.Punteggio2) })\r\n      } else {\r\n        // inversione per avere visuale relativa a giocatore, altrimenti tutti e due vedono uguale\r\n        this.setState({ punteggioAvversario: JSON.stringify(partitaJSON.Punteggio1) })\r\n        this.setState({ punteggioMio: JSON.stringify(partitaJSON.Punteggio2) })\r\n      }\r\n\r\n      // Rimuoviamo le ultime carte giocate dalla tavola\r\n      this.setState({ primaCartaTavola: \"\" })\r\n      this.setState({ secondaCartaTavola: \"\" })\r\n\r\n      notify(\"La partita è finita\")\r\n      if (socket.id === vincitore) {\r\n        notify(\"Hai vinto!\")\r\n        this.state.esitoPartita = \"VITTORIA!\"\r\n      } else {\r\n        notify(\"Hai perso!\")\r\n        this.state.esitoPartita = \"SCONFITTA...\"\r\n      }\r\n      window.PopStateEvent()\r\n    })\r\n\r\n    socket.off(\"disconnessioneAvversario\").on(\"disconnessioneAvversario\", () => {\r\n      notify(\"L'avversario si è disconnesso\")\r\n    })\r\n\r\n    socket.off(\"abbandonoAvversario\").on(\"abbandonoAvversario\", () => {\r\n      notify(\"L'avversario ha abbandonato la partita\")\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  randomNumberInRange(min, max) {\r\n    // 👇️ get number between min (inclusive) and max (inclusive)\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div style={{ \"height\": \"200px\", \"width\": \"200px\", \"position\": \"absolute\", \"marginLeft\": \"45%\", \"marginTop\": \"15%\", \"visibility\": (this.state.visibilityField === \"hidden\") ? \"visible\" : \"hidden\" }} >\r\n          <MinimalSpinner color=\"green\" text=\"Aspettando l'avversario...\" />\r\n        </div>\r\n        <div className=\"BiggerContainer\">\r\n          <div className=\"container bg-success\" style={{ visibility: this.state.visibilityField, position: \"fixed\", top: 0, right: 0, width: \"100vw\", height: \"100vh\" }}>\r\n            <div id='Celebration' className='h1 text-white'>{this.state.esitoPartita}</div>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm\" id=\"SecondPlayerFirstCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card\" src={this.state.primaCartaAvversario} alt=\"\"></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"SecondPlayerSecondCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card\" src={this.state.secondaCartaAvversario} alt=\"\"></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"SecondPlayerThirdCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card\" src={this.state.terzaCartaAvversario} alt=\"\"></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"SecondPlayerPoints\" onClick={this.handleClick}>\r\n                <div className=\"Punteggio rounded-5 text-light\">{this.state.punteggioAvversario}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm\"><img className=\"rounded-4 game-card\" src={cartaCoperta} id=\"Mazzo\" style={{ float: \"left\", visibility: this.state.visibilityMazzo }}></img></div>\r\n              <div className=\"col-sm\"><img className=\"rounded-4 game-card\" src={this.state.immBriscolaEstratta} style={{ float: \"left\", transform: \"rotate(90deg)\" }}></img></div>\r\n              <div className=\"col-sm\"><img className=\"rounded-4 game-card\" src={this.state.primaCartaTavola} alt=\"\"></img></div>\r\n              <div className=\"col-sm\"><img className=\"rounded-4 game-card\" src={this.state.secondaCartaTavola} alt=\"\"></img></div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm\" id=\"FirstPlayerFirstCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card my-card\" role=\"button\" src={this.state.immPrimaCartaMia} alt=\"\" style={{ position: \"relative\", bottom: 0 }}></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"FirstPlayerSecondCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card my-card\" role=\"button\" src={this.state.immSecondaCartaMia} alt=\"\" style={{ position: \"relative\", bottom: 0 }}></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"FirstPlayerThirdCard\" onClick={this.handleClick}>\r\n                <img className=\"rounded-4 game-card my-card\" role=\"button\" src={this.state.immTerzaCartaMia} alt=\"\" style={{ position: \"relative\", bottom: 0 }}></img>\r\n              </div>\r\n              <div className=\"col-sm\" id=\"FirstPlayerPoints\" onClick={this.handleClick}>\r\n                <div className=\"Punteggio rounded-5 text-light\">{this.state.punteggioMio}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div style={{ height: \"0px\" }}>\r\n            <ToastContainer />\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n",{"ruleId":"57","severity":1,"message":"58","line":4,"column":9,"nodeType":"59","messageId":"60","endLine":4,"endColumn":15},{"ruleId":"57","severity":1,"message":"61","line":6,"column":9,"nodeType":"59","messageId":"60","endLine":6,"endColumn":20},{"ruleId":"62","severity":1,"message":"63","line":32,"column":7,"nodeType":"64","endLine":32,"endColumn":43},{"ruleId":"62","severity":1,"message":"65","line":39,"column":13,"nodeType":"64","endLine":40,"endColumn":14},{"ruleId":"62","severity":1,"message":"65","line":43,"column":13,"nodeType":"64","endLine":44,"endColumn":14},{"ruleId":"62","severity":1,"message":"65","line":47,"column":13,"nodeType":"64","endLine":48,"endColumn":14},{"ruleId":"62","severity":1,"message":"65","line":51,"column":13,"nodeType":"64","endLine":51,"endColumn":80},{"ruleId":"62","severity":1,"message":"65","line":54,"column":13,"nodeType":"64","endLine":54,"endColumn":61},{"ruleId":"66","severity":1,"message":"67","line":302,"column":9,"nodeType":"68","messageId":"69","endLine":302,"endColumn":19},{"ruleId":"66","severity":1,"message":"67","line":305,"column":9,"nodeType":"68","messageId":"69","endLine":305,"endColumn":19},{"ruleId":"70","severity":1,"message":"71","line":352,"column":39,"nodeType":"64","endLine":352,"endColumn":172},{"ruleId":"70","severity":1,"message":"71","line":353,"column":39,"nodeType":"64","endLine":353,"endColumn":167},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'InitialPage' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]